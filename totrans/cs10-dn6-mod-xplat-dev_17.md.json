["```cs\n<div>\n@for (int i = 0; i < Maximum; i++)\n{\n  if (i < Value)\n  {\n    <span class=\"oi oi-star-filled\" />\n  }\n  else\n  {\n    <span class=\"oi oi-star-empty\" />\n  }\n}\n</div>\n@code {\n  [Parameter]\n  public byte Maximum { get; set; }\n  [Parameter]\n  public byte Value { get; set; }\n} \n```", "```cs\n<h1>Review</h1>\n<Rating id=\"rating\" Maximum=\"5\" Value=\"3\" />\n<textarea id=\"comment\" /> \n```", "```cs\n     builder.Services.AddRazorPages();\n      **builder.Services.AddServerSideBlazor();**\n      builder.Services.AddSingleton<WeatherForecastService>(); \n    ```", "```cs\n    app.UseRouting();\n    **app.MapBlazorHub();**\n    **app.MapFallbackToPage(****\"/_Host\"****);**\n    app.Run(); \n    ```", "```cs\n    @page \"/\"\n    @namespace  Northwind.BlazorServer.Pages \n    @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers \n    @{\n      Layout = \"_Layout\";\n    }\n    <component type=\"typeof(App)\" render-mode=\"ServerPrerendered\" /> \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Web\n    @namespace Northwind.BlazorServer.Pages\n    @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0\" />\n      <base href=\"~/\" />\n      <link rel=\"stylesheet\" href=\"css/bootstrap/bootstrap.min.css\" />\n      <link href=\"css/site.css\" rel=\"stylesheet\" />\n      <link href=\"Northwind.BlazorServer.styles.css\" rel=\"stylesheet\" />\n      <component type=\"typeof(HeadOutlet)\" render-mode=\"ServerPrerendered\" />\n    </head>\n    <body>\n      @RenderBody()\n      <div id=\"blazor-error-ui\">\n        <environment include=\"Staging,Production\">\n          An error has occurred. This application may no longer respond until reloaded.\n        </environment>\n        <environment include=\"Development\">\n          An unhandled exception has occurred. See browser dev tools for details.\n        </environment>\n        <a href=\"\" class=\"reload\">Reload</a>\n        <a class=\"dismiss\">![](img/B17442_19_001.png)</a>\n      </div>\n      <script src=\"img/blazor.server.js\"></script>\n    </body>\n    </html> \n    ```", "```cs\n    <Router AppAssembly=\"@typeof(App).Assembly\">\n      <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\"\n                   DefaultLayout=\"@typeof(MainLayout)\" />\n        <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n      </Found>\n      <NotFound>\n        <PageTitle>Not found</PageTitle>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n          <p>Sorry, there's nothing at this address.</p>\n        </LayoutView>\n      </NotFound>\n    </Router> \n    ```", "```cs\n    @inherits LayoutComponentBase\n    <PageTitle>Northwind.BlazorServer</PageTitle>\n    <div class=\"page\">\n      <div class=\"sidebar\">\n        <NavMenu />\n      </div>\n      <main>\n        <div class=\"top-row px-4\">\n          <a href=\"https://docs.microsoft.com/aspnet/\" \n             target=\"_blank\">About</a>\n        </div>\n        <article class=\"content px-4\">\n          @Body\n        </article>\n      </main>\n    </div> \n    ```", "```cs\n    <div class=\"top-row ps-3 navbar navbar-dark\">\n      <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"\">Northwind.BlazorServer</a>\n        <button title=\"Navigation menu\" class=\"navbar-toggler\" \n                @onclick=\"ToggleNavMenu\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n      </div>\n    </div>\n    <div class=\"@NavMenuCssClass\" @onclick=\"ToggleNavMenu\">\n      <nav class=\"flex-column\">\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"\" Match=\"NavLinkMatch.All\">\n            <span class=\"oi oi-home\" aria-hidden=\"true\"></span> Home\n          </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"counter\">\n            <span class=\"oi oi-plus\" aria-hidden=\"true\"></span> Counter\n          </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"fetchdata\">\n            <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Fetch data\n          </NavLink>\n        </div>\n      </nav>\n    </div>\n    @code {\n      private bool collapseNavMenu = true;\n      private string? NavMenuCssClass => collapseNavMenu ? \"collapse\" : null;\n      private void ToggleNavMenu()\n      {\n        collapseNavMenu = !collapseNavMenu;\n      }\n    } \n    ```", "```cs\n    @page \"/fetchdata\"\n    <PageTitle>Weather forecast</PageTitle>\n    @using Northwind.BlazorServer.Data\n    @inject WeatherForecastService ForecastService\n    <h1>Weather forecast</h1>\n    <p>This component demonstrates fetching data from a service.</p> \n    @if (forecasts == null)\n    {\n      <p><em>Loading...</em></p>\n    }\n    else\n    {\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n        @foreach (var forecast in forecasts)\n        {\n          <tr>\n            <td>@forecast.Date.ToShortDateString()</td>\n            <td>@forecast.TemperatureC</td>\n            <td>@forecast.TemperatureF</td>\n            <td>@forecast.Summary</td>\n           </tr>\n        }\n        </tbody>\n      </table>\n    }\n    @code {\n      private WeatherForecast[]? forecasts;\n      protected override async Task OnInitializedAsync()\n      {\n        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\n      }\n    } \n    ```", "```cs\n    namespace Northwind.BlazorServer.Data\n    {\n      public class WeatherForecastService\n      {\n        private static readonly string[] Summaries = new[]\n        {\n          \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\",\n          \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n        public Task<WeatherForecast[]> GetForecastAsync(DateTime startDate)\n        {\n          return Task.FromResult(Enumerable.Range(1, 5)\n            .Select(index => new WeatherForecast\n              {\n                Date = startDate.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n              }).ToArray());\n        }\n      }\n    } \n    ```", "```cs\n@page \"customers\" \n```", "```cs\n[Route(\"customers\")]\npublic class CustomersController\n{ \n```", "```cs\n@page \"/customers/{country}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string Country { get; set; }\n} \n```", "```cs\n@page \"/customers/{country?}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string Country { get; set; }\n  protected override void OnParametersSet()\n  {\n    // if the automatically set property is null\n    // set its value to USA\n    Country = Country ?? \"USA\";\n  }\n} \n```", "```cs\nusing Microsoft.AspNetCore.Components;\npublic abstract class ComponentBase : IComponent, IHandleAfterRender, IHandleEvent\n{\n  // members not shown\n} \n```", "```cs\n@inherits LayoutComponentBase\n<div>\n  ...\n  @Body\n  ...\n</div> \n```", "```cs\n@page \"/customers\"\n@layout AlternativeLayout\n<div>\n  ...\n</div> \n```", "```cs\n<a href=\"/customers\">Customers</a> \n```", "```cs\n<NavLink href=\"/customers\">Customers</NavLink> \n```", "```cs\n/customers\n/customers/USA\n/customers/Germany/Berlin \n```", "```cs\n<NavLink href=\"/customers\" Match=\"NavLinkMatch.All\">Customers</NavLink> \n```", "```cs\n    \"profiles\": {\n      \"Northwind.BlazorServer\": {\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n    **\"applicationUrl\"****:** **\"https://localhost:5001;http://localhost:5000\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        }\n      }, \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\">\n      <PropertyGroup>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <ServiceWorkerAssetsManifest>service-worker-assets.js\n          </ServiceWorkerAssetsManifest>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly\" \n          Version=\"6.0.0\" />\n        <PackageReference Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly.DevServer\" \n          Version=\"6.0.0\" PrivateAssets=\"all\" />\n      </ItemGroup>\n      <ItemGroup>\n        <ProjectReference Include=\n          \"..\\Shared\\Northwind.BlazorWasm.Shared.csproj\" />\n      </ItemGroup>\n      <ItemGroup>\n        <ServiceWorker Include=\"wwwroot\\service-worker.js\" \n          PublishedContent=\"wwwroot\\service-worker.published.js\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    using Microsoft.AspNetCore.Components.Web;\n    using Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n    using Northwind.BlazorWasm.Client;\n    var builder = WebAssemblyHostBuilder.CreateDefault(args); \n    builder.RootComponents.Add<App>(\"#app\");\n    builder.RootComponents.Add<HeadOutlet>(\"head::after\");\n    builder.Services.AddScoped(sp => new HttpClient\n      { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n    await builder.Build().RunAsync(); \n    ```", "```cs\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n      <title>Northwind.BlazorWasm</title>\n      <base href=\"/\" />\n      <link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\" />\n      <link href=\"css/app.css\" rel=\"stylesheet\" />\n      <link href=\"Northwind.BlazorWasm.Client.styles.css\" rel=\"stylesheet\" />\n      <link href=\"manifest.json\" rel=\"manifest\" />\n      <link rel=\"apple-touch-icon\" sizes=\"512x512\" href=\"icon-512.png\" />\n      <link rel=\"apple-touch-icon\" sizes=\"192x192\" href=\"icon-192.png\" />\n    </head>\n    <body>\n      <div id=\"app\">Loading...</div>\n      <div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n        <a href=\"\" class=\"reload\">Reload</a>\n        <a class=\"dismiss\">![](img/B17442_19_001.png)</a>\n      </div>\n      <script src=\"img/blazor.webassembly.js\"></script>\n      <script>navigator.serviceWorker.register('service-worker.js');</script>\n    </body>\n    </html> \n    ```", "```cs\n    @page \"/fetchdata\"\n    @using Northwind.BlazorWasm.Shared\n    **@inject HttpClient Http**\n    <h1>Weather forecast</h1>\n    ...\n    @code {\n      private WeatherForecast[]? forecasts;\n      protected override async Task OnInitializedAsync()\n      {\n     **forecasts =** **await**\n     **Http.GetFromJsonAsync<WeatherForecast[]>(****\"WeatherForecast\"****);**\n      }\n    } \n    ```", "```cs\n    <h3>Customers@(string.IsNullOrWhiteSpace(Country) ? \" Worldwide\" : \" in \" + Country)</h3>\n    @code {\n      [Parameter]\n      public string? Country { get; set; }\n    } \n    ```", "```cs\n    <Customers Country=\"Germany\" />\n    <Customers /> \n    ```", "```cs\n    @page \"/customers/{country?}\" \n    ```", "```cs\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers\" Match=\"NavLinkMatch.All\">\n        <span class=\"oi oi-people\" aria-hidden=\"true\"></span>\n        Customers Worldwide\n      </NavLink>\n    </div>\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers/Germany\">\n        <span class=\"oi oi-people\" aria-hidden=\"true\"></span>\n        Customers in Germany\n      </NavLink>\n    </div> \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\Northwind.Common.DataContext.Sqlite\n    \\Northwind.Common.DataContext.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Packt.Shared; // AddNorthwindContext extension method \n    ```", "```cs\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\n    @using Packt.Shared  @* Northwind entities *@ \n    ```", "```cs\n    @using Microsoft.EntityFrameworkCore  @* ToListAsync extension method *@\n    @page \"/customers/{country?}\" \n    @inject NorthwindContext db\n    <h3>Customers @(string.IsNullOrWhiteSpace(Country) \n          ? \"Worldwide\" : \"in \" + Country)</h3>\n    @if (customers == null)\n    {\n    <p><em>Loading...</em></p>\n    }\n    else\n    {\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Company Name</th>\n          <th>Address</th>\n          <th>Phone</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n      @foreach (Customer c in customers)\n      {\n        <tr>\n          <td>@c.CustomerId</td>\n          <td>@c.CompanyName</td>\n          <td>\n            @c.Address<br/>\n            @c.City<br/>\n            @c.PostalCode<br/>\n            @c.Country\n          </td>\n          <td>@c.Phone</td>\n          <td>\n            <a class=\"btn btn-info\" href=\"editcustomer/@c.CustomerId\">\n              <i class=\"oi oi-pencil\"></i></a>\n            <a class=\"btn btn-danger\" \n               href=\"deletecustomer/@c.CustomerId\">\n              <i class=\"oi oi-trash\"></i></a>\n          </td>\n        </tr>\n      }\n      </tbody>\n    </table>\n    }\n    @code {\n      [Parameter]\n      public string? Country { get; set; }\n      private IEnumerable<Customer>? customers;\n      protected override async Task OnParametersSetAsync()\n      {\n        if (string.IsNullOrWhiteSpace(Country))\n        {\n          customers = await db.Customers.ToListAsync();\n        }\n        else\n        {\n          customers = await db.Customers\n            .Where(c => c.Country == Country).ToListAsync();\n        }\n      }\n    } \n    ```", "```cs\n    namespace Packt.Shared;\n    public interface INorthwindService\n    {\n      Task<List<Customer>> GetCustomersAsync();\n      Task<List<Customer>> GetCustomersAsync(string country);\n      Task<Customer?> GetCustomerAsync(string id);\n      Task<Customer> CreateCustomerAsync(Customer c);\n      Task<Customer> UpdateCustomerAsync(Customer c);\n      Task DeleteCustomerAsync(string id);\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; \n    namespace Packt.Shared;\n    public class NorthwindService : INorthwindService\n    {\n      private readonly NorthwindContext db;\n      public NorthwindService(NorthwindContext db)\n      {\n        this.db = db;\n      }\n      public Task<List<Customer>> GetCustomersAsync()\n      {\n        return db.Customers.ToListAsync();\n      }\n      public Task<List<Customer>> GetCustomersAsync(string country)\n      {\n        return db.Customers.Where(c => c.Country == country).ToListAsync();\n      }\n      public Task<Customer?> GetCustomerAsync(string id)\n      {\n        return db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id);\n      }\n      public Task<Customer> CreateCustomerAsync(Customer c)\n      {\n        db.Customers.Add(c); \n        db.SaveChangesAsync();\n        return Task.FromResult(c);\n      }\n      public Task<Customer> UpdateCustomerAsync(Customer c)\n      {\n        db.Entry(c).State = EntityState.Modified;\n        db.SaveChangesAsync();\n        return Task.FromResult(c);\n      }\n      public Task DeleteCustomerAsync(string id)\n      {\n        Customer? customer = db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id).Result;\n        if (customer == null)\n        {\n          return Task.CompletedTask;\n        }\n        else\n        {\n          db.Customers.Remove(customer); \n          return db.SaveChangesAsync();\n        }\n      }\n    } \n    ```", "```cs\n    builder.Services.AddTransient<INorthwindService, NorthwindService>(); \n    ```", "```cs\n    @inject INorthwindService service \n    ```", "```cs\n    protected override async Task OnParametersSetAsync()\n    {\n      if (string.IsNullOrWhiteSpace(Country))\n      {\n     **customers =** **await** **service.GetCustomersAsync();**\n      }\n      else\n      {\n     **customers =** **await** **service.GetCustomersAsync(Country);**\n      }\n    } \n    ```", "```cs\n<EditForm Model=\"@customer\" OnSubmit=\"ExtraValidation\">\n  <DataAnnotationsValidator />\n  <ValidationSummary />\n  <InputText id=\"name\" @bind-Value=\"customer.CompanyName\" />\n  <button type=\"submit\">Submit</button>\n</EditForm>\n@code {\n  private Customer customer = new();\n  private void ExtraValidation()\n  {\n    // perform any extra validation\n  }\n} \n```", "```cs\n    <EditForm Model=\"@Customer\" OnValidSubmit=\"@OnValidSubmit\">\n      <DataAnnotationsValidator />\n      <div class=\"form-group\">\n        <div>\n          <label>Customer Id</label>\n          <div>\n            <InputText @bind-Value=\"@Customer.CustomerId\" />\n            <ValidationMessage For=\"@(() => Customer.CustomerId)\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group \">\n        <div>\n          <label>Company Name</label>\n          <div>\n            <InputText @bind-Value=\"@Customer.CompanyName\" />\n            <ValidationMessage For=\"@(() => Customer.CompanyName)\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group \">\n        <div>\n          <label>Address</label>\n          <div>\n            <InputText @bind-Value=\"@Customer.Address\" />\n            <ValidationMessage For=\"@(() => Customer.Address)\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group \">\n        <div>\n          <label>Country</label>\n          <div>\n            <InputText @bind-Value=\"@Customer.Country\" />\n            <ValidationMessage For=\"@(() => Customer.Country)\" />\n          </div>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn btn-@ButtonStyle\">\n        @ButtonText\n      </button>\n    </EditForm>\n    @code { \n      [Parameter]\n      public Customer Customer { get; set; } = null!;\n      [Parameter]\n      public string ButtonText { get; set; } = \"Save Changes\";\n      [Parameter]\n      public string ButtonStyle { get; set; } = \"info\";\n      [Parameter]\n      public EventCallback OnValidSubmit { get; set; }\n    } \n    ```", "```cs\n    @page \"/createcustomer\"\n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3>Create Customer</h3>\n    <CustomerDetail ButtonText=\"Create Customer\"\n                    Customer=\"@customer\" \n                    OnValidSubmit=\"@Create\" />\n    @code {\n      private Customer customer = new();\n      private async Task Create()\n      {\n        await service.CreateCustomerAsync(customer);\n        navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n    <div class=\"form-group\">\n      <a class=\"btn btn-info\" href=\"createcustomer\">\n      <i class=\"oi oi-plus\"></i> Create New</a>\n    </div> \n    ```", "```cs\n    @page \"/editcustomer/{customerid}\" \n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3>Edit Customer</h3>\n    <CustomerDetail ButtonText=\"Update\"\n                    Customer=\"@customer\" \n                    OnValidSubmit=\"@Update\" />\n    @code { \n      [Parameter]\n      public string CustomerId { get; set; } \n      private Customer? customer = new();\n      protected async override Task OnParametersSetAsync()\n      {\n        customer = await service.GetCustomerAsync(CustomerId);\n      }\n      private async Task Update()\n      {\n        if (customer is not null)\n        {\n          await service.UpdateCustomerAsync(customer);\n        }\n        navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n    @page \"/deletecustomer/{customerid}\" \n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3>Delete Customer</h3>\n    <div class=\"alert alert-danger\">\n      Warning! This action cannot be undone!\n    </div>\n    <CustomerDetail ButtonText=\"Delete Customer\"\n                    ButtonStyle=\"danger\" \n                    Customer=\"@customer\" \n                    OnValidSubmit=\"@Delete\" />\n    @code { \n      [Parameter]\n      public string CustomerId { get; set; } \n      private Customer? customer = new();\n      protected async override Task OnParametersSetAsync()\n      {\n        customer = await service.GetCustomerAsync(CustomerId);\n      }\n      private async Task Delete()\n      {\n        if (customer is not null)\n        {\n          await service.DeleteCustomerAsync(CustomerId);\n        }\n        navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\..\\Northwind.Common.DataContext.Sqlite\n    \\Northwind.Common.DataContext.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Packt.Shared; \n    ```", "```cs\n    // if using SQL Server\n    builder.Services.AddNorthwindContext();\n    // if using SQLite\n    builder.Services.AddNorthwindContext(\n      relativePath: Path.Combine(\"..\", \"..\")); \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc; // [ApiController], [Route]\n    using Microsoft.EntityFrameworkCore; // ToListAsync, FirstOrDefaultAsync\n    using Packt.Shared; // NorthwindContext, Customer\n    namespace Northwind.BlazorWasm.Server.Controllers;\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CustomersController : ControllerBase\n    {\n      private readonly NorthwindContext db;\n      public CustomersController(NorthwindContext db)\n      {\n        this.db = db;\n      }\n      [HttpGet]\n      public async Task<List<Customer>> GetCustomersAsync()\n      {\n        return await db.Customers.ToListAsync(); \n      }\n      [HttpGet(\"in/{country}\")] // different path to disambiguate\n      public async Task<List<Customer>> GetCustomersAsync(string country)\n      {\n        return await db.Customers\n          .Where(c => c.Country == country).ToListAsync();\n      }\n      [HttpGet(\"{id}\")]\n      public async Task<Customer?> GetCustomerAsync(string id)\n      {\n        return await db.Customers\n          .FirstOrDefaultAsync(c => c.CustomerId == id);\n      }\n      [HttpPost]\n      public async Task<Customer?> CreateCustomerAsync\n        (Customer customerToAdd)\n      {\n        Customer? existing = await db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == customerToAdd.CustomerId);\n        if (existing == null)\n        {\n          db.Customers.Add(customerToAdd);\n          int affected = await db.SaveChangesAsync();\n          if (affected == 1)\n          {\n            return customerToAdd;\n          }\n        }\n        return existing;\n      }\n      [HttpPut]\n      public async Task<Customer?> UpdateCustomerAsync(Customer c)\n      {\n        db.Entry(c).State = EntityState.Modified;\n        int affected = await db.SaveChangesAsync();\n        if (affected == 1)\n        {\n          return c;\n        }\n        return null;\n      }\n      [HttpDelete(\"{id}\")]\n      public async Task<int> DeleteCustomerAsync(string id)\n      {\n        Customer? c = await db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id);\n        if (c != null)\n        {\n          db.Customers.Remove(c);\n          int affected = await db.SaveChangesAsync();\n          return affected;\n        }\n        return 0;\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\..\\Northwind.Common.EntityModels.Sqlite\\\n    Northwind.Common.EntityModels.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    @using Packt.Shared \n    ```", "```cs\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers\" Match=\"NavLinkMatch.All\">\n        <span class=\"oi oi-people\" aria-hidden=\"true\"></span>\n        Customers Worldwide\n      </NavLink>\n    </div>\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers/France\">\n        <span class=\"oi oi-people\" aria-hidden=\"true\"></span>\n        Customers in France\n      </NavLink>\n    </div> \n    ```", "```cs\n    using System.Net.Http.Json; // GetFromJsonAsync, ReadFromJsonAsync\n    using Packt.Shared; // Customer\n    namespace Northwind.BlazorWasm.Client.Data\n    {\n      public class NorthwindService : INorthwindService\n      {\n        private readonly HttpClient http;\n        public NorthwindService(HttpClient http)\n        {\n          this.http = http;\n        }\n        public Task<List<Customer>> GetCustomersAsync()\n        {\n          return http.GetFromJsonAsync\n            <List<Customer>>(\"api/customers\");\n        }\n        public Task<List<Customer>> GetCustomersAsync(string country)\n        {\n          return http.GetFromJsonAsync\n            <List<Customer>>($\"api/customers/in/{country}\");\n        }\n        public Task<Customer> GetCustomerAsync(string id)\n        {\n          return http.GetFromJsonAsync\n            <Customer>($\"api/customers/{id}\");\n        }\n        public async Task<Customer>\n          CreateCustomerAsync (Customer c)\n        {\n          HttpResponseMessage response = await \n            http.PostAsJsonAsync(\"api/customers\", c);\n          return await response.Content\n            .ReadFromJsonAsync<Customer>();\n        }\n        public async Task<Customer> UpdateCustomerAsync(Customer c)\n        {\n          HttpResponseMessage response = await \n            http.PutAsJsonAsync(\"api/customers\", c);\n          return await response.Content\n            .ReadFromJsonAsync<Customer>();\n        }\n        public async Task DeleteCustomerAsync(string id)\n        {\n          HttpResponseMessage response = await     \n            http.DeleteAsync($\"api/customers/{id}\");\n        }\n      }\n    } \n    ```", "```cs\n    builder.Services.AddTransient<INorthwindService, NorthwindService>(); \n    ```", "```cs\n    dotnet workload install wasm-tools \n    ```", "```cs\n    ...\n    Installing pack Microsoft.NET.Runtime.MonoAOTCompiler.Task version 6.0.0...\n    Installing pack Microsoft.NETCore.App.Runtime.AOT.Cross.browser-wasm version 6.0.0...\n    Successfully installed workload(s) wasm-tools. \n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net6.0</TargetFramework>\n      <Nullable>enable</Nullable>\n      <ImplicitUsings>enable</ImplicitUsings>\n      <ServiceWorkerAssetsManifest>service-worker-assets.js\n        </ServiceWorkerAssetsManifest>\n     **<RunAOTCompilation>****true****</RunAOTCompilation>**\n    </PropertyGroup> \n    ```", "```cs\n    dotnet publish -c Release \n    ```", "```cs\n     Northwind.BlazorWasm.Client -> C:\\Code\\PracticalApps\\Northwind.BlazorWasm\\Client\\bin\\Release\\net6.0\\Northwind.BlazorWasm.Client.dll\n      Northwind.BlazorWasm.Client (Blazor output) -> C:\\Code\\PracticalApps\\Northwind.BlazorWasm\\Client\\bin\\Release\\net6.0\\wwwroot\n      Optimizing assemblies for size, which may change the behavior of the app. Be sure to test after publishing. See: https://aka.ms/dotnet-illink\n      AOT'ing 75 assemblies\n      [1/75] Microsoft.Extensions.Caching.Abstractions.dll -> Microsoft.Extensions.Caching.Abstractions.dll.bc\n      ...\n      [75/75] Microsoft.EntityFrameworkCore.Sqlite.dll -> Microsoft.EntityFrameworkCore.Sqlite.dll.bc\n      Compiling native assets with emcc. This may take a while ...\n      ...\n      Linking with emcc. This may take a while ...\n      ...\n      Optimizing dotnet.wasm ...\n      Compressing Blazor WebAssembly publish artifacts. This may take a while... \n    ```", "```cs\n<ItemGroup>\n  <SupportedPlatform Include=\"browser\" />\n</ItemGroup> \n```", "```cs\n[UnsupportedOSPlatform(\"browser\")]\npublic void DoSomethingOutsideTheBrowserSandbox()\n{\n  ...\n} \n```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Razor\">\n      <PropertyGroup>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <AddRazorSupportForMvc>true</AddRazorSupportForMvc>\n      </PropertyGroup>\n      <ItemGroup>\n        <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n      </ItemGroup>\n      <ItemGroup>\n        <ProjectReference Include=\"..\\Northwind.Common.EntityModels.Sqlite\n    \\Northwind.Common.EntityModels.Sqlite.csproj\" />\n      </ItemGroup>\n     **<ItemGroup>**\n     **<SupportedPlatform Include=****\"browser\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    @using Northwind.Blazor.Customers.Shared \n    ```", "```cs\n    @using Northwind.Blazor.Customers.Pages\n    @using Northwind.Blazor.Customers.Shared \n    ```", "```cs\n    <Router AppAssembly=\"@typeof(App).Assembly\"\n            **AdditionalAssemblies=****\"new[] { typeof(Customers).Assembly }\"**> \n    ```", "```cs\n    function messageBox(message) {\n      window.alert(message);\n    }\n    function setColorInStorage() {\n      if (typeof (Storage) !== \"undefined\") {\n        localStorage.setItem(\"color\", \n          document.getElementById(\"colorBox\").value);\n      }\n    }\n    function getColorFromStorage() {\n      if (typeof (Storage) !== \"undefined\") {\n        document.getElementById(\"colorBox\").value = \n          localStorage.getItem(\"color\");\n      }\n    } \n    ```", "```cs\n    <script src=\"img/interop.js\"></script> \n    ```", "```cs\n    <button type=\"button\" class=\"btn btn-info\" @onclick=\"AlertBrowser\">\n      Poke the browser</button>\n    <hr />\n    <input id=\"colorBox\" />\n    <button type=\"button\" class=\"btn btn-info\" @onclick=\"SetColor\">\n      Set Color</button>\n    <button type=\"button\" class=\"btn btn-info\" @onclick=\"GetColor\">\n      Get Color</button>\n    @code {\n      [Inject]\n      public IJSRuntime JSRuntime { get; set; } = null!;\n      public async Task AlertBrowser()\n      {\n        await JSRuntime.InvokeVoidAsync(\n          \"messageBox\", \"Blazor poking the browser\");\n      }\n    public async Task SetColor()\n      {\n        await JSRuntime.InvokeVoidAsync(\"setColorInStorage\");\n      }\n      public async Task GetColor()\n      {\n        await JSRuntime.InvokeVoidAsync(\"getColorFromStorage\");\n      }\n    } \n    ```", "```cs\n<timestable Number=\"6\" /> \n```"]