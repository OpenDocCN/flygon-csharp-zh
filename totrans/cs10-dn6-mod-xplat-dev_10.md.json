["```cs\n<PackageReference Include=\"EntityFramework\" Version=\"6.4.4\" /> \n```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n    ```", "```cs\n    -- Loading resources from Northwind4SQLite.sql \n    SQLite version 3.36.0 2021-08-24 15:20:15\n    Enter \".help\" for usage hints.\n    sqlite> \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" \n        Version=\"6.0.0\" />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" \n        Version=\"6.0.0\" />\n    </ItemGroup> \n    ```", "```cs\n    namespace Packt.Shared;\n    public class ProjectConstants\n    {\n      public const string DatabaseProvider = \"SQLite\"; // or \"SQLServer\"\n    } \n    ```", "```cs\n    WriteLine($\"Using {ProjectConstants.DatabaseProvider} database provider.\"); \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // DbContext, DbContextOptionsBuilder\n    using static System.Console;\n    namespace Packt.Shared;\n    // this manages the connection to the database\n    public class Northwind : DbContext\n    {\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        if (ProjectConstants.DatabaseProvider == \"SQLite\")\n        {\n          string path = Path.Combine(\n            Environment.CurrentDirectory, \"Northwind.db\");\n          WriteLine($\"Using {path} database file.\");\n          optionsBuilder.UseSqlite($\"Filename={path}\");\n        }\n        else\n        {\n          string connection = \"Data Source=.;\" + \n            \"Initial Catalog=Northwind;\" + \n            \"Integrated Security=true;\" +\n            \"MultipleActiveResultSets=true;\";\n          optionsBuilder.UseSqlServer(connection);\n        }\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <None Update=\"Northwind.db\">\n        <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n      </None>\n    </ItemGroup> \n    ```", "```cs\nCREATE TABLE Products (\n    ProductId       INTEGER       PRIMARY KEY,\n    ProductName     NVARCHAR (40) NOT NULL,\n    SupplierId      \"INT\",\n    CategoryId      \"INT\",\n    QuantityPerUnit NVARCHAR (20),\n    UnitPrice       \"MONEY\"       CONSTRAINT DF_Products_UnitPrice DEFAULT (0),\n    UnitsInStock    \"SMALLINT\"    CONSTRAINT DF_Products_UnitsInStock DEFAULT (0),\n    UnitsOnOrder    \"SMALLINT\"    CONSTRAINT DF_Products_UnitsOnOrder DEFAULT (0),\n    ReorderLevel    \"SMALLINT\"    CONSTRAINT DF_Products_ReorderLevel DEFAULT (0),\n    Discontinued    \"BIT\"         NOT NULL\n                                  CONSTRAINT DF_Products_Discontinued DEFAULT (0),\n    CONSTRAINT FK_Products_Categories FOREIGN KEY (\n        CategoryId\n    )\n    REFERENCES Categories (CategoryId),\n    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (\n        SupplierId\n    )\n    REFERENCES Suppliers (SupplierId),\n    CONSTRAINT CK_Products_UnitPrice CHECK (UnitPrice >= 0),\n    CONSTRAINT CK_ReorderLevel CHECK (ReorderLevel >= 0),\n    CONSTRAINT CK_UnitsInStock CHECK (UnitsInStock >= 0),\n    CONSTRAINT CK_UnitsOnOrder CHECK (UnitsOnOrder >= 0) \n); \n```", "```cs\n[Required] \n[StringLength(40)]\npublic string ProductName { get; set; } \n```", "```cs\n[Column(TypeName = \"money\")]\npublic decimal? UnitPrice { get; set; } \n```", "```cs\nCREATE TABLE Categories (\n    CategoryId   INTEGER       PRIMARY KEY,\n    CategoryName NVARCHAR (15) NOT NULL,\n    Description  \"NTEXT\",\n    Picture      \"IMAGE\"\n); \n```", "```cs\n[Column(TypeName = \"ntext\")]\npublic string Description { get; set; } \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .Property(product => product.ProductName)\n  .IsRequired()\n  .HasMaxLength(40); \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .HasData(new Product\n  {\n    ProductId = 1,\n    ProductName = \"Chai\",\n    UnitPrice = 8.99M\n  }); \n```", "```cs\n    namespace Packt.Shared;\n    public class Category\n    {\n    } \n    ```", "```cs\n    namespace Packt.Shared;\n    public class Product\n    {\n    } \n    ```", "```cs\nCREATE TABLE Categories (\n    CategoryId   INTEGER       PRIMARY KEY,\n    CategoryName NVARCHAR (15) NOT NULL,\n    Description  \"NTEXT\",\n    Picture      \"IMAGE\"\n); \n```", "```cs\n    using System.ComponentModel.DataAnnotations.Schema; // [Column]\n    namespace Packt.Shared;\n    public class Category\n    {\n      // these properties map to columns in the database\n      public int CategoryId { get; set; }\n      public string? CategoryName { get; set; }\n      [Column(TypeName = \"ntext\")]\n      public string? Description { get; set; }\n      // defines a navigation property for related rows\n      public virtual ICollection<Product> Products { get; set; }\n      public Category()\n      {\n        // to enable developers to add products to a Category we must\n        // initialize the navigation property to an empty collection\n        Products = new HashSet<Product>();\n      }\n    } \n    ```", "```cs\n    using System.ComponentModel.DataAnnotations; // [Required], [StringLength]\n    using System.ComponentModel.DataAnnotations.Schema; // [Column]\n    namespace Packt.Shared;\n    public class Product\n    {\n      public int ProductId { get; set; } // primary key\n      [Required]\n      [StringLength(40)]\n      public string ProductName { get; set; } = null!;\n      [Column(\"UnitPrice\", TypeName = \"money\")]\n      public decimal? Cost { get; set; } // property name != column name\n      [Column(\"UnitsInStock\")]\n      public short? Stock { get; set; }\n      public bool Discontinued { get; set; }\n      // these two define the foreign key relationship\n      // to the Categories table\n      public int CategoryId { get; set; }\n      public virtual Category Category { get; set; } = null!;\n    } \n    ```", "```cs\n    public class Northwind : DbContext\n    {\n    **// these properties map to tables in the database**\n    **public** **DbSet<Category>? Categories {** **get****;** **set****; }**\n    **public** **DbSet<Product>? Products {** **get****;** **set****; }**\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        ...\n      }\n    **protected****override****void****OnModelCreating****(**\n     **ModelBuilder modelBuilder****)**\n     **{**\n    **// example of using Fluent API instead of attributes**\n    **// to limit the length of a category name to 15**\n     **modelBuilder.Entity<Category>()**\n     **.Property(category => category.CategoryName)**\n     **.IsRequired()** **// NOT NULL**\n     **.HasMaxLength(****15****);**\n    **if** **(ProjectConstants.DatabaseProvider ==** **\"SQLite\"****)**\n     **{**\n    **// added to \"fix\" the lack of decimal support in SQLite**\n     **modelBuilder.Entity<Product>()**\n     **.Property(product => product.Cost)**\n     **.HasConversion<****double****>();**\n     **}**\n     **}**\n    } \n    ```", "```cs\n    dotnet tool list --global \n    ```", "```cs\n    Package Id      Version     Commands\n    -------------------------------------\n    dotnet-ef       3.1.0       dotnet-ef \n    ```", "```cs\n    dotnet tool uninstall --global dotnet-ef \n    ```", "```cs\n    dotnet tool install --global dotnet-ef --version 6.0.0 \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Filename=Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context Northwind \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;\" Microsoft.EntityFrameworkCore.SqlServer --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context Northwind \n    ```", "```cs\n    Build started...\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n    Skipping foreign key with identity '0' on table 'Products' since principal table 'Suppliers' was not found in the model. This usually happens when the principal table was not included in the selection set. \n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.ComponentModel.DataAnnotations.Schema; \n    using Microsoft.EntityFrameworkCore;\n    namespace WorkingWithEFCore.AutoGen\n    {\n      [Index(nameof(CategoryName), Name = \"CategoryName\")]\n      public partial class Category\n      {\n        public Category()\n        {\n          Products = new HashSet<Product>();\n        }\n        [Key]\n        public long CategoryId { get; set; }\n        [Required]\n        [Column(TypeName = \"nvarchar (15)\")] // SQLite\n        [StringLength(15)] // SQL Server\n        public string CategoryName { get; set; }\n        [Column(TypeName = \"ntext\")]\n        public string? Description { get; set; }\n        [Column(TypeName = \"image\")]\n        public byte[]? Picture { get; set; }\n        [InverseProperty(nameof(Product.Category))]\n        public virtual ICollection<Product> Products { get; set; }\n      }\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; \n    namespace WorkingWithEFCore.AutoGen\n    {\n      public partial class Northwind : DbContext\n      {\n        public Northwind()\n        {\n        }\n        public Northwind(DbContextOptions<Northwind> options)\n          : base(options)\n        {\n        }\n        public virtual DbSet<Category> Categories { get; set; } = null!;\n        public virtual DbSet<Product> Products { get; set; } = null!;\n        protected override void OnConfiguring(\n          DbContextOptionsBuilder optionsBuilder)\n        {\n          if (!optionsBuilder.IsConfigured)\n          {\n    #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n            optionsBuilder.UseSqlite(\"Filename=Northwind.db\");\n          }\n        }\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n          modelBuilder.Entity<Category>(entity =>\n          {\n            ...\n          });\n          modelBuilder.Entity<Product>(entity =>\n          {\n            ...\n          });\n          OnModelCreatingPartial(modelBuilder);\n        }\n        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n      }\n    } \n    ```", "```cs\nprotected override void ConfigureConventions(\n  ModelConfigurationBuilder configurationBuilder)\n{\n  configurationBuilder.Properties<string>().HaveMaxLength(50);\n  configurationBuilder.IgnoreAny<IDoNotMap>();\n} \n```", "```cs\n    using Microsoft.EntityFrameworkCore; // Include extension method \n    ```", "```cs\n    static void QueryingCategories()\n    {\n      using (Northwind db = new())\n      {\n        WriteLine(\"Categories and how many products they have:\");\n        // a query to get all categories and their related products\n        IQueryable<Category>? categories = db.Categories?\n          .Include(c => c.Products);\n        if (categories is null)\n        {\n          WriteLine(\"No categories found.\");\n          return;\n        }\n        // execute query and enumerate results\n        foreach (Category c in categories)\n        {\n          WriteLine($\"{c.CategoryName} has {c.Products.Count} products.\");\n        }\n      }\n    } \n    ```", "```cs\n    WriteLine($\"Using {ProjectConstants.DatabaseProvider} database provider.\");\n    **QueryingCategories();** \n    ```", "```cs\n    Using SQLite database provider.\n    Categories and how many products they have: \n    Using C:\\Code\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net6.0\\Northwind.db database file.\n    Beverages has 12 products.\n    Condiments has 12 products. \n    Confections has 13 products. \n    Dairy Products has 10 products. \n    Grains/Cereals has 7 products. \n    Meat/Poultry has 6 products.\n    Produce has 5 products. \n    Seafood has 12 products. \n    ```", "```cs\n    static void FilteredIncludes()\n    {\n      using (Northwind db = new())\n      {\n        Write(\"Enter a minimum for units in stock: \");\n        string unitsInStock = ReadLine() ?? \"10\";\n        int stock = int.Parse(unitsInStock);\n        IQueryable<Category>? categories = db.Categories?\n          .Include(c => c.Products.Where(p => p.Stock >= stock));\n        if (categories is null)\n        {\n          WriteLine(\"No categories found.\");\n          return;\n        }\n        foreach (Category c in categories)\n        {\n          WriteLine($\"{c.CategoryName} has {c.Products.Count} products with a minimum of {stock} units in stock.\");\n          foreach(Product p in c.Products)\n          {\n            WriteLine($\"  {p.ProductName} has {p.Stock} units in stock.\");\n          }\n        }\n      }\n    } \n    ```", "```cs\n    WriteLine($\"Using {ProjectConstants.DatabaseProvider} database provider.\");\n    **// QueryingCategories();**\n    **FilteredIncludes();** \n    ```", "```cs\n    Enter a minimum for units in stock: 100\n    Beverages has 2 products with a minimum of 100 units in stock.\n      Sasquatch Ale has 111 units in stock.\n      Rhönbräu Klosterbier has 125 units in stock.\n    Condiments has 2 products with a minimum of 100 units in stock.\n      Grandma's Boysenberry Spread has 120 units in stock.\n      Sirop d'érable has 113 units in stock.\n    Confections has 0 products with a minimum of 100 units in stock. \n    Dairy Products has 1 products with a minimum of 100 units in stock.\n      Geitost has 112 units in stock.\n    Grains/Cereals has 1 products with a minimum of 100 units in stock.\n      Gustaf's Knäckebröd has 104 units in stock.\n    Meat/Poultry has 1 products with a minimum of 100 units in stock.\n      Pâté chinois has 115 units in stock.\n    Produce has 0 products with a minimum of 100 units in stock. \n    Seafood has 3 products with a minimum of 100 units in stock.\n      Inlagd Sill has 112 units in stock.\n      Boston Crab Meat has 123 units in stock. \n      Röd Kaviar has 101 units in stock. \n    ```", "```cs\nchcp 65001 \n```", "```cs\n    static void QueryingProducts()\n    {\n      using (Northwind db = new())\n      {\n        WriteLine(\"Products that cost more than a price, highest at top.\"); \n        string? input;\n        decimal price;\n        do\n        {\n          Write(\"Enter a product price: \");\n          input = ReadLine();\n        } while (!decimal.TryParse(input, out price));\n        IQueryable<Product>? products = db.Products?\n          .Where(product => product.Cost > price)\n          .OrderByDescending(product => product.Cost);\n        if (products is null)\n        {\n          WriteLine(\"No products found.\");\n          return;\n        }\n        foreach (Product p in products)\n        {\n          WriteLine(\n            \"{0}: {1} costs {2:$#,##0.00} and has {3} in stock.\",\n            p.ProductId, p.ProductName, p.Cost, p.Stock);\n        }\n      }\n    } \n    ```", "```cs\n    Products that cost more than a price, highest at top. \n    Enter a product price: 50\n    38: Côte de Blaye costs $263.50 and has 17 in stock.\n    29: Thüringer Rostbratwurst costs $123.79 and has 0 in stock. \n    9: Mishi Kobe Niku costs $97.00 and has 29 in stock.\n    20: Sir Rodney's Marmalade costs $81.00 and has 40 in stock. \n    18: Carnarvon Tigers costs $62.50 and has 42 in stock.\n    59: Raclette Courdavault costs $55.00 and has 79 in stock. \n    51: Manjimup Dried Apples costs $53.00 and has 20 in stock. \n    ```", "```cs\n    **WriteLine(****$\"ToQueryString:** **{categories.ToQueryString()}****\"****);**\n    foreach (Category c in categories) \n    ```", "```cs\n    Enter a minimum for units in stock: 99 \n    Using SQLite database provider.\n    ToQueryString: .param set @_stock_0 99\n    SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\", \n    \"t\".\"ProductId\", \"t\".\"CategoryId\", \"t\".\"UnitPrice\", \"t\".\"Discontinued\", \n    \"t\".\"ProductName\", \"t\".\"UnitsInStock\"\n    FROM \"Categories\" AS \"c\" \n    LEFT JOIN (\n        SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" \n        FROM \"Products\" AS \"p\"\n        WHERE (\"p\".\"UnitsInStock\" >= @_stock_0)\n    ) AS \"t\" ON \"c\".\"CategoryId\" = \"t\".\"CategoryId\" \n    ORDER BY \"c\".\"CategoryId\", \"t\".\"ProductId\"\n    Beverages has 2 products with a minimum of 99 units in stock.\n      Sasquatch Ale has 111 units in stock. \n      Rhönbräu Klosterbier has 125 units in stock.\n    ... \n    ```", "```cs\nEnter a minimum for units in stock: 99\nUsing SqlServer database provider.\nToQueryString: DECLARE @__stock_0 smallint = CAST(99 AS smallint);\nSELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [t].[ProductId], [t].[CategoryId], [t].[UnitPrice], [t].[Discontinued], [t].[ProductName], [t].[UnitsInStock]\nFROM [Categories] AS [c]\nLEFT JOIN (\n    SELECT [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\n    FROM [Products] AS [p]\n    WHERE [p].[UnitsInStock] >= @__stock_0\n) AS [t] ON [c].[CategoryId] = [t].[CategoryId]\nORDER BY [c].[CategoryId], [t].[ProductId] \n```", "```cs\n    using Microsoft.Extensions.Logging; // ILoggerProvider, ILogger, LogLevel\n    using static System.Console;\n    namespace Packt.Shared;\n    public class ConsoleLoggerProvider : ILoggerProvider\n    {\n      public ILogger CreateLogger(string categoryName)\n      {\n        // we could have different logger implementations for\n        // different categoryName values but we only have one\n        return new ConsoleLogger();\n      }\n      // if your logger uses unmanaged resources,\n      // then you can release them here\n      public void Dispose() { }\n    }\n    public class ConsoleLogger : ILogger\n    {\n      // if your logger uses unmanaged resources, you can\n      // return the class that implements IDisposable here\n      public IDisposable BeginScope<TState>(TState state)\n      {\n        return null;\n      }\n      public bool IsEnabled(LogLevel logLevel)\n      {\n        // to avoid overlogging, you can filter on the log level\n        switch(logLevel)\n        {\n          case LogLevel.Trace:\n          case LogLevel.Information:\n          case LogLevel.None:\n            return false;\n          case LogLevel.Debug:\n          case LogLevel.Warning:\n          case LogLevel.Error:\n          case LogLevel.Critical:\n          default:\n            return true;\n        };\n      }\n      public void Log<TState>(LogLevel logLevel,\n        EventId eventId, TState state, Exception? exception,\n        Func<TState, Exception, string> formatter)\n      {\n        // log the level and event identifier\n        Write($\"Level: {logLevel}, Event Id: {eventId.Id}\");\n        // only output the state or exception if it exists\n        if (state != null)\n        {\n          Write($\", State: {state}\");\n        }\n        if (exception != null)\n        {\n          Write($\", Exception: {exception.Message}\");\n        }\n        WriteLine();\n      }\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore.Infrastructure;\n    using Microsoft.Extensions.DependencyInjection; \n    using Microsoft.Extensions.Logging; \n    ```", "```cs\n    using (Northwind db = new())\n    {\n     **ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();** \n     **loggerFactory.AddProvider(****new** **ConsoleLoggerProvider());** \n    ```", "```cs\n    ...\n    Level: Debug, Event Id: 20000, State: Opening connection to database 'main' on server '/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'.\n    Level: Debug, Event Id: 20001, State: Opened connection to database 'main' on server '/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'.\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__price_0='?'], CommandType='Text', CommandTimeout='30']\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"UnitPrice\" > @__price_0\n    ORDER BY \"product\".\"UnitPrice\" DESC\n    ... \n    ```", "```cs\n    public void Log<TState>(LogLevel logLevel, EventId eventId,\n      TState state, Exception? exception,\n      Func<TState, Exception, string> formatter)\n    {\n    **if** **(eventId.Id ==** **20100****)**\n     **{**\n        // log the level and event identifier\n        Write(\"Level: {0}, Event Id: {1}, Event: {2}\",\n          logLevel, eventId.Id, eventId.Name);\n        // only output the state or exception if it exists\n        if (state != null)\n        {\n          Write($\", State: {state}\");\n        }\n        if (exception != null)\n        {\n          Write($\", Exception: {exception.Message}\");\n        }\n        WriteLine();\n     **}**\n    } \n    ```", "```cs\n    Using SQLServer database provider.\n    Categories and how many products they have:\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\n    FROM [Categories] AS [c]\n    LEFT JOIN [Products] AS [p] ON [c].[CategoryId] = [p].[CategoryId]\n    ORDER BY [c].[CategoryId], [p].[ProductId]\n    Beverages has 12 products.\n    Condiments has 12 products.\n    Confections has 13 products.\n    Dairy Products has 10 products.\n    Grains/Cereals has 7 products.\n    Meat/Poultry has 6 products.\n    Produce has 5 products.\n    Seafood has 12 products. \n    ```", "```cs\nIQueryable<Product>? products = db.Products?\n  .TagWith(\"Products filtered by price and sorted.\")\n  .Where(product => product.Cost > price)\n  .OrderByDescending(product => product.Cost); \n```", "```cs\n-- Products filtered by price and sorted. \n```", "```cs\n    static void QueryingWithLike()\n    {\n      using (Northwind db = new())\n      {\n        ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();\n        loggerFactory.AddProvider(new ConsoleLoggerProvider());\n        Write(\"Enter part of a product name: \");\n        string? input = ReadLine();\n        IQueryable<Product>? products = db.Products?\n          .Where(p => EF.Functions.Like(p.ProductName, $\"%{input}%\"));\n        if (products is null)\n        {\n          WriteLine(\"No products found.\");\n          return;\n        }\n        foreach (Product p in products)\n        {\n          WriteLine(\"{0} has {1} units in stock. Discontinued? {2}\", \n            p.ProductName, p.Stock, p.Discontinued);\n        }\n      }\n    } \n    ```", "```cs\n    Using SQLServer database provider.\n    Enter part of a product name: che\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__Format_1='?' (Size = 40)], CommandType='Text', CommandTimeout='30']\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"ProductName\" LIKE @__Format_1\n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False \n    Chef Anton's Gumbo Mix has 0 units in stock. Discontinued? True\n    Queso Manchego La Pastora has 86 units in stock. Discontinued? False \n    Gumbär Gummibärchen has 15 units in stock. Discontinued? False \n    ```", "```cs\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      ...\n    **// global filter to remove discontinued products**\n     **modelBuilder.Entity<Product>()**\n     **.HasQueryFilter(p => !p.Discontinued);**\n    } \n    ```", "```cs\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" \n    FROM \"Products\" AS \"p\"\n    WHERE **(\"p\".\"Discontinued\" = 0)** AND \"p\".\"ProductName\" LIKE @__Format_1 \n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False \n    Queso Manchego La Pastora has 86 units in stock. Discontinued? False \n    Gumbär Gummibärchen has 15 units in stock. Discontinued? False \n    ```", "```cs\n    IQueryable<Category>? categories =\n      db.Categories; //.Include(c => c.Products); \n    ```", "```cs\n    Beverages has 0 products. \n    Condiments has 0 products. \n    Confections has 0 products.\n    Dairy Products has 0 products. \n    Grains/Cereals has 0 products. \n    Meat/Poultry has 0 products.\n    Produce has 0 products. \n    Seafood has 0 products. \n    ```", "```cs\n    <PackageReference\n      Include=\"Microsoft.EntityFrameworkCore.Proxies\" \n      Version=\"6.0.0\" /> \n    ```", "```cs\n    protected override void OnConfiguring(\n      DbContextOptionsBuilder optionsBuilder)\n    {\n     **optionsBuilder.UseLazyLoadingProxies();** \n    ```", "```cs\n    Categories and how many products they have:\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\" FROM \"Categories\" AS \"c\"\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \n    Beverages has 11 products.\n    Level: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \n    Condiments has 11 products. \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore.ChangeTracking; // CollectionEntry \n    ```", "```cs\n    IQueryable<Category>? categories;\n      // = db.Categories;\n      // .Include(c => c.Products);\n    db.ChangeTracker.LazyLoadingEnabled = false; \n    Write(\"Enable eager loading? (Y/N): \");\n    bool eagerloading = (ReadKey().Key == ConsoleKey.Y); \n    bool explicitloading = false;\n    WriteLine();\n    if (eagerloading)\n    {\n      categories = db.Categories?.Include(c => c.Products);\n    }\n    else\n    {\n      categories = db.Categories;\n      Write(\"Enable explicit loading? (Y/N): \");\n      explicitloading = (ReadKey().Key == ConsoleKey.Y);\n      WriteLine();\n    } \n    ```", "```cs\n    if (explicitloading)\n    {\n      Write($\"Explicitly load products for {c.CategoryName}? (Y/N): \"); \n      ConsoleKeyInfo key = ReadKey();\n      WriteLine();\n      if (key.Key == ConsoleKey.Y)\n      {\n        CollectionEntry<Category, Product> products =\n          db.Entry(c).Collection(c2 => c2.Products);\n        if (!products.IsLoaded) products.Load();\n      }\n    }\n    WriteLine($\"{c.CategoryName} has {c.Products.Count} products.\"); \n    ```", "```cs\nCategories and how many products they have:\nEnable eager loading? (Y/N): n \nEnable explicit loading? (Y/N): y\nLevel: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\nSELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\" FROM \"Categories\" AS \"c\"\nExplicitly load products for Beverages? (Y/N): y\nLevel: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \nSELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n\"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\nFROM \"Products\" AS \"p\"\nWHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0)\nBeverages has 11 products.\nExplicitly load products for Condiments? (Y/N): n \nCondiments has 0 products.\nExplicitly load products for Confections? (Y/N): n \nConfections has 0 products.\nExplicitly load products for Dairy Products? (Y/N): n \nDairy Products has 0 products.\nExplicitly load products for Grains/Cereals? (Y/N): n \nGrains/Cereals has 0 products.\nExplicitly load products for Meat/Poultry? (Y/N): n \nMeat/Poultry has 0 products.\nExplicitly load products for Produce? (Y/N): n \nProduce has 0 products.\nExplicitly load products for Seafood? (Y/N): y\nLevel: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \nSELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n\"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\nFROM \"Products\" AS \"p\"\nWHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \nSeafood has 12 products. \n```", "```cs\n    static bool AddProduct(\n      int categoryId, string productName, decimal? price)\n    {\n      using (Northwind db = new())\n      {\n        Product p = new()\n        {\n          CategoryId = categoryId,\n          ProductName = productName,\n          Cost = price\n        };\n        // mark product as added in change tracking\n        db.Products.Add(p);\n        // save tracked change to database\n        int affected = db.SaveChanges();\n        return (affected == 1);\n      }\n    } \n    ```", "```cs\n    static void ListProducts()\n    {\n      using (Northwind db = new())\n      {\n        WriteLine(\"{0,-3} {1,-35} {2,8} {3,5} {4}\",\n          \"Id\", \"Product Name\", \"Cost\", \"Stock\", \"Disc.\");\n        foreach (Product p in db.Products\n          .OrderByDescending(product => product.Cost))\n        {\n          WriteLine(\"{0:000} {1,-35} {2,8:$#,##0.00} {3,5} {4}\",\n            p.ProductId, p.ProductName, p.Cost, p.Stock, p.Discontinued);\n        }\n      }\n    } \n    ```", "```cs\n    // QueryingCategories();\n    // FilteredIncludes();\n    // QueryingProducts();\n    // QueryingWithLike();\n    if (AddProduct(categoryId: 6, \n      productName: \"Bob's Burgers\", price: 500M))\n    {\n      WriteLine(\"Add product successful.\");\n    }\n    ListProducts(); \n    ```", "```cs\n    Add product successful.\n    Id  Product Name              Cost Stock Disc.\n    078 Bob's Burgers          $500.00       False\n    038 Côte de Blaye          $263.50    17 False\n    020 Sir Rodney's Marmalade  $81.00    40 False\n    ... \n    ```", "```cs\n    static bool IncreaseProductPrice(\n      string productNameStartsWith, decimal amount)\n    {\n      using (Northwind db = new())\n      {\n        // get first product whose name starts with name\n        Product updateProduct = db.Products.First(\n          p => p.ProductName.StartsWith(productNameStartsWith));\n        updateProduct.Cost += amount;\n        int affected = db.SaveChanges();\n        return (affected == 1);\n      }\n    } \n    ```", "```cs\n    **/***\n    if (AddProduct(categoryId: 6, \n      productName: \"Bob's Burgers\", price: 500M))\n    {\n      WriteLine(\"Add product successful.\");\n    }\n    ***/**\n    **if** **(IncreaseProductPrice(**\n     **productNameStartsWith:** **\"Bob\"****, amount:** **20****M))**\n    **{**\n     **WriteLine(****\"Update product price successful.\"****);**\n    **}**\n    ListProducts(); \n    ```", "```cs\n    Update product price successful.\n    Id  Product Name              Cost Stock Disc.\n    078 Bob's Burgers          $520.00       False\n    038 Côte de Blaye          $263.50    17 False\n    020 Sir Rodney's Marmalade  $81.00    40 False\n    ... \n    ```", "```cs\n    static int DeleteProducts(string productNameStartsWith)\n    {\n      using (Northwind db = new())\n      {\n        IQueryable<Product>? products = db.Products?.Where(\n          p => p.ProductName.StartsWith(productNameStartsWith));\n        if (products is null)\n        {\n          WriteLine(\"No products found to delete.\");\n          return 0;\n        }\n        else\n        {\n          db.Products.RemoveRange(products);\n        }\n        int affected = db.SaveChanges();\n        return affected;\n      }\n    } \n    ```", "```cs\n    int deleted = DeleteProducts(productNameStartsWith: \"Bob\");\n    WriteLine($\"{deleted} product(s) were deleted.\"); \n    ```", "```cs\n    1 product(s) were deleted. \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore.Storage; // IDbContextTransaction \n    ```", "```cs\n    static int DeleteProducts(string name)\n    {\n      using (Northwind db = new())\n      {\n    **using** **(IDbContextTransaction t = db.Database.BeginTransaction())**\n     **{**\n     **WriteLine(****\"Transaction isolation level: {0}\"****,**\n     **arg0: t.GetDbTransaction().IsolationLevel);**\n          IQueryable<Product>? products = db.Products?.Where(\n            p => p.ProductName.StartsWith(name));\n          if (products is null)\n          {\n            WriteLine(\"No products found to delete.\");\n            return 0;\n          }\n          else\n          {\n            db.Products.RemoveRange(products);\n          }\n          int affected = db.SaveChanges();\n     **t.Commit();**\n          return affected;\n     **}**\n      }\n    } \n    ```", "```cs\n    Transaction isolation level: ReadCommitted \n    ```", "```cs\n    Transaction isolation level: Serializable \n    ```", "```cs\n    namespace CoursesAndStudents;\n    public class Student\n    {\n      public int StudentId { get; set; }\n      public string? FirstName { get; set; }\n      public string? LastName { get; set; }\n      public ICollection<Course>? Courses { get; set; }\n    } \n    ```", "```cs\n    using System.ComponentModel.DataAnnotations;\n    namespace CoursesAndStudents;\n    public class Course\n    {\n      public int CourseId { get; set; }\n      [Required]\n      [StringLength(60)]\n      public string? Title { get; set; }\n      public ICollection<Student>? Students { get; set; }\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore;\n    using static System.Console;\n    namespace CoursesAndStudents;\n    public class Academy : DbContext\n    {\n      public DbSet<Student>? Students { get; set; }\n      public DbSet<Course>? Courses { get; set; }\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        string path = Path.Combine(\n          Environment.CurrentDirectory, \"Academy.db\");\n        WriteLine($\"Using {path} database file.\");\n        optionsBuilder.UseSqlite($\"Filename={path}\");\n        // optionsBuilder.UseSqlServer(@\"Data Source=.;Initial Catalog=Academy;Integrated Security=true;MultipleActiveResultSets=true;\");\n      }\n      protected override void OnModelCreating(ModelBuilder modelBuilder)\n      {\n        // Fluent API validation rules\n        modelBuilder.Entity<Student>()\n            .Property(s => s.LastName).HasMaxLength(30).IsRequired();\n          // populate database with sample data\n          Student alice = new() { StudentId = 1, \n            FirstName = \"Alice\", LastName = \"Jones\" };\n          Student bob = new() { StudentId = 2, \n            FirstName = \"Bob\", LastName = \"Smith\" };\n          Student cecilia = new() { StudentId = 3, \n            FirstName = \"Cecilia\", LastName = \"Ramirez\" };\n          Course csharp = new() \n          { \n            CourseId = 1,\n            Title = \"C# 10 and .NET 6\", \n          };\n          Course webdev = new()\n          {\n            CourseId = 2,\n            Title = \"Web Development\",\n          };\n          Course python = new()\n          {\n            CourseId = 3,\n            Title = \"Python for Beginners\",\n          };\n          modelBuilder.Entity<Student>()\n            .HasData(alice, bob, cecilia);\n          modelBuilder.Entity<Course>()\n            .HasData(csharp, webdev, python);\n          modelBuilder.Entity<Course>()\n            .HasMany(c => c.Students)\n            .WithMany(s => s.Courses)\n            .UsingEntity(e => e.HasData(\n              // all students signed up for C# course\n              new { CoursesCourseId = 1, StudentsStudentId = 1 },\n              new { CoursesCourseId = 1, StudentsStudentId = 2 },\n              new { CoursesCourseId = 1, StudentsStudentId = 3 },\n              // only Bob signed up for Web Dev\n              new { CoursesCourseId = 2, StudentsStudentId = 2 },\n              // only Cecilia signed up for Python\n              new { CoursesCourseId = 3, StudentsStudentId = 3 }\n            ));\n      }\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // for GenerateCreateScript()\n    using CoursesAndStudents; // Academy\n    using static System.Console; \n    ```", "```cs\n    using (Academy a = new())\n    {\n      bool deleted = await a.Database.EnsureDeletedAsync();\n      WriteLine($\"Database deleted: {deleted}\");\n      bool created = await a.Database.EnsureCreatedAsync();\n      WriteLine($\"Database created: {created}\");\n      WriteLine(\"SQL script used to create database:\");\n      WriteLine(a.Database.GenerateCreateScript());\n      foreach (Student s in a.Students.Include(s => s.Courses))\n      {\n        WriteLine(\"{0} {1} attends the following {2} courses:\",\n          s.FirstName, s.LastName, s.Courses.Count);\n        foreach (Course c in s.Courses)\n        {\n          WriteLine($\"  {c.Title}\");\n        }\n      }\n    } \n    ```", "```cs\n    Using C:\\Code\\Chapter10\\CoursesAndStudents\\bin\\Debug\\net6.0\\Academy.db database file.\n    Database deleted: False\n    Database created: True\n    SQL script used to create database:\n    CREATE TABLE \"Courses\" (\n        \"CourseId\" INTEGER NOT NULL CONSTRAINT \"PK_Courses\" PRIMARY KEY AUTOINCREMENT,\n        \"Title\" TEXT NOT NULL\n    );\n    CREATE TABLE \"Students\" (\n        \"StudentId\" INTEGER NOT NULL CONSTRAINT \"PK_Students\" PRIMARY KEY AUTOINCREMENT,\n        \"FirstName\" TEXT NULL,\n        \"LastName\" TEXT NOT NULL\n    );\n    CREATE TABLE \"CourseStudent\" (\n        \"CoursesCourseId\" INTEGER NOT NULL,\n        \"StudentsStudentId\" INTEGER NOT NULL,\n        CONSTRAINT \"PK_CourseStudent\" PRIMARY KEY (\"CoursesCourseId\", \"StudentsStudentId\"),\n        CONSTRAINT \"FK_CourseStudent_Courses_CoursesCourseId\" FOREIGN KEY (\"CoursesCourseId\") REFERENCES \"Courses\" (\"CourseId\") ON DELETE CASCADE,\n        CONSTRAINT \"FK_CourseStudent_Students_StudentsStudentId\" FOREIGN KEY (\"StudentsStudentId\") REFERENCES \"Students\" (\"StudentId\") ON DELETE CASCADE\n    );\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (1, 'C# 10 and .NET 6');\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (2, 'Web Development');\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (3, 'Python for Beginners');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (1, 'Alice', 'Jones');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (2, 'Bob', 'Smith');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (3, 'Cecilia', 'Ramirez');\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 1);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 2);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (2, 2);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 3);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (3, 3);\n    CREATE INDEX \"IX_CourseStudent_StudentsStudentId\" ON \"CourseStudent\" (\"StudentsStudentId\");\n    Alice Jones attends the following 1 course(s):\n      C# 10 and .NET 6\n    Bob Smith attends the following 2 course(s):\n      C# 10 and .NET 6\n      Web Development\n    Cecilia Ramirez attends the following 2 course(s):\n      C# 10 and .NET 6\n      Python for Beginners \n    ```", "```cs\n    CREATE TABLE Employees(\n      EmpId INT IDENTITY,\n      FirstName NVARCHAR(40) NOT NULL,\n      Salary MONEY\n    ) \n    ```"]