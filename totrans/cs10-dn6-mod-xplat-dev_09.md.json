["```cs\n    using static System.Console; \n    using static System.IO.Directory; \n    using static System.IO.Path; \n    using static System.Environment; \n    ```", "```cs\n    static void OutputFileSystemInfo()\n    {\n      WriteLine(\"{0,-33} {1}\", arg0: \"Path.PathSeparator\",\n        arg1: PathSeparator);\n      WriteLine(\"{0,-33} {1}\", arg0: \"Path.DirectorySeparatorChar\",\n        arg1: DirectorySeparatorChar);\n      WriteLine(\"{0,-33} {1}\", arg0: \"Directory.GetCurrentDirectory()\",\n        arg1: GetCurrentDirectory());\n      WriteLine(\"{0,-33} {1}\", arg0: \"Environment.CurrentDirectory\", \n        arg1: CurrentDirectory);\n      WriteLine(\"{0,-33} {1}\", arg0: \"Environment.SystemDirectory\", \n        arg1: SystemDirectory);\n      WriteLine(\"{0,-33} {1}\", arg0: \"Path.GetTempPath()\", \n        arg1: GetTempPath());\n      WriteLine(\"GetFolderPath(SpecialFolder\");\n      WriteLine(\"{0,-33} {1}\", arg0: \" .System)\", \n        arg1: GetFolderPath(SpecialFolder.System));\n      WriteLine(\"{0,-33} {1}\", arg0: \" .ApplicationData)\", \n        arg1: GetFolderPath(SpecialFolder.ApplicationData));\n      WriteLine(\"{0,-33} {1}\", arg0: \" .MyDocuments)\", \n        arg1: GetFolderPath(SpecialFolder.MyDocuments));\n      WriteLine(\"{0,-33} {1}\", arg0: \" .Personal)\", \n        arg1: GetFolderPath(SpecialFolder.Personal));\n    } \n    ```", "```cs\n    OutputFileSystemInfo(); \n    ```", "```cs\n    static void WorkWithDrives()\n    {\n      WriteLine(\"{0,-30} | {1,-10} | {2,-7} | {3,18} | {4,18}\",\n        \"NAME\", \"TYPE\", \"FORMAT\", \"SIZE (BYTES)\", \"FREE SPACE\");\n      foreach (DriveInfo drive in DriveInfo.GetDrives())\n      {\n        if (drive.IsReady)\n        {\n          WriteLine(\n            \"{0,-30} | {1,-10} | {2,-7} | {3,18:N0} | {4,18:N0}\",\n            drive.Name, drive.DriveType, drive.DriveFormat,\n            drive.TotalSize, drive.AvailableFreeSpace);\n        }\n        else\n        {\n          WriteLine(\"{0,-30} | {1,-10}\", drive.Name, drive.DriveType);\n        }\n      }\n    } \n    ```", "```cs\n    **// OutputFileSystemInfo();**\n    **WorkWithDrives();** \n    ```", "```cs\n    static void WorkWithDirectories()\n    {\n      // define a directory path for a new folder\n      // starting in the user's folder\n      string newFolder = Combine(\n        GetFolderPath(SpecialFolder.Personal),\n        \"Code\", \"Chapter09\", \"NewFolder\");\n      WriteLine($\"Working with: {newFolder}\");\n      // check if it exists\n      WriteLine($\"Does it exist? {Exists(newFolder)}\");\n      // create directory \n      WriteLine(\"Creating it...\");\n      CreateDirectory(newFolder);\n      WriteLine($\"Does it exist? {Exists(newFolder)}\");\n      Write(\"Confirm the directory exists, and then press ENTER: \");\n      ReadLine();\n      // delete directory \n      WriteLine(\"Deleting it...\");\n      Delete(newFolder, recursive: true);\n      WriteLine($\"Does it exist? {Exists(newFolder)}\");\n    } \n    ```", "```cs\n    Working with: /Users/markjprice/Code/Chapter09/NewFolder Does it exist? False\n    Creating it...\n    Does it exist? True\n    Confirm the directory exists, and then press ENTER:\n    Deleting it...\n    Does it exist? False \n    ```", "```cs\n    static void WorkWithFiles()\n    {\n      // define a directory path to output files\n      // starting in the user's folder\n      string dir = Combine(\n        GetFolderPath(SpecialFolder.Personal), \n        \"Code\", \"Chapter09\", \"OutputFiles\");\n      CreateDirectory(dir);\n      // define file paths\n      string textFile = Combine(dir, \"Dummy.txt\");\n      string backupFile = Combine(dir, \"Dummy.bak\");\n      WriteLine($\"Working with: {textFile}\");\n      // check if a file exists\n      WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n      // create a new text file and write a line to it\n      StreamWriter textWriter = File.CreateText(textFile);\n      textWriter.WriteLine(\"Hello, C#!\");\n      textWriter.Close(); // close file and release resources\n      WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n      // copy the file, and overwrite if it already exists\n      File.Copy(sourceFileName: textFile,\n        destFileName: backupFile, overwrite: true);\n      WriteLine(\n        $\"Does {backupFile} exist? {File.Exists(backupFile)}\");\n      Write(\"Confirm the files exist, and then press ENTER: \");\n      ReadLine();\n      // delete file\n      File.Delete(textFile);\n      WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n      // read from the text file backup\n      WriteLine($\"Reading contents of {backupFile}:\");\n      StreamReader textReader = File.OpenText(backupFile); \n      WriteLine(textReader.ReadToEnd());\n      textReader.Close();\n    } \n    ```", "```cs\n    Working with: /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.txt \n    Does it exist? False\n    Does it exist? True\n    Does /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak exist? True \n    Confirm the files exist, and then press ENTER:\n    Does it exist? False\n    Reading contents of /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak:\n    Hello, C#! \n    ```", "```cs\n    // Managing paths\n    WriteLine($\"Folder Name: {GetDirectoryName(textFile)}\"); \n    WriteLine($\"File Name: {GetFileName(textFile)}\"); \n    WriteLine(\"File Name without Extension: {0}\",\n      GetFileNameWithoutExtension(textFile)); \n    WriteLine($\"File Extension: {GetExtension(textFile)}\"); \n    WriteLine($\"Random File Name: {GetRandomFileName()}\"); \n    WriteLine($\"Temporary File Name: {GetTempFileName()}\"); \n    ```", "```cs\n    Folder Name: /Users/markjprice/Code/Chapter09/OutputFiles \n    File Name: Dummy.txt\n    File Name without Extension: Dummy \n    File Extension: .txt\n    Random File Name: u45w1zki.co3 \n    Temporary File Name:\n    /var/folders/tz/xx0y_wld5sx0nv0fjtq4tnpc0000gn/T/tmpyqrepP.tmp \n    ```", "```cs\n    FileInfo info = new(backupFile); \n    WriteLine($\"{backupFile}:\"); \n    WriteLine($\"Contains {info.Length} bytes\");\n    WriteLine($\"Last accessed {info.LastAccessTime}\"); \n    WriteLine($\"Has readonly set to {info.IsReadOnly}\"); \n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak: \n    Contains 11 bytes\n    Last accessed 26/10/2021 09:08:26 \n    Has readonly set to False \n    ```", "```cs\nFileStream file = File.Open(pathToFile,\n  FileMode.Open, FileAccess.Read, FileShare.Read); \n```", "```cs\nFileInfo info = new(backupFile); \nWriteLine(\"Is the backup file compressed? {0}\",\n  info.Attributes.HasFlag(FileAttributes.Compressed)); \n```", "```cs\n    static class Viper\n    {\n      // define an array of Viper pilot call signs\n      public static string[] Callsigns = new[]\n      {\n        \"Husker\", \"Starbuck\", \"Apollo\", \"Boomer\",\n        \"Bulldog\", \"Athena\", \"Helo\", \"Racetrack\"\n      };\n    } \n    ```", "```cs\n    static void WorkWithText()\n    {\n      // define a file to write to\n      string textFile = Combine(CurrentDirectory, \"streams.txt\");\n      // create a text file and return a helper writer\n      StreamWriter text = File.CreateText(textFile);\n      // enumerate the strings, writing each one\n      // to the stream on a separate line\n      foreach (string item in Viper.Callsigns)\n      {\n        text.WriteLine(item);\n      }\n      text.Close(); // release resources\n      // output the contents of the file\n      WriteLine(\"{0} contains {1:N0} bytes.\",\n        arg0: textFile,\n        arg1: new FileInfo(textFile).Length);\n      WriteLine(File.ReadAllText(textFile));\n    } \n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.txt contains\n    60 bytes. \n    Husker \n    Starbuck \n    Apollo \n    Boomer \n    Bulldog \n    Athena \n    Helo \n    Racetrack \n    ```", "```cs\n    static void WorkWithXml()\n    {\n      // define a file to write to\n      string xmlFile = Combine(CurrentDirectory, \"streams.xml\");\n      // create a file stream\n      FileStream xmlFileStream = File.Create(xmlFile);\n      // wrap the file stream in an XML writer helper\n      // and automatically indent nested elements\n      XmlWriter xml = XmlWriter.Create(xmlFileStream,\n        new XmlWriterSettings { Indent = true });\n      // write the XML declaration\n      xml.WriteStartDocument();\n      // write a root element\n      xml.WriteStartElement(\"callsigns\");\n      // enumerate the strings writing each one to the stream\n      foreach (string item in Viper.Callsigns)\n      {\n        xml.WriteElementString(\"callsign\", item);\n      }\n      // write the close root element\n      xml.WriteEndElement();\n      // close helper and stream\n      xml.Close();\n      xmlFileStream.Close();\n      // output all the contents of the file\n      WriteLine(\"{0} contains {1:N0} bytes.\",\n        arg0: xmlFile,\n        arg1: new FileInfo(xmlFile).Length);\n      WriteLine(File.ReadAllText(xmlFile));\n    } \n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains\n    310 bytes.\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <callsigns>\n      <callsign>Husker</callsign>\n      <callsign>Starbuck</callsign>\n      <callsign>Apollo</callsign>\n      <callsign>Boomer</callsign>\n      <callsign>Bulldog</callsign>\n      <callsign>Athena</callsign>\n      <callsign>Helo</callsign>\n      <callsign>Racetrack</callsign>\n    </callsigns> \n    ```", "```cs\n    static void WorkWithXml()\n    {\n     **FileStream? xmlFileStream =** **null****;** \n     **XmlWriter? xml =** **null****;**\n    **try**\n     **{**\n        // define a file to write to\n        string xmlFile = Combine(CurrentDirectory, \"streams.xml\");\n        // create a file stream\n     **xmlFileStream = File.Create(xmlFile);**\n        // wrap the file stream in an XML writer helper\n        // and automatically indent nested elements\n     **xml = XmlWriter.Create(xmlFileStream,**\n    **new** **XmlWriterSettings { Indent =** **true** **});**\n        // write the XML declaration\n        xml.WriteStartDocument();\n        // write a root element\n        xml.WriteStartElement(\"callsigns\");\n        // enumerate the strings writing each one to the stream\n        foreach (string item in Viper.Callsigns)\n        {\n          xml.WriteElementString(\"callsign\", item);\n        }\n        // write the close root element\n        xml.WriteEndElement();\n        // close helper and stream\n        xml.Close();\n        xmlFileStream.Close();\n        // output all the contents of the file\n        WriteLine($\"{0} contains {1:N0} bytes.\",\n          arg0: xmlFile,\n          arg1: new FileInfo(xmlFile).Length);\n        WriteLine(File.ReadAllText(xmlFile));\n     **}**\n     **catch (Exception ex)**\n     **{**\n    **// if the path doesn't exist the exception will be caught**\n     **WriteLine(****$\"****{ex.GetType()}** **says** **{ex.Message}****\"****);**\n     **}**\n    **finally**\n     **{**\n    **if** **(xml !=** **null****)**\n     **{** \n     **xml.Dispose();**\n     **WriteLine(****\"The XML writer's unmanaged resources have been disposed.\"****);**\n    **if** **(xmlFileStream !=** **null****)**\n     **{**\n     **xmlFileStream.Dispose();**\n     **WriteLine(****\"The file stream's unmanaged resources have been disposed.\"****);**\n     **}**\n     **}**\n     **}**\n    } \n    ```", "```cs\n    The XML writer's unmanaged resources have been disposed. \n    The file stream's unmanaged resources have been disposed. \n    ```", "```cs\nusing (FileStream file2 = File.OpenWrite(\n  Path.Combine(path, \"file2.txt\")))\n{\n  using (StreamWriter writer2 = new StreamWriter(file2))\n  {\n    try\n    {\n      writer2.WriteLine(\"Welcome, .NET!\");\n    }\n    catch(Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    }\n  } // automatically calls Dispose if the object is not null\n} // automatically calls Dispose if the object is not null \n```", "```cs\nusing FileStream file2 = File.OpenWrite(\n  Path.Combine(path, \"file2.txt\"));\nusing StreamWriter writer2 = new(file2);\ntry\n{\n  writer2.WriteLine(\"Welcome, .NET!\");\n}\ncatch(Exception ex)\n{\n  WriteLine($\"{ex.GetType()} says {ex.Message}\");\n} \n```", "```cs\n    using System.IO.Compression; // BrotliStream, GZipStream, CompressionMode \n    ```", "```cs\n    static void WorkWithCompression()\n    {\n      string fileExt = \"gzip\";\n      // compress the XML output\n      string filePath = Combine(\n        CurrentDirectory, $\"streams.**{fileExt}**\");\n      FileStream file = File.Create(filePath);\n      Stream compressor = new GZipStream(file, CompressionMode.Compress);\n      using (compressor)\n      {\n        using (XmlWriter xml = XmlWriter.Create(compressor))\n        {\n          xml.WriteStartDocument();\n          xml.WriteStartElement(\"callsigns\");\n          foreach (string item in Viper.Callsigns)\n          {\n            xml.WriteElementString(\"callsign\", item);\n          }\n          // the normal call to WriteEndElement is not necessary\n          // because when the XmlWriter disposes, it will\n          // automatically end any elements of any depth\n        }\n      } // also closes the underlying stream\n      // output all the contents of the compressed file\n      WriteLine(\"{0} contains {1:N0} bytes.\",\n        filePath, new FileInfo(filePath).Length);\n      WriteLine($\"The compressed contents:\");\n      WriteLine(File.ReadAllText(filePath));\n      // read a compressed file\n      WriteLine(\"Reading the compressed XML file:\");\n      file = File.Open(filePath, FileMode.Open);\n      Stream decompressor = new GZipStream(file,\n        CompressionMode.Decompress);\n      using (decompressor)\n      {\n        using (XmlReader reader = XmlReader.Create(decompressor))\n        {\n          while (reader.Read()) // read the next XML node\n          {\n            // check if we are on an element node named callsign\n            if ((reader.NodeType == XmlNodeType.Element)\n              && (reader.Name == \"callsign\"))\n            {\n              reader.Read(); // move to the text inside element\n              WriteLine($\"{reader.Value}\"); // read its value\n            }\n          }\n        }\n      }\n    } \n    ```", "```cs\n    // WorkWithText();\n    **WorkWithXml();**\n    **WorkWithCompression();** \n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains 310 bytes.\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150 bytes. \n    ```", "```cs\n    static void WorkWithCompression(**bool** **useBrotli =** **true**)\n    {\n      string fileExt = **useBrotli ?** **\"brotli\"** **:** **\"gzip\"****;**\n      // compress the XML output\n      string filePath = Combine(\n        CurrentDirectory, $\"streams.{fileExt}\");\n      FileStream file = File.Create(filePath);\n     **Stream compressor;**\n    **if** **(useBrotli)**\n     **{**\n     **compressor =** **new** **BrotliStream(file, CompressionMode.Compress);**\n     **}**\n    **else**\n     **{**\n     **compressor =** **new** **GZipStream(file, CompressionMode.Compress);**\n     **}**\n      using (compressor)\n      {\n        using (XmlWriter xml = XmlWriter.Create(compressor))\n        {\n          xml.WriteStartDocument();\n          xml.WriteStartElement(\"callsigns\");\n          foreach (string item in Viper.Callsigns)\n          {\n            xml.WriteElementString(\"callsign\", item);\n          }\n        }\n      } // also closes the underlying stream\n      // output all the contents of the compressed file\n      WriteLine(\"{0} contains {1:N0} bytes.\",\n        filePath, new FileInfo(filePath).Length);\n      WriteLine($\"The compressed contents:\");\n      WriteLine(File.ReadAllText(filePath));\n      // read a compressed file\n      WriteLine(\"Reading the compressed XML file:\");\n      file = File.Open(filePath, FileMode.Open);\n     **Stream decompressor;**\n    **if** **(useBrotli)**\n     **{**\n     **decompressor =** **new** **BrotliStream(**\n     **file, CompressionMode.Decompress);**\n     **}**\n    **else**\n     **{**\n     **decompressor =** **new** **GZipStream(**\n     **file, CompressionMode.Decompress);**\n     **}**\n      using (decompressor)\n      {\n        using (XmlReader reader = XmlReader.Create(decompressor))\n        {\n          while (reader.Read())\n          {\n            // check if we are on an element node named callsign\n            if ((reader.NodeType == XmlNodeType.Element)\n              && (reader.Name == \"callsign\"))\n            {\n              reader.Read(); // move to the text inside element\n              WriteLine($\"{reader.Value}\"); // read its value\n            }\n          }\n        }\n      }\n    } \n    ```", "```cs\n    WorkWithCompression(); \n    WorkWithCompression(useBrotli: false); \n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.brotli contains 118 bytes.\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150 bytes. \n    ```", "```cs\n    WriteLine(\"Encodings\"); \n    WriteLine(\"[1] ASCII\");\n    WriteLine(\"[2] UTF-7\");\n    WriteLine(\"[3] UTF-8\");\n    WriteLine(\"[4] UTF-16 (Unicode)\");\n    WriteLine(\"[5] UTF-32\"); \n    WriteLine(\"[any other key] Default\");\n    // choose an encoding\n    Write(\"Press a number to choose an encoding: \"); \n    ConsoleKey number = ReadKey(intercept: false).Key; \n    WriteLine();\n    WriteLine();\n    Encoding encoder = number switch\n    {\n      ConsoleKey.D1 => Encoding.ASCII,\n      ConsoleKey.D2 => Encoding.UTF7,\n      ConsoleKey.D3 => Encoding.UTF8,\n      ConsoleKey.D4 => Encoding.Unicode,\n      ConsoleKey.D5 => Encoding.UTF32,\n      _             => Encoding.Default\n    };\n    // define a string to encode\n    string message = \"Café cost: £4.39\";\n    // encode the string into a byte array\n    byte[] encoded = encoder.GetBytes(message);\n    // check how many bytes the encoding needed\n    WriteLine(\"{0} uses {1:N0} bytes.\",\n      encoder.GetType().Name, encoded.Length);\n    WriteLine();\n    // enumerate each byte \n    WriteLine($\"BYTE HEX CHAR\"); \n    foreach (byte b in encoded)\n    {\n      WriteLine($\"{b,4} {b.ToString(\"X\"),4} {(char)b,5}\");\n    }\n    // decode the byte array back into a string and display it\n    string decoded = encoder.GetString(encoded); \n    WriteLine(decoded); \n    ```", "```cs\n    BYTE  HEX  CHAR\n      67   43     C\n      97   61     a\n     102   66     f\n      63   3F     ?\n      32   20      \n     111   6F     o\n     115   73     s\n     116   74     t\n      58   3A     :\n      32   20      \n      63   3F     ?\n      52   34     4\n      46   2E     .\n      51   33     3\n      57   39     9\n    Caf? cost: ?4.39 \n    ```", "```cs\n    UTF8EncodingSealed uses 18 bytes.\n    BYTE  HEX  CHAR\n      67   43     C\n      97   61     a\n     102   66     f\n     195   C3     Ã\n     169   A9     ©\n      32   20      \n     111   6F     o\n     115   73     s\n     116   74     t\n      58   3A     :\n      32   20      \n     194   C2     Â\n     163   A3     £\n      52   34     4\n      46   2E     .\n      51   33     3\n      57   39     9\n    Café cost: £4.39 \n    ```", "```cs\nStreamReader reader = new(stream, Encoding.UTF8); \nStreamWriter writer = new(stream, Encoding.UTF8); \n```", "```cs\n    namespace Packt.Shared;\n    public class Person\n    {\n      public Person(decimal initialSalary)\n      {\n        Salary = initialSalary;\n      }\n      public string? FirstName { get; set; }\n      public string? LastName { get; set; }\n      public DateTime DateOfBirth { get; set; }\n      public HashSet<Person>? Children { get; set; }\n      protected decimal Salary { get; set; }\n    } \n    ```", "```cs\n    using System.Xml.Serialization; // XmlSerializer\n    using Packt.Shared; // Person \n    using static System.Console; \n    using static System.Environment; \n    using static System.IO.Path; \n    ```", "```cs\n    // create an object graph\n    List<Person> people = new()\n    {\n      new(30000M) \n      {\n        FirstName = \"Alice\",\n        LastName = \"Smith\",\n        DateOfBirth = new(1974, 3, 14)\n      },\n      new(40000M) \n      {\n        FirstName = \"Bob\",\n        LastName = \"Jones\",\n        DateOfBirth = new(1969, 11, 23)\n      },\n      new(20000M)\n      {\n        FirstName = \"Charlie\",\n        LastName = \"Cox\",\n        DateOfBirth = new(1984, 5, 4),\n        Children = new()\n        {\n          new(0M)\n          {\n            FirstName = \"Sally\",\n            LastName = \"Cox\",\n            DateOfBirth = new(2000, 7, 12)\n          }\n        }\n      }\n    };\n    // create object that will format a List of Persons as XML\n    XmlSerializer xs = new(people.GetType());\n    // create a file to write to\n    string path = Combine(CurrentDirectory, \"people.xml\");\n    using (FileStream stream = File.Create(path))\n    {\n      // serialize the object graph to the stream\n      xs.Serialize(stream, people);\n    }\n    WriteLine(\"Written {0:N0} bytes of XML to {1}\",\n      arg0: new FileInfo(path).Length,\n      arg1: path);\n    WriteLine();\n    // Display the serialized object graph\n    WriteLine(File.ReadAllText(path)); \n    ```", "```cs\n    Unhandled Exception: System.InvalidOperationException: Packt.Shared.Person cannot be serialized because it does not have a parameterless constructor. \n    ```", "```cs\n    public Person() { } \n    ```", "```cs\n    Written 752 bytes of XML to\n    /Users/markjprice/Code/Chapter09/WorkingWithSerialization/people.xml\n    <?xml version=\"1.0\"?>\n    <ArrayOfPerson  >\n      <Person>\n        <FirstName>Alice</FirstName>\n        <LastName>Smith</LastName>\n        <DateOfBirth>1974-03-14T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Bob</FirstName>\n        <LastName>Jones</LastName>\n        <DateOfBirth>1969-11-23T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Charlie</FirstName>\n        <LastName>Cox</LastName>\n        <DateOfBirth>1984-05-04T00:00:00</DateOfBirth>\n        <Children>\n          <Person>\n            <FirstName>Sally</FirstName>\n            <LastName>Cox</LastName>\n            <DateOfBirth>2000-07-12T00:00:00</DateOfBirth>\n          </Person>\n        </Children>\n      </Person>\n    </ArrayOfPerson> \n    ```", "```cs\n    **[****XmlAttribute(****\"fname\"****)****]**\n    public string FirstName { get; set; }\n    **[****XmlAttribute(****\"lname\"****)****]**\n    public string LastName { get; set; }\n    **[****XmlAttribute(****\"dob\"****)****]**\n    public DateTime DateOfBirth { get; set; } \n    ```", "```cs\n    Written 462 bytes of XML to /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.xml\n    <?xml version=\"1.0\"?>\n    <ArrayOfPerson  >\n      <Person fname=\"Alice\" lname=\"Smith\" dob=\"1974-03-14T00:00:00\" />\n      <Person fname=\"Bob\" lname=\"Jones\" dob=\"1969-11-23T00:00:00\" />\n      <Person fname=\"Charlie\" lname=\"Cox\" dob=\"1984-05-04T00:00:00\">\n        <Children>\n          <Person fname=\"Sally\" lname=\"Cox\" dob=\"2000-07-12T00:00:00\" />\n        </Children>\n      </Person>\n    </ArrayOfPerson> \n    ```", "```cs\n    using (FileStream xmlLoad = File.Open(path, FileMode.Open))\n    {\n      // deserialize and cast the object graph into a List of Person\n      List<Person>? loadedPeople =\n        xs.Deserialize(xmlLoad) as List<Person>;\n      if (loadedPeople is not null)\n      {\n        foreach (Person p in loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\", \n            p.LastName, p.Children?.Count ?? 0);\n        }\n      }\n    } \n    ```", "```cs\n    Smith has 0 children. \n    Jones has 0 children. \n    Cox has 1 children. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Newtonsoft.Json\" \n        Version=\"13.0.1\" />\n    </ItemGroup> \n    ```", "```cs\n    // create a file to write to\n    string jsonPath = Combine(CurrentDirectory, \"people.json\");\n    using (StreamWriter jsonStream = File.CreateText(jsonPath))\n    {\n      // create an object that will format as JSON\n      Newtonsoft.Json.JsonSerializer jss = new();\n      // serialize the object graph into a string\n      jss.Serialize(jsonStream, people);\n    }\n    WriteLine();\n    WriteLine(\"Written {0:N0} bytes of JSON to: {1}\",\n      arg0: new FileInfo(jsonPath).Length,\n      arg1: jsonPath);\n    // Display the serialized object graph\n    WriteLine(File.ReadAllText(jsonPath)); \n    ```", "```cs\n    Written 366 bytes of JSON to: /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.json [{\"FirstName\":\"Alice\",\"LastName\":\"Smith\",\"DateOfBirth\":\"1974-03-\n    14T00:00:00\",\"Children\":null},{\"FirstName\":\"Bob\",\"LastName\":\"Jones\",\"Date\n    OfBirth\":\"1969-11-23T00:00:00\",\"Children\":null},{\"FirstName\":\"Charlie\",\"L astName\":\"Cox\",\"DateOfBirth\":\"1984-05-04T00:00:00\",\"Children\":[{\"FirstNam e\":\"Sally\",\"LastName\":\"Cox\",\"DateOfBirth\":\"2000-07-12T00:00:00\",\"Children \":null}]}] \n    ```", "```cs\n    using NewJson = System.Text.Json.JsonSerializer; \n    ```", "```cs\n    using (FileStream jsonLoad = File.Open(jsonPath, FileMode.Open))\n    {\n      // deserialize object graph into a List of Person\n      List<Person>? loadedPeople = \n        await NewJson.DeserializeAsync(utf8Json: jsonLoad,\n          returnType: typeof(List<Person>)) as List<Person>;\n      if (loadedPeople is not null)\n      {\n        foreach (Person p in loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\",\n            p.LastName, p.Children?.Count ?? 0);\n        }\n      }\n    } \n    ```", "```cs\n    Smith has 0 children. \n    Jones has 0 children. \n    Cox has 1 children. \n    ```", "```cs\n    using System.Text.Json; // JsonSerializer\n    using System.Text.Json.Serialization; // [JsonInclude]\n    using static System.Console;\n    using static System.Environment;\n    using static System.IO.Path; \n    ```", "```cs\n    public class Book\n    {\n      // constructor to set non-nullable property\n      public Book(string title)\n      {\n        Title = title;\n      }\n      // properties\n      public string Title { get; set; }\n      public string? Author { get; set; }\n      // fields\n      [JsonInclude] // include this field\n      public DateOnly PublishDate;\n      [JsonInclude] // include this field\n      public DateTimeOffset Created;\n      public ushort Pages;\n    } \n    ```", "```cs\n    Book csharp10 = new(title: \n      \"C# 10 and .NET 6 - Modern Cross-platform Development\")\n    { \n      Author = \"Mark J Price\",\n      PublishDate = new(year: 2021, month: 11, day: 9),\n      Pages = 823,\n      Created = DateTimeOffset.UtcNow,\n    };\n    JsonSerializerOptions options = new()\n    {\n      IncludeFields = true, // includes all fields\n      PropertyNameCaseInsensitive = true,\n      WriteIndented = true,\n      PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n    };\n    string filePath = Combine(CurrentDirectory, \"book.json\");\n    using (Stream fileStream = File.Create(filePath))\n    {\n      JsonSerializer.Serialize<Book>(\n        utf8Json: fileStream, value: csharp10, options);\n    }\n    WriteLine(\"Written {0:N0} bytes of JSON to {1}\",\n      arg0: new FileInfo(filePath).Length,\n      arg1: filePath);\n    WriteLine();\n    // Display the serialized object graph \n    WriteLine(File.ReadAllText(filePath)); \n    ```", "```cs\n    Written 315 bytes of JSON to C:\\Code\\Chapter09\\WorkingWithJson\\bin\\Debug\\net6.0\\book.json\n    {\n      \"title\": \"C# 10 and .NET 6 - Modern Cross-platform Development\",\n      \"author\": \"Mark J Price\",\n      \"publishDate\": {\n        \"year\": 2021,\n        \"month\": 11,\n        \"day\": 9,\n        \"dayOfWeek\": 2,\n        \"dayOfYear\": 313,\n        \"dayNumber\": 738102\n      },\n      \"created\": \"2021-08-20T08:07:02.3191648+00:00\",\n      \"pages\": 823\n    } \n    ```", "```cs\n    Written 230 bytes of JSON to C:\\Code\\Chapter09\\WorkingWithJson\\bin\\Debug\\net6.0\\book.json\n    {\"Title\":\"C# 10 and .NET 6 - Modern Cross-platform Development\",\"Author\":\"Mark J Price\",\"PublishDate\":{\"Year\":2021,\"Month\":11,\"Day\":9,\"DayOfWeek\":2,\"DayOfYear\":313,\"DayNumber\":738102},\"Created\":\"2021-08-20T08:12:31.6852484+00:00\"} \n    ```", "```cs\n// create a list of Shapes to serialize\nList<Shape> listOfShapes = new()\n{\n  new Circle { Colour = \"Red\", Radius = 2.5 },\n  new Rectangle { Colour = \"Blue\", Height = 20.0, Width = 10.0 },\n  new Circle { Colour = \"Green\", Radius = 8.0 },\n  new Circle { Colour = \"Purple\", Radius = 12.3 },\n  new Rectangle { Colour = \"Blue\", Height = 45.0, Width = 18.0 }\n}; \n```", "```cs\nList<Shape> loadedShapesXml = \n  serializerXml.Deserialize(fileXml) as List<Shape>;\nforeach (Shape item in loadedShapesXml)\n{\n  WriteLine(\"{0} is {1} and has an area of {2:N2}\",\n    item.GetType().Name, item.Colour, item.Area);\n} \n```", "```cs\nLoading shapes from XML:\nCircle is Red and has an area of 19.63 \nRectangle is Blue and has an area of 200.00 \nCircle is Green and has an area of 201.06 \nCircle is Purple and has an area of 475.29 \nRectangle is Blue and has an area of 810.00 \n```"]