["```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n    </Project> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n     **<TargetFramework>netstandard****2.0****</TargetFramework>**\n      </PropertyGroup>\n    </Project> \n    ```", "```cs\nusing System;\nusing static System.Console;\nnamespace Packt.Shared\n{\n  public class Person\n  {\n  }\n} \n```", "```cs\nusing System; \nnamespace Packt.Shared; // the class in this file is in this namespace\npublic class Person\n{\n} \n```", "```cs\n        <Project Sdk=\"Microsoft.NET.Sdk\">\n          <PropertyGroup>\n            <OutputType>Exe</OutputType>\n            <TargetFramework>net6.0</TargetFramework>\n            <Nullable>enable</Nullable>\n            <ImplicitUsings>enable</ImplicitUsings>\n          </PropertyGroup>\n         **<ItemGroup>**\n         **<ProjectReference Include=****\"../PacktLibrary/PacktLibrary.csproj\"** **/>**\n         **</ItemGroup>**\n        </Project> \n        ```", "```cs\n        dotnet build \n        ```", "```cs\n    using Packt.Shared;\n    using static System.Console; \n    ```", "```cs\n    // var bob = new Person(); // C# 1.0 or later\n    Person bob = new(); // C# 9.0 or later\n    WriteLine(bob.ToString()); \n    ```", "```cs\n    Packt.Shared.Person \n    ```", "```cs\npublic class Person : System.Object \n```", "```cs\npublic class Person : object \n```", "```cs\npublic class Person : object\n{\n  // fields\n  public string Name;\n  public DateTime DateOfBirth;\n} \n```", "```cs\n    bob.Name = \"Bob Smith\";\n    bob.DateOfBirth = new DateTime(1965, 12, 22); // C# 1.0 or later\n    WriteLine(format: \"{0} was born on {1:dddd, d MMMM yyyy}\", \n      arg0: bob.Name,\n      arg1: bob.DateOfBirth); \n    ```", "```cs\n    Bob Smith was born on Wednesday, 22 December 1965 \n    ```", "```cs\n    Person alice = new()\n    {\n      Name = \"Alice Jones\",\n      DateOfBirth = new(1998, 3, 7) // C# 9.0 or later\n    };\n    WriteLine(format: \"{0} was born on {1:dd MMM yy}\",\n      arg0: alice.Name,\n      arg1: alice.DateOfBirth); \n    ```", "```cs\n    Alice Jones was born on 07 Mar 98 \n    ```", "```cs\n    namespace Packt.Shared\n    {\n      public enum WondersOfTheAncientWorld\n      {\n        GreatPyramidOfGiza,\n        HangingGardensOfBabylon,\n        StatueOfZeusAtOlympia,\n        TempleOfArtemisAtEphesus,\n        MausoleumAtHalicarnassus,\n        ColossusOfRhodes,\n        LighthouseOfAlexandria\n      }\n    } \n    ```", "```cs\n    public WondersOfTheAncientWorld FavoriteAncientWonder; \n    ```", "```cs\n    bob.FavoriteAncientWonder = WondersOfTheAncientWorld.StatueOfZeusAtOlympia;\n    WriteLine(\n      format: \"{0}'s favorite wonder is {1}. Its integer is {2}.\",\n      arg0: bob.Name,\n      arg1: bob.FavoriteAncientWonder,\n      arg2: (int)bob.FavoriteAncientWonder); \n    ```", "```cs\n    Bob Smith's favorite wonder is StatueOfZeusAtOlympia. Its integer is 2. \n    ```", "```cs\n    namespace Packt.Shared\n    {\n     **[****System.Flags****]**\n      public enum WondersOfTheAncientWorld **:** **byte**\n      {\n        **None                     =** **0b****_0000_0000,** **// i.e. 0**\n        GreatPyramidOfGiza       **=** **0b****_0000_0001,** **// i.e. 1**\n        HangingGardensOfBabylon  **=** **0b****_0000_0010,** **// i.e. 2**\n        StatueOfZeusAtOlympia    **=** **0b****_0000_0100,** **// i.e. 4**\n        TempleOfArtemisAtEphesus **=** **0b****_0000_1000,** **// i.e. 8**\n        MausoleumAtHalicarnassus **=** **0b****_0001_0000,** **// i.e. 16**\n        ColossusOfRhodes         **=** **0b****_0010_0000,** **// i.e. 32**\n        LighthouseOfAlexandria   **=** **0b****_0100_0000** **// i.e. 64**\n      }\n    } \n    ```", "```cs\n    public WondersOfTheAncientWorld BucketList; \n    ```", "```cs\n    bob.BucketList = \n      WondersOfTheAncientWorld.HangingGardensOfBabylon\n      | WondersOfTheAncientWorld.MausoleumAtHalicarnassus;\n    // bob.BucketList = (WondersOfTheAncientWorld)18;\n    WriteLine($\"{bob.Name}'s bucket list is {bob.BucketList}\"); \n    ```", "```cs\n    Bob Smith's bucket list is HangingGardensOfBabylon, MausoleumAtHalicarnassus \n    ```", "```cs\n    using System.Collections.Generic; // List<T> \n    ```", "```cs\n    public List<Person> Children = new List<Person>(); \n    ```", "```cs\npublic List<Person> Children = new(); \n```", "```cs\n    bob.Children.Add(new Person { Name = \"Alfred\" }); // C# 3.0 and later\n    bob.Children.Add(new() { Name = \"Zoe\" }); // C# 9.0 and later\n    WriteLine(\n      $\"{bob.Name} has {bob.Children.Count} children:\");\n    for (int childIndex = 0; childIndex < bob.Children.Count; childIndex++)\n    {\n      WriteLine($\"  {bob.Children[childIndex].Name}\");\n    } \n    ```", "```cs\n    Bob Smith has 2 children:\n      Alfred\n      Zoe \n    ```", "```cs\n    namespace Packt.Shared\n    {\n      public class BankAccount\n      {\n        public string AccountName; // instance member\n        public decimal Balance; // instance member\n        public static decimal InterestRate; // shared member\n      }\n    } \n    ```", "```cs\n    BankAccount.InterestRate = 0.012M; // store a shared value\n    BankAccount jonesAccount = new(); // C# 9.0 and later\n    jonesAccount.AccountName = \"Mrs. Jones\"; \n    jonesAccount.Balance = 2400;\n    WriteLine(format: \"{0} earned {1:C} interest.\",\n      arg0: jonesAccount.AccountName,\n      arg1: jonesAccount.Balance * BankAccount.InterestRate);\n    BankAccount gerrierAccount = new(); \n    gerrierAccount.AccountName = \"Ms. Gerrier\"; \n    gerrierAccount.Balance = 98;\n    WriteLine(format: \"{0} earned {1:C} interest.\",\n      arg0: gerrierAccount.AccountName,\n      arg1: gerrierAccount.Balance * BankAccount.InterestRate); \n    ```", "```cs\n    Mrs. Jones earned £28.80 interest. \n    Ms. Gerrier earned £1.18 interest. \n    ```", "```cs\n     // constants\n    public const string Species = \"Homo Sapien\"; \n    ```", "```cs\n    WriteLine($\"{bob.Name} is a {Person.Species}\"); \n    ```", "```cs\n    Bob Smith is a Homo Sapien \n    ```", "```cs\n    // read-only fields\n    public readonly string HomePlanet = \"Earth\"; \n    ```", "```cs\n    WriteLine($\"{bob.Name} was born on {bob.HomePlanet}\"); \n    ```", "```cs\n    Bob Smith was born on Earth \n    ```", "```cs\n    // read-only fields\n    public readonly string HomePlanet = \"Earth\";\n    **public****readonly** **DateTime Instantiated;**\n    **// constructors**\n    **public****Person****()**\n    **{**\n    **// set default values for fields**\n    **// including read-only fields**\n     **Name =** **\"Unknown\"****;** \n     **Instantiated = DateTime.Now;**\n    **}** \n    ```", "```cs\n    Person blankPerson = new();\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\",\n      arg0: blankPerson.Name,\n      arg1: blankPerson.HomePlanet,\n      arg2: blankPerson.Instantiated); \n    ```", "```cs\n    Unknown of Earth was created at 11:58:12 on a Sunday \n    ```", "```cs\n    public Person(string initialName, string homePlanet)\n    {\n      Name = initialName;\n      HomePlanet = homePlanet;\n      Instantiated = DateTime.Now;\n    } \n    ```", "```cs\n    Person gunny = new(initialName: \"Gunny\", homePlanet: \"Mars\");\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\",\n      arg0: gunny.Name,\n      arg1: gunny.HomePlanet,\n      arg2: gunny.Instantiated); \n    ```", "```cs\n    Gunny of Mars was created at 11:59:25 on a Sunday \n    ```", "```cs\n    // methods\n    public void WriteToConsole()\n    {\n      WriteLine($\"{Name} was born on a {DateOfBirth:dddd}.\");\n    }\n    public string GetOrigin()\n    {\n      return $\"{Name} was born on {HomePlanet}.\";\n    } \n    ```", "```cs\n    bob.WriteToConsole(); \n    WriteLine(bob.GetOrigin()); \n    ```", "```cs\n    Bob Smith was born on a Wednesday. \n    Bob Smith was born on Earth. \n    ```", "```cs\npublic class TextAndNumber\n{\n  public string Text;\n  public int Number;\n}\npublic class LifeTheUniverseAndEverything\n{\n  public TextAndNumber GetTheData()\n  {\n    return new TextAndNumber\n    {\n      Text = \"What's the meaning of life?\",\n      Number = 42\n    };\n  }\n} \n```", "```cs\n    public (string, int) GetFruit()\n    {\n      return (\"Apples\", 5);\n    } \n    ```", "```cs\n    (string, int) fruit = bob.GetFruit();\n    WriteLine($\"{fruit.Item1}, {fruit.Item2} there are.\"); \n    ```", "```cs\n    Apples, 5 there are. \n    ```", "```cs\n    public (string Name, int Number) GetNamedFruit()\n    {\n      return (Name: \"Apples\", Number: 5);\n    } \n    ```", "```cs\n    var fruitNamed = bob.GetNamedFruit();\n    WriteLine($\"There are {fruitNamed.Number} {fruitNamed.Name}.\"); \n    ```", "```cs\n    There are 5 Apples. \n    ```", "```cs\nvar thing1 = (\"Neville\", 4);\nWriteLine($\"{thing1.Item1} has {thing1.Item2} children.\");\nvar thing2 = (bob.Name, bob.Children.Count); \nWriteLine($\"{thing2.Name} has {thing2.Count} children.\"); \n```", "```cs\n// store return value in a tuple variable with two fields\n(string TheName, int TheNumber) tupleWithNamedFields = bob.GetNamedFruit();\n// tupleWithNamedFields.TheName\n// tupleWithNamedFields.TheNumber\n// deconstruct return value into two separate variables\n(string name, int number) = GetNamedFruit();\n// name\n// number \n```", "```cs\n    (string fruitName, int fruitNumber) = bob.GetFruit();\n    WriteLine($\"Deconstructed: {fruitName}, {fruitNumber}\"); \n    ```", "```cs\n    Deconstructed: Apples, 5 \n    ```", "```cs\n    // deconstructors\n    public void Deconstruct(out string name, out DateTime dob)\n    {\n      name = Name;\n      dob = DateOfBirth;\n    }\n    public void Deconstruct(out string name, \n      out DateTime dob, out WondersOfTheAncientWorld fav)\n    {\n      name = Name;\n      dob = DateOfBirth;\n      fav = FavoriteAncientWonder;\n    } \n    ```", "```cs\n    // Deconstructing a Person\n    var (name1, dob1) = bob;\n    WriteLine($\"Deconstructed: {name1}, {dob1}\");\n    var (name2, dob2, fav2) = bob;\n    WriteLine($\"Deconstructed: {name2}, {dob2}, {fav2}\"); \n    ```", "```cs\n    Deconstructed: Bob Smith, 22/12/1965 00:00:00\n    Deconstructed: Bob Smith, 22/12/1965 00:00:00, StatueOfZeusAtOlympia\n    B \n    ```", "```cs\n    public string SayHello()\n    {\n      return $\"{Name} says 'Hello!'\";\n    }\n    public string SayHelloTo(string name)\n    {\n      return $\"{Name} says 'Hello {name}!'\";\n    } \n    ```", "```cs\n    WriteLine(bob.SayHello()); \n    WriteLine(bob.SayHelloTo(\"Emily\")); \n    ```", "```cs\n    Bob Smith says 'Hello!'\n    Bob Smith says 'Hello Emily!' \n    ```", "```cs\n    public string OptionalParameters(\n      string command  = \"Run!\",\n      double number = 0.0,\n      bool active = true)\n    {\n      return string.Format(\n        format: \"command is {0}, number is {1}, active is {2}\",\n        arg0: command,\n        arg1: number,\n        arg2: active);\n    } \n    ```", "```cs\n    WriteLine(bob.OptionalParameters()); \n    ```", "```cs\n    command is Run!, number is 0, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Jump!\", 98.5)); \n    ```", "```cs\n    command is Jump!, number is 98.5, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\n      number: 52.7, command: \"Hide!\")); \n    ```", "```cs\n    command is Hide!, number is 52.7, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Poke!\", active: false)); \n    ```", "```cs\n    command is Poke!, number is 0, active is False \n    ```", "```cs\n    public void PassingParameters(int x, ref int y, out int z)\n    {\n      // out parameters cannot have a default\n      // AND must be initialized inside the method\n      z = 99;\n      // increment each parameter\n      x++; \n      y++; \n      z++;\n    } \n    ```", "```cs\n    int a = 10; \n    int b = 20; \n    int c = 30;\n    WriteLine($\"Before: a = {a}, b = {b}, c = {c}\"); \n    bob.PassingParameters(a, ref b, out c); \n    WriteLine($\"After: a = {a}, b = {b}, c = {c}\"); \n    ```", "```cs\n    Before: a = 10, b = 20, c = 30 \n    After: a = 10, b = 21, c = 100 \n    ```", "```cs\nint d = 10; \nint e = 20;\nWriteLine($\"Before: d = {d}, e = {e}, f doesn't exist yet!\");\n// simplified C# 7.0 or later syntax for the out parameter \nbob.PassingParameters(d, ref e, out int f); \nWriteLine($\"After: d = {d}, e = {e}, f = {f}\"); \n```", "```cs\n    namespace Packt.Shared\n    {\n      public **partial** class Person\n      { \n    ```", "```cs\n    namespace Packt.Shared\n    {\n      public partial class Person\n      {\n      }\n    } \n    ```", "```cs\n    // a property defined using C# 1 - 5 syntax\n    public string Origin\n    {\n      get\n      {\n        return $\"{Name} was born on {HomePlanet}\";\n      }\n    }\n    // two properties defined using C# 6+ lambda expression body syntax\n    public string Greeting => $\"{Name} says 'Hello!'\";\n    public int Age => System.DateTime.Today.Year - DateOfBirth.Year; \n    ```", "```cs\n    Person sam = new()\n    {\n      Name = \"Sam\",\n      DateOfBirth = new(1972, 1, 27)\n    };\n    WriteLine(sam.Origin); \n    WriteLine(sam.Greeting); \n    WriteLine(sam.Age); \n    ```", "```cs\n    Sam was born on Earth \n    Sam says 'Hello!'\n    49 \n    ```", "```cs\n    public string FavoriteIceCream { get; set; } // auto-syntax \n    ```", "```cs\n    private string favoritePrimaryColor;\n    public string FavoritePrimaryColor\n    {\n      get\n      {\n        return favoritePrimaryColor;\n      }\n      set\n      {\n        switch (value.ToLower())\n        {\n          case \"red\":\n          case \"green\":\n          case \"blue\":\n            favoritePrimaryColor = value;\n            break;\n          default:\n            throw new System.ArgumentException(\n              $\"{value} is not a primary color. \" + \n              \"Choose from: red, green, blue.\");\n        }\n      }\n    } \n    ```", "```cs\n    sam.FavoriteIceCream = \"Chocolate Fudge\";\n    WriteLine($\"Sam's favorite ice-cream flavor is {sam.FavoriteIceCream}.\"); \n    sam.FavoritePrimaryColor = \"Red\";\n    WriteLine($\"Sam's favorite primary color is {sam.FavoritePrimaryColor}.\"); \n    ```", "```cs\n    Sam's favorite ice-cream flavor is Chocolate Fudge. \n    Sam's favorite primary color is Red. \n    ```", "```cs\npublic class Book\n{\n  public required string Isbn { get; set; }\n  public string Title { get; set; }\n} \n```", "```cs\nBook novel = new(); \n```", "```cs\n    // indexers\n    public Person this[int index]\n    {\n      get\n      {\n        return Children[index]; // pass on to the List<T> indexer\n      }\n      set\n      {\n        Children[index] = value;\n      }\n    } \n    ```", "```cs\n    sam.Children.Add(new() { Name = \"Charlie\" }); \n    sam.Children.Add(new() { Name = \"Ella\" });\n    WriteLine($\"Sam's first child is {sam.Children[0].Name}\"); \n    WriteLine($\"Sam's second child is {sam.Children[1].Name}\");\n    WriteLine($\"Sam's first child is {sam[0].Name}\"); \n    WriteLine($\"Sam's second child is {sam[1].Name}\"); \n    ```", "```cs\n    Sam's first child is Charlie \n    Sam's second child is Ella \n    Sam's first child is Charlie \n    Sam's second child is Ella \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n      <ItemGroup>\n        <ProjectReference Include=\"../PacktLibrary/PacktLibrary.csproj\" />\n     **<ProjectReference** \n     **Include=****\"../PacktLibraryModern/PacktLibraryModern.csproj\"** **/>**\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    namespace Packt.Shared; // C# 10 file-scoped namespace\n    public class BusinessClassPassenger\n    {\n      public override string ToString()\n      {\n        return $\"Business Class\";\n      }\n    }\n    public class FirstClassPassenger\n    {\n      public int AirMiles { get; set; }\n      public override string ToString()\n      {\n        return $\"First Class with {AirMiles:N0} air miles\";\n      }\n    }\n    public class CoachClassPassenger\n    {\n      public double CarryOnKG { get; set; }\n      public override string ToString()\n      {\n        return $\"Coach Class with {CarryOnKG:N2} KG carry on\";\n      }\n    } \n    ```", "```cs\n    object[] passengers = {\n      new FirstClassPassenger { AirMiles = 1_419 },\n      new FirstClassPassenger { AirMiles = 16_562 },\n      new BusinessClassPassenger(),\n      new CoachClassPassenger { CarryOnKG = 25.7 },\n      new CoachClassPassenger { CarryOnKG = 0 },\n    };\n    foreach (object passenger in passengers)\n    {\n      decimal flightCost = passenger switch\n      {\n        FirstClassPassenger p when p.AirMiles > 35000 => 1500M, \n        FirstClassPassenger p when p.AirMiles > 15000 => 1750M, \n        FirstClassPassenger _                         => 2000M,\n        BusinessClassPassenger _                      => 1000M,\n        CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M, \n        CoachClassPassenger _                         => 650M,\n        _                                             => 800M\n      };\n      WriteLine($\"Flight costs {flightCost:C} for {passenger}\");\n    } \n    ```", "```cs\n    Flight costs £2,000.00 for First Class with 1,419 air miles \n    Flight costs £1,750.00 for First Class with 16,562 air miles \n    Flight costs £1,000.00 for Business Class\n    Flight costs £650.00 for Coach Class with 25.70 KG carry on \n    Flight costs £500.00 for Coach Class with 0.00 KG carry on \n    ```", "```cs\n    decimal flightCost = passenger switch\n    {\n      /* C# 8 syntax\n      FirstClassPassenger p when p.AirMiles > 35000 => 1500M,\n      FirstClassPassenger p when p.AirMiles > 15000 => 1750M,\n      FirstClassPassenger                           => 2000M, */\n      // C# 9 or later syntax\n      FirstClassPassenger p => p.AirMiles switch\n      {\n        > 35000 => 1500M,\n        > 15000 => 1750M,\n        _       => 2000M\n      },\n      BusinessClassPassenger                        => 1000M,\n      CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M,\n      CoachClassPassenger                           => 650M,\n      _                                             => 800M\n    }; \n    ```", "```cs\nFirstClassPassenger { AirMiles: > 35000 } => 1500,\nFirstClassPassenger { AirMiles: > 15000 } => 1750M,\nFirstClassPassenger => 2000M, \n```", "```cs\n    namespace Packt.Shared; // C# 10 file-scoped namespace\n    public class ImmutablePerson\n    {\n      public string? FirstName { get; init; }\n      public string? LastName { get; init; }\n    } \n    ```", "```cs\n    ImmutablePerson jeff = new() \n    {\n      FirstName = \"Jeff\",\n      LastName = \"Winger\"\n    };\n    jeff.FirstName = \"Geoff\"; \n    ```", "```cs\n    Program.cs(254,7): error CS8852: Init-only property or indexer 'ImmutablePerson.FirstName' can only be assigned in an object initializer, or on 'this' or 'base' in an instance constructor or an 'init' accessor. [/Users/markjprice/Code/Chapter05/PeopleApp/PeopleApp.csproj] \n    ```", "```cs\n    public record ImmutableVehicle\n    {\n      public int Wheels { get; init; }\n      public string? Color { get; init; }\n      public string? Brand { get; init; }\n    } \n    ```", "```cs\n    ImmutableVehicle car = new() \n    {\n      Brand = \"Mazda MX-5 RF\",\n      Color = \"Soul Red Crystal Metallic\",\n      Wheels = 4\n    };\n    ImmutableVehicle repaintedCar = car \n      with { Color = \"Polymetal Grey Metallic\" }; \n    WriteLine($\"Original car color was {car.Color}.\");\n    WriteLine($\"New car color is {repaintedCar.Color}.\"); \n    ```", "```cs\n    Original car color was Soul Red Crystal Metallic.\n    New car color is Polymetal Grey Metallic. \n    ```", "```cs\npublic record ImmutableAnimal\n{\n  public string Name { get; init; } \n  public string Species { get; init; }\n  public ImmutableAnimal(string name, string species)\n  {\n    Name = name;\n    Species = species;\n  }\n  public void Deconstruct(out string name, out string species)\n  {\n    name = Name;\n    species = Species;\n  }\n} \n```", "```cs\n    // simpler way to define a record\n    // auto-generates the properties, constructor, and deconstructor\n    public record ImmutableAnimal(string Name, string Species); \n    ```", "```cs\n    ImmutableAnimal oscar = new(\"Oscar\", \"Labrador\");\n    var (who, what) = oscar; // calls Deconstruct method \n    WriteLine($\"{who} is a {what}.\"); \n    ```", "```cs\n    Oscar is a Labrador. \n    ```"]