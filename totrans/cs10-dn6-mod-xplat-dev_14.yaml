- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Websites Using ASP.NET Core Razor Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using Microsoft ASP.NET Core. You will learn about building simple
    websites using the ASP.NET Core Razor Pages feature introduced with ASP.NET Core
    2.0 and the Razor class library feature introduced with ASP.NET Core 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring ASP.NET Core Razor Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Entity Framework Core with ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Razor class libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring services and the HTTP request pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding web development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing for the web means developing with **Hypertext Transfer Protocol**
    (**HTTP**), so we will start by reviewing this important foundational technology.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding HTTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To communicate with a web server, the client, also known as the **user agent**,
    makes calls over the network using HTTP. As such, HTTP is the technical underpinning
    of the web. So, when we talk about websites and web services, we mean that they
    use HTTP to communicate between a client (often a web browser) and a server.
  prefs: []
  type: TYPE_NORMAL
- en: 'A client makes an HTTP request for a resource, such as a page, uniquely identified
    by a **Uniform Resource Locator** (**URL**), and the server sends back an HTTP
    response, as shown in *Figure 14.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B17442_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: An HTTP request and response'
  prefs: []
  type: TYPE_NORMAL
- en: You can use Google Chrome and other browsers to record requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Google Chrome is available on more operating systems than
    any other browser, and it has powerful, built-in developer tools, so it is a good
    first choice of browser for testing your websites. Always test your web application
    with Chrome and at least two other browsers, for example, Firefox and Safari for
    macOS and iPhone. Microsoft Edge switched from using Microsoft''s own rendering
    engine to using Chromium in 2019, so it is less important to test with it. If
    Microsoft''s Internet Explorer is used at all, it tends to mostly be inside organizations
    for intranets.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the components of a URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A URL is made up of several components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheme**: `http` (clear text) or `https` (encrypted).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: For a production website or service, the **top-level domain** (**TLD**)
    might be `example.com`. You might have subdomains such as `www`, `jobs`, or `extranet`.
    During development, you typically use `localhost` for all websites and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port number**: For a production website or service, `80` for `http`, `443`
    for `https`. These port numbers are usually inferred from the scheme. During development,
    other port numbers are commonly used, such as `5000`, `5001`, and so on, to differentiate
    between websites and services that all use the shared domain `localhost`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: A relative path to a resource, for example, `/customers/germany`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query string**: A way to pass parameter values, for example, `?country=Germany&searchtext=shoes`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragment**: A reference to an element on a web page using its `id`, for example,
    `#toc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning port numbers for projects in this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this book, we will use the domain `localhost` for all websites and services,
    so we will use port numbers to differentiate projects when multiple need to execute
    at the same time, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Project | Description | Port numbers |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.Web` | ASP.NET Core Razor Pages website | `5000 HTTP`, `5001 HTTPS`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.Mvc` | ASP.NET Core MVC website | `5000 HTTP`, `5001 HTTPS` |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.WebApi` | ASP.NET Core Web API service | `5002 HTTPS`, `5008 HTTP`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Minimal.WebApi` | ASP.NET Core Web API (minimal) | `5003 HTTPS` |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.OData` | ASP.NET Core OData service | `5004 HTTPS` |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.GraphQL` | ASP.NET Core GraphQL service | `5005 HTTPS` |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.gRPC` | ASP.NET Core gRPC service | `5006 HTTPS` |'
  prefs: []
  type: TYPE_TB
- en: '| `Northwind.AzureFuncs` | Azure Functions nanoservice | `7071 HTTP` |'
  prefs: []
  type: TYPE_TB
- en: Using Google Chrome to make HTTP requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore how to use Google Chrome to make HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Google Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **More tools** | **Developer tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Network** tab, and Chrome should immediately start recording the
    network traffic between your browser and any web servers (note the red circle),
    as shown in *Figure 14.2*:![](img/B17442_15_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.2: Chrome Developer Tools recording network traffic'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Chrome''s address box, enter the address of Microsoft''s website for learning
    ASP.NET, as shown in the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://dotnet.microsoft.com/learn/aspnet](https://dotnet.microsoft.com/learn/aspnet)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Developer Tools, in the list of recorded requests, scroll to the top and
    click on the first entry, the row where the **Type** is **document**, as shown
    in *Figure 14.3*:![](img/B17442_15_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.3: Recorded requests in Developer Tools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the right-hand side, click on the **Headers** tab, and you will see details
    about **Request Headers** and **Response Headers**, as shown in *Figure 14.4*:![](img/B17442_15_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.4: Request and response headers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the following aspects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Request Method** is `GET`. Other HTTP methods that you could see here include
    `POST`, `PUT`, `DELETE`, `HEAD`, and `PATCH`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status Code** is `200 OK`. This means that the server found the resource
    that the browser requested and has returned it in the body of the response. Other
    status codes that you might see in response to a `GET` request include `301 Moved
    Permanently`, `400 Bad Request`, `401 Unauthorized`, and `404 Not Found`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request Headers** sent by the browser to the web server include:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**accept**, which lists what formats the browser accepts. In this case, the
    browser is saying it understands HTML, XHTML, XML, and some image formats, but
    it will accept all other files (`*/*`). Default weightings, also known as quality
    values, are `1.0`. XML is specified with a quality value of `0.9` so it is preferred
    less than HTML or XHTML. All other file types are given a quality value of `0.8`
    so are least preferred.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**accept-encoding**, which lists what compression algorithms the browser understands,
    in this case, GZIP, DEFLATE, and Brotli.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**accept-language**, which lists the human languages it would prefer the content
    to use. In this case, US English, which has a default quality value of `1.0`,
    then any dialect of English that has an explicitly specified quality value of
    `0.9`, and then any dialect of Swedish that has an explicitly specified quality
    value of `0.8`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Headers**, `content-encoding` tells me the server has sent back
    the HTML web page response compressed using the GZIP algorithm because it knows
    that the client can decompress that format. (This is not visible in *Figure 14.4*
    because there is not enough space to expand the **Response Headers** section.)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Close Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding client-side web development technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When building websites, a developer needs to know more than just C# and .NET.
    On the client (that is, in the web browser), you will use a combination of the
    following technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML5**: This is used for the content and structure of a web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS3**: This is used for the styles applied to elements on the web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript**: This is used to code any business logic needed on the web page,
    for example, validating form input or making calls to a web service to fetch more
    data needed by the web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although HTML5, CSS3, and JavaScript are the fundamental components of frontend
    web development, there are many additional technologies that can make frontend
    web development more productive, including Bootstrap, the world's most popular
    frontend open-source toolkit, and CSS preprocessors such as SASS and LESS for
    styling, Microsoft's TypeScript language for writing more robust code, and JavaScript
    libraries such as jQuery, Angular, React, and Vue. All these higher-level technologies
    ultimately translate or compile to the underlying three core technologies, so
    they work across all modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the build and deploy process, you will likely use technologies such
    as Node.js; Node Package Manager (npm) and Yarn, which are both client-side package
    managers; and webpack, which is a popular module bundler, a tool for compiling,
    transforming, and bundling website source files.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft ASP.NET Core is part of a history of Microsoft technologies used
    to build websites and services that have evolved over the years:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active Server Pages** (**ASP**) was released in 1996 and was Microsoft''s
    first attempt at a platform for dynamic server-side execution of website code.
    ASP files contain a mix of HTML and code that executes on the server written in
    the VBScript language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Web Forms** was released in 2002 with the .NET Framework and was
    designed to enable non-web developers, such as those familiar with Visual Basic,
    to quickly create websites by dragging and dropping visual components and writing
    event-driven code in Visual Basic or C#. Web Forms should be avoided for new .NET
    Framework web projects in favor of ASP.NET MVC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Communication Foundation** (**WCF**) was released in 2006 and enables
    developers to build SOAP and REST services. SOAP is powerful but complex, so it
    should be avoided unless you need advanced features, such as distributed transactions
    and complex messaging topologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET MVC** was released in 2009 to cleanly separate the concerns of web
    developers between the **models**, which temporarily store the data; the **views**,
    which present the data using various formats in the UI; and the **controllers**,
    which fetch the model and pass it to a view. This separation enables improved
    reuse and unit testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Web API** was released in 2012 and enables developers to create HTTP
    services (aka REST services) that are simpler and more scalable than SOAP services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET SignalR** was released in 2013 and enables real-time communication
    in websites by abstracting underlying technologies and techniques, such as WebSockets
    and Long Polling. This enables website features such as live chat or updates to
    time-sensitive data such as stock prices across a wide variety of web browsers,
    even when they do not support an underlying technology such as WebSockets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core** was released in 2016 and combines modern implementations of
    .NET Framework technologies such as MVC, Web API, and SignalR, with newer technologies
    such as Razor Pages, gRPC, and Blazor, all running on modern .NET. Therefore,
    it can execute cross-platform. ASP.NET Core has many project templates to get
    you started with its supported technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: Choose ASP.NET Core to develop websites and services because
    it includes web-related technologies that are modern and cross-platform.'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core 2.0 to 2.2 can run on .NET Framework 4.6.1 or later (Windows only)
    as well as .NET Core 2.0 or later (cross-platform). ASP.NET Core 3.0 only supports
    .NET Core 3.0\. ASP.NET Core 6.0 only supports .NET 6.0.
  prefs: []
  type: TYPE_NORMAL
- en: Classic ASP.NET versus modern ASP.NET Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, ASP.NET has been built on top of a large assembly in the .NET Framework
    named `System.Web.dll` and it is tightly coupled to Microsoft's Windows-only web
    server named **Internet Information Services** (**IIS**). Over the years, this
    assembly has accumulated a lot of features, many of which are not suitable for
    modern cross-platform development.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core is a major redesign of ASP.NET. It removes the dependency on the
    `System.Web.dll` assembly and IIS and is composed of modular lightweight packages,
    just like the rest of modern .NET. Using IIS as the web server is still supported
    by ASP.NET Core but there is a better option.
  prefs: []
  type: TYPE_NORMAL
- en: You can develop and run ASP.NET Core applications cross-platform on Windows,
    macOS, and Linux. Microsoft has even created a cross-platform, super-performant
    web server named **Kestrel**, and the entire stack is open source.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core 2.2 or later projects default to the new in-process hosting model.
    This gives a 400% performance improvement when hosting in Microsoft IIS, but Microsoft
    still recommends using Kestrel for even better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty ASP.NET Core project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an ASP.NET Core project that will show a list of suppliers from
    the Northwind database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dotnet` tool has many project templates that do a lot of work for you,
    but it can be difficult to know which works best for a given situation, so we
    will start with the empty website project template and then add features step
    by step so that you can understand all the pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Language: C#'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Web`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For Visual Studio 2022, leave all other options as their defaults, for example,
    **Configure for HTTPS** selected, and **Enable Docker** cleared
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Northwind.Web` as the active OmniSharp project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.Web` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Northwind.Web.csproj` file and note that the project is like a class
    library except that the SDK is `Microsoft.NET.Sdk.Web`, as shown highlighted in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using Visual Studio 2022, in **Solution Explorer**, toggle **Show
    All Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the `obj` folder, expand the `Debug` folder, expand the `net6.0` folder,
    select the `Northwind.Web.GlobalUsings.g.cs` file, and note the implicitly imported
    namespaces include all the ones for a console app or class library, as well as
    some ASP.NET Core ones, such as `Microsoft.AspNetCore.Builder`, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Collapse the `obj` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Program.cs`, and note the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ASP.NET Core project is like a top-level console application, with a hidden
    `Main` method as its entry point that has an argument passed using the name `args`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It calls `WebApplication.CreateBuilder`, which creates a host for the website
    using defaults for a web host that is then built.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The website will respond to all HTTP `GET` requests with plain text: `Hello
    World!`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The call to the `Run` method is a blocking call, so the hidden `Main` method
    does not return until the web server stops running, as shown in the following
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the file, add a statement to write a message to the console
    after the call to the `Run` method and therefore after the web server has stopped,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing and securing the website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now test the functionality of the ASP.NET Core Empty website project.
    We will also enable encryption of all traffic between the browser and web server
    for privacy by switching from HTTP to HTTPS. HTTPS is the secure encrypted version
    of HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the toolbar, make sure that **Northwind.Web** is selected rather than **IIS
    Express** or **WSL**, and switch the **Web Browser (Microsoft Edge)** to **Google
    Chrome**, as shown in *Figure 14.5*:![](img/B17442_15_05.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.5: Selecting the Northwind.Web profile with its Kestrel web server
    in Visual Studio'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Debug** | **Start Without Debugging…**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you start a secure website, you will be prompted that your project
    is configured to use SSL, and to avoid warnings in the browser you can choose
    to trust the self-signed certificate that ASP.NET Core has generated. Click **Yes**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you see the **Security Warning** dialog box, click **Yes** again.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For Visual Studio Code, in **TERMINAL**, enter the `dotnet run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In either Visual Studio''s command prompt window or Visual Studio Code''s terminal,
    note the Kestrel web server has started listening on random ports for HTTP and
    HTTPS, that you can press Ctrl + C to shut down the Kestrel web server, and the
    hosting environment is `Development`, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visual Studio will also start your chosen browser automatically. If you are
    using Visual Studio Code, you will have to start Chrome manually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the web server running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the address `http://localhost:5000/`, or whatever port number was assigned
    to HTTP, and note the response is `Hello World!` in plain text, from the cross-platform
    Kestrel web server, as shown in *Figure 14.6*:![](img/B17442_15_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.6: Plain text response from http://localhost:5000/'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chrome also requests a `favicon.ico` file automatically to show in the browser
    tab but this is missing so it shows as a `404 Not Found` error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the address `https://localhost:5001/`, or whatever port number was assigned
    to HTTPS, and note if you are not using Visual Studio or if you clicked **No**
    when prompted to trust the SSL certificate, then the response is a privacy error,
    as shown in *Figure 14.7*:![Graphical user interface, application  Description
    automatically generated](img/B17442_15_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.7: Privacy error showing SSL encryption has not been enabled with
    a certificate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will see this error when you have not configured a certificate that the
    browser can trust to encrypt and decrypt HTTPS traffic (and so if you do not see
    this error, it is because you have already configured a certificate).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a production environment, you would want to pay a company such as Verisign
    for an SSL certificate because they provide liability protection and technical
    support.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**For Linux Developers**: If you use a Linux variant that cannot create self-signed
    certificates or you do not mind reapplying for a new certificate every 90 days,
    then you can get a free certificate from the following link: [https://letsencrypt.org](https://letsencrypt.org)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: During development, you can tell your OS to trust a temporary development certificate
    provided by ASP.NET Core.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At the command line or in **TERMINAL**, press Ctrl + C to shut down the web
    server, and note the message that is written, as shown highlighted in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you need to trust a local self-signed SSL certificate, then at the command
    line or in **TERMINAL**, enter the `dotnet dev-certs https --trust` command, and
    note the message, **Trusting the HTTPS development certificate was requested**.
    You might be prompted to enter your password and a valid HTTPS certificate may
    already be present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling stronger security and redirect to a secure connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to enable stricter security and automatically redirect requests
    for HTTP to HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: **HTTP Strict Transport Security** (**HSTS**) is an opt-in
    security enhancement that you should always enable. If a website specifies it
    and a browser supports it, then it forces all communication over HTTPS and prevents
    the visitor from using untrusted or invalid certificates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add an `if` statement to enable HSTS when not in development,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a statement before the call to `app.MapGet` to redirect HTTP requests to
    HTTPS, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the **Northwind.Web** website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Chrome is still running, close and restart it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the address `http://localhost:5000/`, or whatever port number was assigned
    to HTTP, and note how the server responds with a `307 Temporary Redirect` to port
    `5001` and that the certificate is now valid and trusted, as shown in *Figure
    14.8*:![](img/B17442_15_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.8: The connection is now secured using a valid certificate and a
    307 redirect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Remember to shut down the Kestrel web server whenever you
    have finished testing a website.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the hosting environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In earlier versions of ASP.NET Core, the project template set a rule to say
    that while in development mode, any unhandled exceptions will be shown in the
    browser window for the developer to see the details of the exception, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With ASP.NET Core 6 and later, this code is executed automatically by default
    so it is not included in the project template.
  prefs: []
  type: TYPE_NORMAL
- en: How does ASP.NET Core know when we are running in development mode so that the
    `IsDevelopment` method returns `true`? Let's find out.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core can read from environment variables to determine what hosting environment
    to use, for example, `DOTNET_ENVIRONMENT` or `ASPNETCORE_ENVIRONMENT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override these settings during local development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` folder, expand the folder named `Properties`, open the
    file named `launchSettings.json`, and note the profile named `Northwind.Web` that
    sets the hosting environment to `Development`, as shown highlighted in the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the randomly assigned port numbers for HTTP to `5000` and HTTPS to `5001`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the environment to `Production`. Optionally, change `launchBrowser` to
    `false` to prevent Visual Studio from automatically launching a browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the website and note the hosting environment is `Production`, as shown
    in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `launchSettings.json`, change the environment back to `Development`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `launchSettings.json` file also has a configuration for using IIS as the
    web server using random port numbers. In this book, we will only be using Kestrel
    as the web server since it is cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: Separating configuration for services and pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Putting all code to initialize a simple web project in `Program.cs` can be a
    good idea, especially for web services, so we will see this style again in *Chapter
    16*, *Building and Consuming Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for anything more than the most basic web project, you might prefer
    to separate configuration into a separate `Startup` class with two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConfigureServices(IServiceCollection services)`: to add dependency services
    to a dependency injection container, such as Razor Pages support, **Cross-Origin
    Resource Sharing** (**CORS**) support, or a database context for working with
    the Northwind database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Configure(IApplicationBuilder app, IWebHostEnvironment env)`: to set up the
    HTTP pipeline through which requests and responses flow. Call various `Use` methods
    on the `app` parameter to construct the pipeline in the order the features should
    be processed.![](img/B17442_15_09.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 14.9: Startup class ConfigureServices and Configure methods diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Both methods will get called automatically by the runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `Startup` class now:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new class file to the `Northwind.Web` project named `Startup.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `Startup.cs`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following about the code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `ConfigureServices` method is currently empty because we do not yet need
    any dependency services added.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Configure` method sets up the HTTP request pipeline and enables the use
    of endpoint routing. It configures a routed endpoint to wait for requests using
    the same map for each HTTP `GET` request for the root path `/` that responds to
    those requests by returning the plain text `"Hello World!"`. We will learn about
    routed endpoints and their benefits at the end of this chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we must specify that we want to use the `Startup` class in the application
    entry point.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify `Program.cs`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website and note that it has the same behavior as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In all the other website and service projects that we create in this book, we
    will use the single `Program.cs` file created by .NET 6 project templates. If
    you like the `Startup.cs` way of doing things, then you will see in this chapter
    how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a website to serve static content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A website that only ever returns a single plain text message isn't very useful!
  prefs: []
  type: TYPE_NORMAL
- en: At a minimum, it ought to return static HTML pages, CSS that the web pages will
    use for styling, and any other static resources, such as images and videos.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, these files should be stored in a directory named `wwwroot` to
    keep them separate from the dynamically executing parts of your website project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a folder for static files and a web page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will now create a folder for your static website resources and a basic
    index page that uses Bootstrap for styling:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Web` project/folder, create a folder named `wwwroot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new HTML page file to the `wwwroot` folder named `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its content to link to CDN-hosted Bootstrap for styling, and use modern
    good practices such as setting the viewport, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: To get the latest `<link>` element for Bootstrap, copy and
    paste it from the documentation at the following link: [https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template).'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling static and default files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you were to start the website now and enter `http://localhost:5000/index.html`
    in the address box, the website would return a `404 Not Found` error saying no
    web page was found. To enable the website to return static files such as `index.html`,
    we must explicitly configure that feature.
  prefs: []
  type: TYPE_NORMAL
- en: Even if we enable static files, if you were to start the website and enter `http://localhost:5000/`
    in the address box, the website will return a `404 Not Found` error because the
    web server does not know what to return by default if no named file is requested.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now enable static files, explicitly configure default files, and change
    the URL path registered that returns the plain text `Hello World!` response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Startup.cs`, in the `Configure` method, add statements after enabling HTTPS
    redirection to enable static files and default files, and modify the statement
    that maps a `GET` request to return the `Hello World!` plain text response to
    only respond to the URL path `/hello`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The call to `UseDefaultFiles` must come before the call to `UseStaticFiles`,
    or it will not work! You will learn more about the ordering of middleware and
    endpoint routing at the end of this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start **Chrome** and show **Developer Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `http://localhost:5000/` and note that you are redirected to
    the HTTPS address on port `5001`, and the `index.html` file is now returned over
    that secure connection because it is one of the possible default files for this
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Developer Tools**, note the request for the Bootstrap stylesheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `http://localhost:5000/hello` and note that it returns the
    plain text `Hello World!` as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all web pages are static, that is, they only get changed manually by a web
    editor, then our website programming work is complete. But almost all websites
    need dynamic content, which means a web page that is generated at runtime by executing
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do that is to use a feature of ASP.NET Core named **Razor
    Pages**.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring ASP.NET Core Razor Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core Razor Pages allow a developer to easily mix C# code statements
    with HTML markup to make the generated web page dynamic. That is why they use
    the `.cshtml` file extension.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, ASP.NET Core looks for Razor Pages in a folder named `Pages`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Razor Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will now copy and change the static HTML page into a dynamic Razor Page,
    and then add and enable the Razor Pages service:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Web` project folder, create a folder named `Pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `index.html` file into the `Pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the file in the `Pages` folder, rename the file extension from `.html` to
    `.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `<h2>` element that says that this is a static HTML page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Startup.cs`, in the `ConfigureServices` method, add a statement to add
    ASP.NET Core Razor Pages and its related services, such as model binding, authorization,
    anti-forgery, views, and tag helpers, to the builder, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Startup.cs`, in the `Configure` method, in the configuration to use endpoints,
    add a statement to call the `MapRazorPages` method, as shown highlighted in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding code to a Razor Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the HTML markup of a web page, Razor syntax is indicated by the `@` symbol.
    Razor Pages can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: They require the `@page` directive at the top of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can optionally have an `@functions` section that defines any of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties for storing data values, like in a class definition. An instance
    of that class is automatically instantiated named `Model` that can have its properties
    set in special methods and you can get the property values in the HTML.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods named `OnGet`, `OnPost`, `OnDelete`, and so on that execute when HTTP
    requests are made, such as `GET`, `POST`, and `DELETE`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now convert the static HTML page into a Razor Page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, open `index.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `@page` statement to the top of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `@page` statement, add an `@functions` statement block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a property to store the name of the current day as a `string` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a method to set `DayName` that executes when an HTTP `GET` request is
    made for the page, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the day name inside the second HTML paragraph, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5001/` and note the current day name is
    output on the page, as shown in *Figure 14.10*:![](img/B17442_15_10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.10: Welcome to Northwind page showing the current day'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5001/index.html`, which exactly matches
    the static filename, and note that it returns the static HTML page as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5001/hello`, which exactly matches the endpoint
    route that returns plain text, and note that it returns `Hello World!` as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using shared layouts with Razor Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most websites have more than one page. If every page had to contain all of the
    boilerplate markup that is currently in `index.cshtml`, that would become a pain
    to manage. So, ASP.NET Core has a feature named **layouts**.
  prefs: []
  type: TYPE_NORMAL
- en: To use layouts, we must create a Razor file to define the default layout for
    all Razor Pages (and all MVC views) and store it in a `Shared` folder so that
    it can be easily found by convention. The name of this file can be anything, because
    we will specify it, but `_Layout.cshtml` is good practice.
  prefs: []
  type: TYPE_NORMAL
- en: We must also create a specially named file to set the default layout file for
    all Razor Pages (and all MVC views). This file must be named `_ViewStart.cshtml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see layouts in action:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, add a file named `_ViewStart.cshtml`. (The Visual Studio
    item template is named **Razor View Start**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its content, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Pages` folder, create a folder named `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Shared` folder, create a file named `_Layout.cshtml`. (The Visual Studio
    item template is named **Razor Layout**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the content of `_Layout.cshtml` (it is similar to `index.cshtml` so
    you can copy and paste the HTML markup from there), as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<title>` is set dynamically using server-side code from a dictionary named
    `ViewData`. This is a simple way to pass data between different parts of an ASP.NET
    Core website. In this case, the data will be set in a Razor Page class file and
    then output in the shared layout.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@RenderBody()` marks the insertion point for the view being requested.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A horizontal rule and footer will appear at the bottom of each page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom of the layout is a script to implement some cool features of Bootstrap
    that we can use later, such as a carousel of images.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the `<script>` elements for Bootstrap, we have defined a section named
    `Scripts` so that a Razor Page can optionally inject additional scripts that it
    needs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify `index.cshtml` to remove all HTML markup except `<div class="jumbotron">`
    and its contents, and leave the C# code in the `@functions` block that you added
    earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a statement to the `OnGet` method to store a page title in the `ViewData`
    dictionary, and modify the button to navigate to a suppliers page (which we will
    create in the next section), as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website, visit it with Chrome, and note that it has similar behavior
    as before, although clicking the button for suppliers will give a `404 Not Found`
    error because we have not created that page yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using code-behind files with Razor Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, it is better to separate the HTML markup from the data and executable
    code, so Razor Pages allows you to do this by putting the C# code in **code-behind**
    class files. They have the same name as the `.cshtml` file but end with `.cshtml.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now create a page that shows a list of suppliers. In this example,
    we are focusing on learning about code-behind files. In the next topic, we will
    load the list of suppliers from a database, but for now, we will simulate that
    with a hardcoded array of `string` values:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, add two new files named `Suppliers.cshtml` and `Suppliers.cshtml.cs`.
    (The Visual Studio item template is named **Razor Page - Empty** and it creates
    both files.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add statements to the code-behind file named `Suppliers.cshtml.cs`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`SuppliersModel` inherits from `PageModel`, so it has members such as the `ViewData`
    dictionary for sharing data. You can right-click on `PageModel` and select **Go
    To Definition** to see that it has lots more useful features, such as the entire
    `HttpContext` of the current request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SuppliersModel` defines a property for storing a collection of `string` values
    named `Suppliers`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When an HTTP `GET` request is made for this Razor Page, the `Suppliers` property
    is populated with some example supplier names from an array of `string` values.
    Later, we will populate this from the Northwind database.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify the contents of `Suppliers.cshtml`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The model type for this Razor Page is set to `SuppliersModel`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The page outputs an HTML table with Bootstrap styles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The data rows in the table are generated by looping through the `Suppliers`
    property of `Model` if it is not `null`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the website and visit it using Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button to learn more about suppliers, and note the table of suppliers,
    as shown in *Figure 14.11*:![](img/B17442_15_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.11: The table of suppliers loaded from an array of strings'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Entity Framework Core with ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Entity Framework Core is a natural way to get real data into a website. In
    *Chapter 13*, *Introducing Practical Applications of C# and .NET*, you created
    two pairs of class libraries: one for the entity models and one for the Northwind
    database context, for either SQL Server or SQLite or both. You will now use them
    in your website project.'
  prefs: []
  type: TYPE_NORMAL
- en: Configure Entity Framework Core as a service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functionality such as Entity Framework Core database contexts that are needed
    by ASP.NET Core must be registered as a service during website startup. The code
    in the GitHub repository solution and below uses SQLite, but you can easily use
    SQL Server if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.Common.DataContext`
    project for either SQLite or SQL Server, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The project reference must go all on one line with no line break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.Web` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Startup.cs`, import namespaces to work with your entity model types, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a statement to the `ConfigureServices` method to register the `Northwind`
    database context class, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Web` project, in the `Pages` folder, open `Suppliers.cshtml.cs`,
    and import the namespace for our database context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SuppliersModel` class, add a private field to store the `Northwind`
    database context and a constructor to set it, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the `Suppliers` property to contain `Supplier` objects instead of `string`
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `OnGet` method, modify the statements to set the `Suppliers` property
    from the `Suppliers` property of the database context, sorted by country and then
    company name, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the contents of `Suppliers.cshtml` to import the `Packt.Shared` namespace
    and render multiple columns for each supplier, as shown highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5001/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Learn more about our suppliers** and note that the supplier table now
    loads from the database, as shown in *Figure 14.12*:![](img/B17442_15_12.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.12: The suppliers table loaded from the Northwind database'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating data using Razor Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will now add functionality to insert a new supplier.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a model to insert entities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, you will modify the supplier model so that it responds to HTTP `POST`
    requests when a visitor submits a form to insert a new supplier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` project, in the `Pages` folder, open `Suppliers.cshtml.cs`
    and import the following namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SuppliersModel` class, add a property to store a single supplier and
    a method named `OnPost` that adds the supplier to the `Suppliers` table in the
    Northwind database if its model is valid, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding code, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We added a property named `Supplier` that is decorated with the `[BindProperty]`
    attribute so that we can easily connect HTML elements on the web page to properties
    in the `Supplier` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a method that responds to HTTP `POST` requests. It checks that all
    property values conform to validation rules on the `Supplier` class entity model
    (such as `[Required]` and `[StringLength]`) and then adds the supplier to the
    existing table and saves changes to the database context. This will generate a
    SQL statement to perform the insert into the database. Then it redirects to the
    `Suppliers` page so that the visitor sees the newly added supplier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a form to insert a new supplier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, you will modify the Razor Page to define a form that a visitor can fill
    in and submit to insert a new supplier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Suppliers.cshtml`, add tag helpers after the `@model` declaration so that
    we can use tag helpers such as `asp-for` on this Razor Page, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the file, add a form to insert a new supplier, and use the
    `asp-for` tag helper to bind the `CompanyName`, `Country`, and `Phone` properties
    of the `Supplier` class to the input box, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `<form>` element with a `POST` method is normal HTML, so an `<input type="submit"
    />` element inside it will make an HTTP `POST` request back to the current page
    with values of any other elements inside that form.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An `<input>` element with a tag helper named `asp-for` enables data binding
    to the model behind the Razor Page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Learn more about our suppliers**, scroll down to the bottom of the page,
    enter `Bob's Burgers`, `USA`, and `(603) 555-4567`, and click **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you see a refreshed suppliers table with the new supplier added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Injecting a dependency service into a Razor Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a `.cshtml` Razor Page that does not have a code-behind file, then
    you can inject a dependency service using the `@inject` directive instead of constructor
    parameter injection, and then directly reference the injected database context
    using Razor syntax in the middle of the markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, add a new file named `Orders.cshtml`. (The Visual Studio
    item template is named **Razor Page - Empty** and it creates two files. Delete
    the `.cs` file.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Orders.cshtml`, write code to output the number of orders in the Northwind
    database, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `/orders` and note that you see that there are 830 orders in the
    Northwind database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Razor class libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything related to a Razor Page can be compiled into a class library for
    easier reuse in multiple projects. With ASP.NET Core 3.0 and later, this can include
    static files such as HTML, CSS, JavaScript libraries, and media assets such as
    image files. A website can either use the Razor Page's view as defined in the
    class library or override it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Razor class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a new Razor class library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project template: **Razor Class Library** / `razorclasslib`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Checkbox/switch: **Support pages and views** / `-s`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Razor.Employees`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-s` is short for the `--support-pages-and-views` switch that enables the class
    library to use Razor Pages and `.cshtml` file views.'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling compact folders for Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we implement our Razor class library, I want to explain a Visual Studio
    Code feature that confused some readers of a previous edition because the feature
    was added after publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The compact folders feature means that nested folders such as `/Areas/MyFeature/Pages/`
    are shown in a compact form if the intermediate folders in the hierarchy do not
    contain files, as shown in *Figure 14.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17442_15_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.13: Compact folders enabled or disabled'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to disable the Visual Studio Code compact folders feature,
    complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, navigate to **File** | **Preferences** | **Settings**. On macOS,
    navigate to **Code** | **Preferences** | **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Search** settings box, enter `compact`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clear the **Explorer: Compact Folders** checkbox, as shown in *Figure 14.14*:![Graphical
    user interface, text, application, email  Description automatically generated](img/B17442_15_14.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.14: Disabling compact folders for Visual Studio Code'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the **Settings** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing the employees feature using EF Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can add a reference to our entity models to get the employees to show
    in the Razor class library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Razor.Employees` project, add a project reference to the
    `Northwind.Common.DataContext` project for either SQLite or SQL Server and note
    the SDK is `Microsoft.NET.Sdk.Razor`, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The project reference must go all on one line with no line break. Also, do not
    mix our SQLite and SQL Server projects or you will see compiler errors. If you
    used SQL Server in the `Northwind.Web` project, then you must use SQL Server in
    the `Northwind.Razor.Employees` project as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.Razor.Employees` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Areas` folder, right-click the `MyFeature` folder, select **Rename**,
    enter the new name `PacktFeatures`, and press Enter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `PacktFeatures` folder, in the `Pages` subfolder, add a new file named
    `_ViewStart.cshtml`. (The Visual Studio item template is named **Razor View Start**.
    Or just copy it from the `Northwind.Web` project.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its content to inform this class library that any Razor Pages should
    look for a layout with the same name as used in the `Northwind.Web` project, as
    shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We do not need to create the `_Layout.cshtml` file in this project. It will
    use the one in its host project, for example, the one in the `Northwind.Web` project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Pages` subfolder, rename `Page1.cshtml` to `Employees.cshtml`, and rename
    `Page1.cshtml.cs` to `Employees.cshtml.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `Employees.cshtml.cs` to define a page model with an array of `Employee`
    entity instances loaded from the Northwind database, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `Employees.cshtml`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We import the `Packt.Shared` namespace so that we can use classes in it such
    as `Employee`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We add support for tag helpers so that we can use the `<partial>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We declare the `@model` type for this Razor Page to use the page model class
    that you just defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We enumerate through the `Employees` in the model, outputting each one using
    a partial view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a partial view to show a single employee
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `<partial>` tag helper was introduced in ASP.NET Core 2.1\. A partial view
    is like a piece of a Razor Page. You will create one in the next few steps to
    render a single employee:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Razor.Employees` project, in the `Pages` folder, create a
    `Shared` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Shared` folder, create a file named `_Employee.cshtml`. (The Visual
    Studio item template is named **Razor View - Empty**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `_Employee.cshtml`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the names of partial views start with an underscore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you put a partial view in the `Shared` folder, then it can be found automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model type for this partial view is a single `Employee` entity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Bootstrap card styles to output information about each employee.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using and testing a Razor class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will now reference and use the Razor class library in the website project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.Razor.Employees`
    project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `Pages\index.cshtml` to add a paragraph with a link to the Packt feature
    employees page after the link to the suppliers page, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website, visit the website using Chrome, and click the **Contact our
    employees** button to see the cards of employees, as shown in *Figure 14.15*:![](img/B17442_15_15.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.15: A list of employees from a Razor class library feature'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configuring services and the HTTP request pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built a website, we can return to the `Startup` configuration
    and review how services and the HTTP request pipeline work in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding endpoint routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In earlier versions of ASP.NET Core, the routing system and the extendable middleware
    system did not always work easily together; for example, if you wanted to implement
    a policy such as CORS in both middleware and MVC. Microsoft has invested in improving
    routing with a system named **endpoint routing** introduced with ASP.NET Core
    2.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Endpoint routing replaces the `IRouter`-based routing used
    in ASP.NET Core 2.1 and earlier. Microsoft recommends every older ASP.NET Core
    project migrates to endpoint routing if possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint routing is designed to enable better interoperability between frameworks
    that need routing, such as Razor Pages, MVC, or Web APIs, and middleware that
    needs to understand how routing affects them, such as localization, authorization,
    CORS, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint routing gets its name because it represents the route table as a compiled
    tree of endpoints that can be walked efficiently by the routing system. One of
    the biggest improvements is the performance of routing and action method selection.
  prefs: []
  type: TYPE_NORMAL
- en: It is on by default with ASP.NET Core 2.2 or later if compatibility is set to
    2.2 or later. Traditional routes registered using the `MapRoute` method or with
    attributes are mapped to the new system.
  prefs: []
  type: TYPE_NORMAL
- en: The new routing system includes a link generation service registered as a dependency
    service that does not need an `HttpContext`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring endpoint routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Endpoint routing requires a pair of calls to the `UseRouting` and `UseEndpoints`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UseRouting` marks the pipeline position where a routing decision is made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseEndpoints` marks the pipeline position where the selected endpoint is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middleware such as localization that runs in between these methods can see the
    selected endpoint and can switch to a different endpoint if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint routing uses the same route template syntax that has been used in ASP.NET
    MVC since 2010 and the `[Route]` attribute introduced with ASP.NET MVC 5 in 2013\.
    Migration often only requires changes to the `Startup` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: MVC controllers, Razor Pages, and frameworks such as SignalR used to be enabled
    by a call to `UseMvc` or similar methods, but they are now added inside the `UseEndpoints`
    method call because they are all integrated into the same routing system along
    with middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the endpoint routing configuration in our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Review the `Startup.cs` class file, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `Startup` class has two methods that are called automatically by the host
    to configure the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ConfigureServices` method registers services that can then be retrieved
    when the functionality they provide is needed using dependency injection. Our
    code registers two services: Razor Pages and an EF Core database context.'
  prefs: []
  type: TYPE_NORMAL
- en: Registering services in the ConfigureServices method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Common methods that register dependency services, including services that combine
    other method calls that register services, are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Services that it registers |'
  prefs: []
  type: TYPE_TB
- en: '| `AddMvcCore` | Minimum set of services necessary to route requests and invoke
    controllers. Most websites will need more configuration than this. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddAuthorization` | Authentication and authorization services. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddDataAnnotations` | MVC data annotations service. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddCacheTagHelper` | MVC cache tag helper service. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddRazorPages` | Razor Pages service including the Razor view engine. Commonly
    used in simple website projects. It calls the following additional methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AddApiExplorer` | Web API explorer service. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddCors` | CORS support for enhanced security. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddFormatterMappings` | Mappings between a URL format and its corresponding
    media type. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddControllers` | Controller services but not services for views or pages.
    Commonly used in ASP.NET Core Web API projects. It calls the following additional
    methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AddViews` | Support for `.cshtml` views including default conventions. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddRazorViewEngine` | Support for Razor view engine including processing
    the `@` symbol. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddControllersWithViews` | Controller, views, and pages services. Commonly
    used in ASP.NET Core MVC website projects. It calls the following additional methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings``AddViews``AddRazorViewEngine`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AddMvc` | Similar to `AddControllersWithViews`, but you should only use
    it for backward compatibility. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddDbContext<T>` | Your `DbContext` type and its optional `DbContextOptions<TContext>`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AddNorthwindContext` | A custom extension method we created to make it easier
    to register the `NorthwindContext` class for either SQLite or SQL Server based
    on the project referenced. |'
  prefs: []
  type: TYPE_TB
- en: You will see more examples of using these extension methods for registering
    services in the next few chapters when working with MVC and Web API services.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the HTTP request pipeline in the Configure method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Configure` method configures the HTTP request pipeline, which is made up
    of a connected sequence of delegates that can perform processing and then decide
    to either return a response themselves or pass processing on to the next delegate
    in the pipeline. Responses that come back can also be manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that delegates define a method signature that a delegate implementation
    can plug into. The delegate for the HTTP request pipeline is simple, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the input parameter is an `HttpContext`. This provides access
    to everything you might need to process the incoming HTTP request, including the
    URL path, query string parameters, cookies, and user agent.
  prefs: []
  type: TYPE_NORMAL
- en: These delegates are often called middleware because they sit in between the
    browser client and the website or service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Middleware delegates are configured using one of the following methods or a
    custom method that calls them itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Run`: Adds a middleware delegate that terminates the pipeline by immediately
    returning a response instead of calling the next middleware delegate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Map`: Adds a middleware delegate that creates a branch in the pipeline when
    there is a matching request usually based on a URL path like `/hello`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Use`: Adds a middleware delegate that forms part of the pipeline so it can
    decide if it wants to pass the request to the next delegate in the pipeline and
    it can modify the request and response before and after the next delegate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For convenience, there are many extension methods that make it easier to build
    the pipeline, for example, `UseMiddleware<T>`, where `T` is a class that has:'
  prefs: []
  type: TYPE_NORMAL
- en: A constructor with a `RequestDelegate` parameter that will be passed the next
    pipeline component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An `Invoke` method with a `HttpContext` parameter and returns a `Task`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summarizing key middleware extension methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Key middleware extension methods used in our code include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UseDeveloperExceptionPage`: Captures synchronous and asynchronous `System.Exception`
    instances from the pipeline and generates HTML error responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseHsts`: Adds middleware for using HSTS, which adds the `Strict-Transport-Security`
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseRouting`: Adds middleware that defines a point in the pipeline where routing
    decisions are made and must be combined with a call to `UseEndpoints` where the
    processing is then executed. This means that for our code, any URL paths that
    match `/` or `/index` or `/suppliers` will be mapped to Razor Pages and a match
    on `/hello` will be mapped to the anonymous delegate. Any other URL paths will
    be passed on to the next delegate for matching, for example, static files. This
    is why, although it looks like the mapping for Razor Pages and `/hello` happen
    after static files in the pipeline, they actually take priority because the call
    to `UseRouting` happens before `UseStaticFiles`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseHttpsRedirection`: Adds middleware for redirecting HTTP requests to HTTPS,
    so in our code a request for `http://localhost:5000` would be modified to `https://localhost:5001`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseDefaultFiles`: Adds middleware that enables default file mapping on the
    current path, so in our code it would identify files such as `index.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseStaticFiles`: Adds middleware that looks in `wwwroot` for static files
    to return in the HTTP response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UseEndpoints`: Adds middleware to execute to generate responses from decisions
    made earlier in the pipeline. Two endpoints are added, as shown in the following
    sub-list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapRazorPages`: Adds middleware that will map URL paths such as `/suppliers`
    to a Razor Page file in the `/Pages` folder named `suppliers.cshtml` and return
    the results as the HTTP response.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapGet`: Adds middleware that will map URL paths such as `/hello` to an inline
    delegate that writes plain text directly to the HTTP response.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the HTTP pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTTP request and response pipeline can be visualized as a sequence of request
    delegates, called one after the other, as shown in the following simplified diagram,
    which excludes some middleware delegates, such as `UseHsts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B17442_15_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.16: The HTTP request and response pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, the `UseRouting` and `UseEndpoints` methods must be used
    together. Although the code to define the mapped routes such as `/hello` are written
    in `UseEndpoints`, the decision about whether an incoming HTTP request URL path
    matches and therefore which endpoint to execute is made at the `UseRouting` point
    in the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an anonymous inline delegate as middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A delegate can be specified as an inline anonymous method. We will register
    one that plugs into the pipeline after routing decisions for endpoints have been
    made.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will output which endpoint was chosen, as well as handling one specific
    route: `/bonjour`. If that route is matched, it will respond with plain text,
    without calling any further into the pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Startup.cs`, statically import `Console`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add statements after the call to `UseRouting` and before the call to `UseHttpsRedirection`
    to use an anonymous method as a middleware delegate, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome, navigate to `https://localhost:5001/`, look at the console output
    and note that there was a match on an endpoint route `/`, it was processed as
    `/index`, and the `Index.cshtml` Razor Page was executed to return the response,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to `https://localhost:5001/suppliers` and note that you can see that
    there was a match on an endpoint route `/Suppliers` and the `Suppliers.cshtml`
    Razor Page was executed to return the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to `https://localhost:5001/index` and note that there was a match
    on an endpoint route `/index` and the `Index.cshtml` Razor Page was executed to
    return the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to `https://localhost:5001/index.html` and note that there is no output
    written to the console because there was no match on an endpoint route but there
    was a match for a static file, so it was returned as the response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/bonjour` and note that there is no output
    written to the console because there was no match on an endpoint route. Instead,
    our delegate matched on `/bonjour`, wrote directly to the response stream, and
    returned with no further processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: List six method names that can be specific in an HTTP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ASP.NET Core, what is the `Startup` class used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the acronym HSTS stand for and what does it do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you enable static HTML pages for a website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you mix C# code into the middle of HTML to create a dynamic page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you define shared layouts for Razor Pages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you separate the markup from the code-behind in a Razor Page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you configure an Entity Framework Core data context for use with an ASP.NET
    Core website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you reuse Razor Pages with ASP.NET Core 2.2 or later?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 14.2 – Practice building a data-driven web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a Razor Page to the `Northwind.Web` website that enables the user to see
    a list of customers grouped by country. When the user clicks on a customer record,
    they then see a page showing the full contact details of that customer, and a
    list of their orders.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3 – Practice building web pages for console apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reimplement some of the console apps from earlier chapters as Razor Pages, for
    example, from *Chapter 4*, *Writing, Debugging, and Testing Functions*, provide
    a web user interface to output times tables, calculate tax, and generate factorials
    and the Fibonacci sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.4 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the foundations of web development using
    HTTP, how to build a simple website that returns static files, and you used ASP.NET
    Core Razor Pages with Entity Framework Core to create web pages that were dynamically
    generated from information in a database.
  prefs: []
  type: TYPE_NORMAL
- en: We reviewed the HTTP request and response pipeline, what the helper extension
    methods do, and how you can add your own middleware that affects processing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build more complex websites using
    ASP.NET Core MVC, which separates the technical concerns of building a website
    into models, views, and controllers to make them easier to manage.
  prefs: []
  type: TYPE_NORMAL
