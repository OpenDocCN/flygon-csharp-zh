- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Building Websites Using ASP.NET Core Razor Pages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core Razor Pages构建网站
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using Microsoft ASP.NET Core. You will learn about building simple
    websites using the ASP.NET Core Razor Pages feature introduced with ASP.NET Core
    2.0 and the Razor class library feature introduced with ASP.NET Core 2.1.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于使用Microsoft ASP.NET Core在服务器端构建具有现代HTTP架构的网站。您将学习使用ASP.NET Core 2.0引入的ASP.NET
    Core Razor Pages功能以及ASP.NET Core 2.1引入的Razor类库功能构建简单的网站。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding web development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Web开发
- en: Understanding ASP.NET Core
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ASP.NET Core
- en: Exploring ASP.NET Core Razor Pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索ASP.NET Core Razor Pages
- en: Using Entity Framework Core with ASP.NET Core
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Entity Framework Core与ASP.NET Core
- en: Using Razor class libraries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Razor类库
- en: Configuring services and the HTTP request pipeline
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置服务和HTTP请求管道
- en: Understanding web development
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Web开发
- en: Developing for the web means developing with **Hypertext Transfer Protocol**
    (**HTTP**), so we will start by reviewing this important foundational technology.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Web意味着使用**超文本传输协议**（**HTTP**）进行开发，因此我们将从回顾这一重要的基础技术开始。
- en: Understanding HTTP
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解HTTP
- en: To communicate with a web server, the client, also known as the **user agent**,
    makes calls over the network using HTTP. As such, HTTP is the technical underpinning
    of the web. So, when we talk about websites and web services, we mean that they
    use HTTP to communicate between a client (often a web browser) and a server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与Web服务器通信，客户端，也称为**用户代理**，使用HTTP通过网络进行调用。因此，HTTP是Web的技术基础。所以，当我们谈论网站和Web服务时，我们的意思是它们使用HTTP在客户端（通常是Web浏览器）和服务器之间进行通信。
- en: 'A client makes an HTTP request for a resource, such as a page, uniquely identified
    by a **Uniform Resource Locator** (**URL**), and the server sends back an HTTP
    response, as shown in *Figure 14.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端对资源（如页面）发出HTTP请求，该资源由**统一资源定位符**（**URL**）唯一标识，服务器发送回HTTP响应，如*图14.1*所示：
- en: '![Graphical user interface, text  Description automatically generated](img/B17442_15_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本 描述自动生成](img/B17442_15_01.png)'
- en: 'Figure 14.1: An HTTP request and response'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：HTTP请求和响应
- en: You can use Google Chrome and other browsers to record requests and responses.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Google Chrome和其他浏览器记录请求和响应。
- en: '**Good Practice**: Google Chrome is available on more operating systems than
    any other browser, and it has powerful, built-in developer tools, so it is a good
    first choice of browser for testing your websites. Always test your web application
    with Chrome and at least two other browsers, for example, Firefox and Safari for
    macOS and iPhone. Microsoft Edge switched from using Microsoft''s own rendering
    engine to using Chromium in 2019, so it is less important to test with it. If
    Microsoft''s Internet Explorer is used at all, it tends to mostly be inside organizations
    for intranets.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：Google Chrome在比任何其他浏览器更多的操作系统上可用，并且它具有强大的内置开发工具，因此它是测试网站的首选浏览器。始终使用Chrome以及至少另外两种浏览器（例如，macOS和iPhone上的Firefox和Safari）测试您的Web应用程序。Microsoft
    Edge在2019年从使用Microsoft自己的渲染引擎切换到使用Chromium，因此测试它的重要性较低。如果使用Microsoft的Internet
    Explorer，则通常主要用于组织内部网。'
- en: Understanding the components of a URL
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解URL的组成部分
- en: 'A URL is made up of several components:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: URL由几个部分组成：
- en: '**Scheme**: `http` (clear text) or `https` (encrypted).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案**：`http`（明文）或`https`（加密）。'
- en: '**Domain**: For a production website or service, the **top-level domain** (**TLD**)
    might be `example.com`. You might have subdomains such as `www`, `jobs`, or `extranet`.
    During development, you typically use `localhost` for all websites and services.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：对于生产网站或服务，**顶级域**（**TLD**）可能是`example.com`。您可能有子域，例如`www`、`jobs`或`extranet`。在开发过程中，您通常为所有网站和服务使用`localhost`。'
- en: '**Port number**: For a production website or service, `80` for `http`, `443`
    for `https`. These port numbers are usually inferred from the scheme. During development,
    other port numbers are commonly used, such as `5000`, `5001`, and so on, to differentiate
    between websites and services that all use the shared domain `localhost`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口号**：对于生产网站或服务，`http`为`80`，`https`为`443`。这些端口号通常从方案中推断出来。在开发过程中，通常使用其他端口号，例如`5000`、`5001`等，以区分使用共享域`localhost`的所有网站和服务。'
- en: '**Path**: A relative path to a resource, for example, `/customers/germany`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：到资源的相对路径，例如，`/customers/germany`。'
- en: '**Query string**: A way to pass parameter values, for example, `?country=Germany&searchtext=shoes`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询字符串**：传递参数值的一种方式，例如，`?country=Germany&searchtext=shoes`。'
- en: '**Fragment**: A reference to an element on a web page using its `id`, for example,
    `#toc`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片段**：通过其`id`引用网页上的元素，例如，`#toc`。'
- en: Assigning port numbers for projects in this book
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为本书中的项目分配端口号
- en: 'In this book, we will use the domain `localhost` for all websites and services,
    so we will use port numbers to differentiate projects when multiple need to execute
    at the same time, as shown in the following table:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将为所有网站和服务使用域名`localhost`，因此当多个项目需要同时执行时，我们将使用端口号来区分项目，如下表所示：
- en: '| Project | Description | Port numbers |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 项目 | 描述 | 端口号 |'
- en: '| `Northwind.Web` | ASP.NET Core Razor Pages website | `5000 HTTP`, `5001 HTTPS`
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Web` | ASP.NET Core Razor Pages 网站 | `5000 HTTP`, `5001 HTTPS`
    |'
- en: '| `Northwind.Mvc` | ASP.NET Core MVC website | `5000 HTTP`, `5001 HTTPS` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Mvc` | ASP.NET Core MVC 网站 | `5000 HTTP`, `5001 HTTPS` |'
- en: '| `Northwind.WebApi` | ASP.NET Core Web API service | `5002 HTTPS`, `5008 HTTP`
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.WebApi` | ASP.NET Core Web API 服务 | `5002 HTTPS`, `5008 HTTP`
    |'
- en: '| `Minimal.WebApi` | ASP.NET Core Web API (minimal) | `5003 HTTPS` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `Minimal.WebApi` | ASP.NET Core Web API（最小化） | `5003 HTTPS` |'
- en: '| `Northwind.OData` | ASP.NET Core OData service | `5004 HTTPS` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.OData` | ASP.NET Core OData 服务 | `5004 HTTPS` |'
- en: '| `Northwind.GraphQL` | ASP.NET Core GraphQL service | `5005 HTTPS` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.GraphQL` | ASP.NET Core GraphQL 服务 | `5005 HTTPS` |'
- en: '| `Northwind.gRPC` | ASP.NET Core gRPC service | `5006 HTTPS` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.gRPC` | ASP.NET Core gRPC 服务 | `5006 HTTPS` |'
- en: '| `Northwind.AzureFuncs` | Azure Functions nanoservice | `7071 HTTP` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.AzureFuncs` | Azure Functions 纳米服务 | `7071 HTTP` |'
- en: Using Google Chrome to make HTTP requests
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google Chrome 发起 HTTP 请求
- en: 'Let''s explore how to use Google Chrome to make HTTP requests:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何使用 Google Chrome 发起 HTTP 请求：
- en: Start Google Chrome.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Google Chrome。
- en: Navigate to **More tools** | **Developer tools**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**更多工具** | **开发者工具**。
- en: Click the **Network** tab, and Chrome should immediately start recording the
    network traffic between your browser and any web servers (note the red circle),
    as shown in *Figure 14.2*:![](img/B17442_15_02.png)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**网络**标签，Chrome 应立即开始记录浏览器与任何 Web 服务器之间的网络流量（注意红色圆圈），如图 *14.2* 所示：![](img/B17442_15_02.png)
- en: 'Figure 14.2: Chrome Developer Tools recording network traffic'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.2：Chrome 开发者工具记录网络流量
- en: 'In Chrome''s address box, enter the address of Microsoft''s website for learning
    ASP.NET, as shown in the following URL:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 地址栏中，输入微软学习 ASP.NET 的网站地址，如下所示：
- en: '[https://dotnet.microsoft.com/learn/aspnet](https://dotnet.microsoft.com/learn/aspnet)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/learn/aspnet](https://dotnet.microsoft.com/learn/aspnet)'
- en: In Developer Tools, in the list of recorded requests, scroll to the top and
    click on the first entry, the row where the **Type** is **document**, as shown
    in *Figure 14.3*:![](img/B17442_15_03.png)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发者工具中，在记录的请求列表中滚动到顶部，点击第一个条目，即**类型**为**文档**的行，如图 *14.3* 所示：![](img/B17442_15_03.png)
- en: 'Figure 14.3: Recorded requests in Developer Tools'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.3：开发者工具中记录的请求
- en: On the right-hand side, click on the **Headers** tab, and you will see details
    about **Request Headers** and **Response Headers**, as shown in *Figure 14.4*:![](img/B17442_15_04.png)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧，点击**头部**标签，您将看到有关**请求头部**和**响应头部**的详细信息，如图 *14.4* 所示：![](img/B17442_15_04.png)
- en: 'Figure 14.4: Request and response headers'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.4：请求和响应头部
- en: 'Note the following aspects:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下方面：
- en: '**Request Method** is `GET`. Other HTTP methods that you could see here include
    `POST`, `PUT`, `DELETE`, `HEAD`, and `PATCH`.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求方法**为`GET`。其他可能在此处看到的 HTTP 方法包括`POST`、`PUT`、`DELETE`、`HEAD`和`PATCH`。'
- en: '**Status Code** is `200 OK`. This means that the server found the resource
    that the browser requested and has returned it in the body of the response. Other
    status codes that you might see in response to a `GET` request include `301 Moved
    Permanently`, `400 Bad Request`, `401 Unauthorized`, and `404 Not Found`.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态码**为`200 OK`。这意味着服务器找到了浏览器请求的资源，并将其作为响应的主体返回。其他可能看到的`GET`请求响应状态码包括`301
    永久移动`、`400 错误请求`、`401 未授权`和`404 未找到`。'
- en: '**Request Headers** sent by the browser to the web server include:'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求头部**由浏览器发送给 Web 服务器，包括：'
- en: '**accept**, which lists what formats the browser accepts. In this case, the
    browser is saying it understands HTML, XHTML, XML, and some image formats, but
    it will accept all other files (`*/*`). Default weightings, also known as quality
    values, are `1.0`. XML is specified with a quality value of `0.9` so it is preferred
    less than HTML or XHTML. All other file types are given a quality value of `0.8`
    so are least preferred.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**accept**，列出了浏览器接受的格式。在这种情况下，浏览器表示它理解HTML、XHTML、XML和一些图像格式，但它将接受所有其他文件（`*/*`）。默认权重，也称为质量值，是`1.0`。XML的质量值指定为`0.9`，因此其优先级低于HTML或XHTML。所有其他文件类型的质量值为`0.8`，因此优先级最低。'
- en: '**accept-encoding**, which lists what compression algorithms the browser understands,
    in this case, GZIP, DEFLATE, and Brotli.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**accept-encoding**，列出了浏览器理解的压缩算法，在这种情况下，包括GZIP、DEFLATE和Brotli。'
- en: '**accept-language**, which lists the human languages it would prefer the content
    to use. In this case, US English, which has a default quality value of `1.0`,
    then any dialect of English that has an explicitly specified quality value of
    `0.9`, and then any dialect of Swedish that has an explicitly specified quality
    value of `0.8`.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**accept-language**，列出了浏览器希望内容使用的语言。在这种情况下，首先是美国英语，其默认质量值为`1.0`，其次是任何具有明确指定质量值`0.9`的英语方言，然后是任何具有明确指定质量值`0.8`的瑞典语方言。'
- en: '**Response Headers**, `content-encoding` tells me the server has sent back
    the HTML web page response compressed using the GZIP algorithm because it knows
    that the client can decompress that format. (This is not visible in *Figure 14.4*
    because there is not enough space to expand the **Response Headers** section.)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应头**，`content-encoding`告诉我服务器已使用GZIP算法压缩HTML网页响应，因为它知道客户端可以解压缩该格式。（这在*图14.4*中不可见，因为没有足够的空间展开**响应头**部分。）'
- en: Close Chrome.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome。
- en: Understanding client-side web development technologies
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解客户端网页开发技术
- en: 'When building websites, a developer needs to know more than just C# and .NET.
    On the client (that is, in the web browser), you will use a combination of the
    following technologies:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网站时，开发者需要了解的不仅仅是C#和.NET。在客户端（即在网页浏览器中），您将使用以下技术的组合：
- en: '**HTML5**: This is used for the content and structure of a web page.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5**：用于网页的内容和结构。'
- en: '**CSS3**: This is used for the styles applied to elements on the web page.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS3**：用于网页上元素的样式。'
- en: '**JavaScript**: This is used to code any business logic needed on the web page,
    for example, validating form input or making calls to a web service to fetch more
    data needed by the web page.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**：用于编写网页所需的任何业务逻辑，例如验证表单输入或调用网页服务以获取网页所需的其他数据。'
- en: Although HTML5, CSS3, and JavaScript are the fundamental components of frontend
    web development, there are many additional technologies that can make frontend
    web development more productive, including Bootstrap, the world's most popular
    frontend open-source toolkit, and CSS preprocessors such as SASS and LESS for
    styling, Microsoft's TypeScript language for writing more robust code, and JavaScript
    libraries such as jQuery, Angular, React, and Vue. All these higher-level technologies
    ultimately translate or compile to the underlying three core technologies, so
    they work across all modern browsers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管HTML5、CSS3和JavaScript是前端网页开发的基本组成部分，但还有许多其他技术可以使前端网页开发更高效，包括全球最受欢迎的前端开源工具包Bootstrap，以及用于样式的CSS预处理器如SASS和LESS，用于编写更健壮代码的Microsoft
    TypeScript语言，以及JavaScript库如jQuery、Angular、React和Vue。所有这些更高级别的技术最终都会翻译或编译到基础的三个核心技术，因此它们在所有现代浏览器中都能工作。
- en: As part of the build and deploy process, you will likely use technologies such
    as Node.js; Node Package Manager (npm) and Yarn, which are both client-side package
    managers; and webpack, which is a popular module bundler, a tool for compiling,
    transforming, and bundling website source files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为构建和部署过程的一部分，您可能会使用诸如Node.js；客户端包管理器npm和Yarn；以及webpack，这是一个流行的模块捆绑器，用于编译、转换和捆绑网站源文件的工具。
- en: Understanding ASP.NET Core
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ASP.NET Core
- en: 'Microsoft ASP.NET Core is part of a history of Microsoft technologies used
    to build websites and services that have evolved over the years:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft ASP.NET Core是微软多年来用于构建网站和服务的一系列技术的一部分：
- en: '**Active Server Pages** (**ASP**) was released in 1996 and was Microsoft''s
    first attempt at a platform for dynamic server-side execution of website code.
    ASP files contain a mix of HTML and code that executes on the server written in
    the VBScript language.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Active Server Pages**（**ASP**）于1996年发布，是微软首次尝试为动态服务器端执行网站代码提供的平台。ASP文件包含HTML和服务器端执行的VBScript代码的混合体。'
- en: '**ASP.NET Web Forms** was released in 2002 with the .NET Framework and was
    designed to enable non-web developers, such as those familiar with Visual Basic,
    to quickly create websites by dragging and dropping visual components and writing
    event-driven code in Visual Basic or C#. Web Forms should be avoided for new .NET
    Framework web projects in favor of ASP.NET MVC.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web Forms** 于2002年随.NET Framework一同发布，旨在让非Web开发者（如熟悉Visual Basic的开发者）通过拖放可视组件和编写Visual
    Basic或C#的事件驱动代码快速创建网站。对于新的.NET Framework Web项目，应避免使用Web Forms，转而采用ASP.NET MVC。'
- en: '**Windows Communication Foundation** (**WCF**) was released in 2006 and enables
    developers to build SOAP and REST services. SOAP is powerful but complex, so it
    should be avoided unless you need advanced features, such as distributed transactions
    and complex messaging topologies.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Communication Foundation**（**WCF**）于2006年发布，使开发者能够构建SOAP和REST服务。SOAP功能强大但复杂，除非需要高级特性（如分布式事务和复杂的消息拓扑），否则应避免使用。'
- en: '**ASP.NET MVC** was released in 2009 to cleanly separate the concerns of web
    developers between the **models**, which temporarily store the data; the **views**,
    which present the data using various formats in the UI; and the **controllers**,
    which fetch the model and pass it to a view. This separation enables improved
    reuse and unit testing.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET MVC** 于2009年发布，旨在清晰地将Web开发者的关注点分离为**模型**（临时存储数据）、**视图**（以各种格式在UI中呈现数据）和**控制器**（获取模型并将其传递给视图）。这种分离提高了代码复用性和单元测试能力。'
- en: '**ASP.NET Web API** was released in 2012 and enables developers to create HTTP
    services (aka REST services) that are simpler and more scalable than SOAP services.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web API** 于2012年发布，使开发者能够创建比SOAP服务更简单、更可扩展的HTTP服务（即REST服务）。'
- en: '**ASP.NET SignalR** was released in 2013 and enables real-time communication
    in websites by abstracting underlying technologies and techniques, such as WebSockets
    and Long Polling. This enables website features such as live chat or updates to
    time-sensitive data such as stock prices across a wide variety of web browsers,
    even when they do not support an underlying technology such as WebSockets.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET SignalR** 于2013年发布，通过抽象底层技术（如WebSockets和长轮询）实现网站的实时通信。这使得网站能够提供如实时聊天或对时间敏感数据（如股票价格）的更新等功能，即使在不支持WebSockets等底层技术的多种浏览器上也能运行。'
- en: '**ASP.NET Core** was released in 2016 and combines modern implementations of
    .NET Framework technologies such as MVC, Web API, and SignalR, with newer technologies
    such as Razor Pages, gRPC, and Blazor, all running on modern .NET. Therefore,
    it can execute cross-platform. ASP.NET Core has many project templates to get
    you started with its supported technologies.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core** 于2016年发布，它将.NET Framework的现代实现（如MVC、Web API和SignalR）与新技术（如Razor
    Pages、gRPC和Blazor）相结合，全部运行在现代.NET上，因此支持跨平台执行。ASP.NET Core提供了多种项目模板，帮助你快速上手其支持的技术。'
- en: '**Good Practice**: Choose ASP.NET Core to develop websites and services because
    it includes web-related technologies that are modern and cross-platform.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：选择ASP.NET Core开发网站和服务，因为它包含了现代且跨平台的Web相关技术。'
- en: ASP.NET Core 2.0 to 2.2 can run on .NET Framework 4.6.1 or later (Windows only)
    as well as .NET Core 2.0 or later (cross-platform). ASP.NET Core 3.0 only supports
    .NET Core 3.0\. ASP.NET Core 6.0 only supports .NET 6.0.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0至2.2版本既可运行于.NET Framework 4.6.1及以上版本（仅限Windows），也可运行于.NET Core
    2.0及以上版本（跨平台）。ASP.NET Core 3.0仅支持.NET Core 3.0。ASP.NET Core 6.0仅支持.NET 6.0。
- en: Classic ASP.NET versus modern ASP.NET Core
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经典ASP.NET与现代ASP.NET Core的对比
- en: Until now, ASP.NET has been built on top of a large assembly in the .NET Framework
    named `System.Web.dll` and it is tightly coupled to Microsoft's Windows-only web
    server named **Internet Information Services** (**IIS**). Over the years, this
    assembly has accumulated a lot of features, many of which are not suitable for
    modern cross-platform development.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，ASP.NET一直构建在.NET Framework中的一个大型程序集`System.Web.dll`之上，并与微软的Windows专用Web服务器**Internet
    Information Services**（**IIS**）紧密耦合。多年来，该程序集积累了许多功能，其中许多功能不适用于现代的跨平台开发。
- en: ASP.NET Core is a major redesign of ASP.NET. It removes the dependency on the
    `System.Web.dll` assembly and IIS and is composed of modular lightweight packages,
    just like the rest of modern .NET. Using IIS as the web server is still supported
    by ASP.NET Core but there is a better option.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core是对ASP.NET的重大重新设计。它去除了对`System.Web.dll`程序集和IIS的依赖，并由模块化轻量级包组成，就像现代.NET的其他部分一样。虽然ASP.NET
    Core仍然支持使用IIS作为Web服务器，但还有更好的选择。
- en: You can develop and run ASP.NET Core applications cross-platform on Windows,
    macOS, and Linux. Microsoft has even created a cross-platform, super-performant
    web server named **Kestrel**, and the entire stack is open source.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Windows、macOS和Linux上跨平台开发和运行ASP.NET Core应用程序。微软甚至创建了一个跨平台的、高性能的Web服务器，名为**Kestrel**，整个技术栈都是开源的。
- en: ASP.NET Core 2.2 or later projects default to the new in-process hosting model.
    This gives a 400% performance improvement when hosting in Microsoft IIS, but Microsoft
    still recommends using Kestrel for even better performance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2及以上版本的项目默认采用新的进程内托管模型。这使得在Microsoft IIS中托管时性能提升了400%，但微软仍建议使用Kestrel以获得更佳性能。
- en: Creating an empty ASP.NET Core project
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个空的ASP.NET Core项目
- en: We will create an ASP.NET Core project that will show a list of suppliers from
    the Northwind database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个ASP.NET Core项目，该项目将显示Northwind数据库中的供应商列表。
- en: 'The `dotnet` tool has many project templates that do a lot of work for you,
    but it can be difficult to know which works best for a given situation, so we
    will start with the empty website project template and then add features step
    by step so that you can understand all the pieces:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet`工具提供了许多项目模板，这些模板为你做了很多工作，但很难知道在特定情况下哪个最适合，因此我们将从空网站项目模板开始，然后逐步添加功能，以便你可以理解所有组件：'
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你偏好的代码编辑器添加一个新项目，如下表所定义：
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Empty** / `web`
- en: 'Language: C#'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 语言：C#
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Web`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Web`
- en: For Visual Studio 2022, leave all other options as their defaults, for example,
    **Configure for HTTPS** selected, and **Enable Docker** cleared
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Visual Studio 2022，保持所有其他选项为其默认设置，例如，选中**为HTTPS配置**，未选中**启用Docker**。
- en: In Visual Studio Code, select `Northwind.Web` as the active OmniSharp project.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Northwind.Web`作为活动的OmniSharp项目。
- en: Build the `Northwind.Web` project.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Web`项目。
- en: 'Open the `Northwind.Web.csproj` file and note that the project is like a class
    library except that the SDK is `Microsoft.NET.Sdk.Web`, as shown highlighted in
    the following markup:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.Web.csproj`文件，并注意到该项目类似于类库，只是其SDK为`Microsoft.NET.Sdk.Web`，如下所示高亮显示：
- en: '[PRE0]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are using Visual Studio 2022, in **Solution Explorer**, toggle **Show
    All Files**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Visual Studio 2022，在**解决方案资源管理器**中，切换**显示所有文件**。
- en: 'Expand the `obj` folder, expand the `Debug` folder, expand the `net6.0` folder,
    select the `Northwind.Web.GlobalUsings.g.cs` file, and note the implicitly imported
    namespaces include all the ones for a console app or class library, as well as
    some ASP.NET Core ones, such as `Microsoft.AspNetCore.Builder`, as shown in the
    following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`obj`文件夹，展开`Debug`文件夹，展开`net6.0`文件夹，选择`Northwind.Web.GlobalUsings.g.cs`文件，并注意到隐式导入的命名空间包括所有控制台应用或类库的命名空间，以及一些ASP.NET
    Core的命名空间，如`Microsoft.AspNetCore.Builder`，如下所示：
- en: '[PRE1]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Collapse the `obj` folder.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 折叠`obj`文件夹。
- en: 'Open `Program.cs`, and note the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`，并注意以下内容：
- en: An ASP.NET Core project is like a top-level console application, with a hidden
    `Main` method as its entry point that has an argument passed using the name `args`.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core项目类似于顶级控制台应用程序，其入口点是一个隐藏的`Main`方法，该方法通过名为`args`的参数传递。
- en: It calls `WebApplication.CreateBuilder`, which creates a host for the website
    using defaults for a web host that is then built.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它调用`WebApplication.CreateBuilder`，该方法使用Web主机的默认设置创建一个网站主机，然后构建该主机。
- en: 'The website will respond to all HTTP `GET` requests with plain text: `Hello
    World!`.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该网站将对所有HTTP `GET`请求做出响应，返回纯文本：`Hello World!`。
- en: 'The call to the `Run` method is a blocking call, so the hidden `Main` method
    does not return until the web server stops running, as shown in the following
    code:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`Run`方法是一个阻塞调用，因此隐藏的`Main`方法直到Web服务器停止运行才返回，如下所示：
- en: '[PRE2]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At the bottom of the file, add a statement to write a message to the console
    after the call to the `Run` method and therefore after the web server has stopped,
    as shown highlighted in the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部，添加一条语句，在调用 `Run` 方法后（即 Web 服务器停止后）向控制台写入一条消息，如下所示高亮显示：
- en: '[PRE3]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing and securing the website
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和保护网站
- en: We will now test the functionality of the ASP.NET Core Empty website project.
    We will also enable encryption of all traffic between the browser and web server
    for privacy by switching from HTTP to HTTPS. HTTPS is the secure encrypted version
    of HTTP.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将测试 ASP.NET Core 空网站项目的功能，并通过从 HTTP 切换到 HTTPS 来启用浏览器和 Web 服务器之间所有流量的加密，以保护隐私。HTTPS
    是 HTTP 的安全加密版本。
- en: 'For Visual Studio:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Visual Studio：
- en: In the toolbar, make sure that **Northwind.Web** is selected rather than **IIS
    Express** or **WSL**, and switch the **Web Browser (Microsoft Edge)** to **Google
    Chrome**, as shown in *Figure 14.5*:![](img/B17442_15_05.png)
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，确保选中**Northwind.Web** 而不是 **IIS Express** 或 **WSL**，并将**Web 浏览器（Microsoft
    Edge）**切换到**Google Chrome**，如*图 14.5* 所示：![](img/B17442_15_05.png)
- en: 'Figure 14.5: Selecting the Northwind.Web profile with its Kestrel web server
    in Visual Studio'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.5：在 Visual Studio 中选择带有 Kestrel Web 服务器的 Northwind.Web 配置文件
- en: Navigate to **Debug** | **Start Without Debugging…**.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**调试** | **开始执行(不调试)…**。
- en: The first time you start a secure website, you will be prompted that your project
    is configured to use SSL, and to avoid warnings in the browser you can choose
    to trust the self-signed certificate that ASP.NET Core has generated. Click **Yes**.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首次启动安全网站时，系统会提示你的项目已配置为使用 SSL，为了避免浏览器警告，你可以选择信任 ASP.NET Core 生成的自签名证书。点击**是**。
- en: When you see the **Security Warning** dialog box, click **Yes** again.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当看到**安全警告**对话框时，再次点击**是**。
- en: For Visual Studio Code, in **TERMINAL**, enter the `dotnet run` command.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Visual Studio Code，在**终端**中输入 `dotnet run` 命令。
- en: 'In either Visual Studio''s command prompt window or Visual Studio Code''s terminal,
    note the Kestrel web server has started listening on random ports for HTTP and
    HTTPS, that you can press Ctrl + C to shut down the Kestrel web server, and the
    hosting environment is `Development`, as shown in the following output:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的命令提示窗口或 Visual Studio Code 的终端中，注意 Kestrel Web 服务器已开始在随机端口上监听
    HTTP 和 HTTPS，你可以按 Ctrl + C 关闭 Kestrel Web 服务器，并且托管环境为 `Development`，如下所示：
- en: '[PRE4]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Visual Studio will also start your chosen browser automatically. If you are
    using Visual Studio Code, you will have to start Chrome manually.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio 还会自动启动你选择的浏览器。如果你使用的是 Visual Studio Code，则需要手动启动 Chrome。
- en: Leave the web server running.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持 Web 服务器运行。
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，打开**开发者工具**，然后点击**网络**标签。
- en: Enter the address `http://localhost:5000/`, or whatever port number was assigned
    to HTTP, and note the response is `Hello World!` in plain text, from the cross-platform
    Kestrel web server, as shown in *Figure 14.6*:![](img/B17442_15_06.png)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `http://localhost:5000/`，或分配给 HTTP 的任何端口号，并注意响应是来自跨平台 Kestrel Web 服务器的
    `Hello World!` 纯文本，如*图 14.6* 所示：![](img/B17442_15_06.png)
- en: 'Figure 14.6: Plain text response from http://localhost:5000/'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.6：来自 http://localhost:5000/ 的纯文本响应
- en: Chrome also requests a `favicon.ico` file automatically to show in the browser
    tab but this is missing so it shows as a `404 Not Found` error.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Chrome 也会自动请求一个 `favicon.ico` 文件以显示在浏览器标签页中，但该文件缺失，因此显示为 `404 Not Found` 错误。
- en: Enter the address `https://localhost:5001/`, or whatever port number was assigned
    to HTTPS, and note if you are not using Visual Studio or if you clicked **No**
    when prompted to trust the SSL certificate, then the response is a privacy error,
    as shown in *Figure 14.7*:![Graphical user interface, application  Description
    automatically generated](img/B17442_15_07.png)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `https://localhost:5001/`，或分配给 HTTPS 的任何端口号，并注意如果你没有使用 Visual Studio 或在被提示信任
    SSL 证书时点击了**否**，则响应将是一个隐私错误，如*图 14.7* 所示：![图形用户界面，应用程序 自动生成描述](img/B17442_15_07.png)
- en: 'Figure 14.7: Privacy error showing SSL encryption has not been enabled with
    a certificate'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.7：显示 SSL 加密未使用证书启用的隐私错误
- en: You will see this error when you have not configured a certificate that the
    browser can trust to encrypt and decrypt HTTPS traffic (and so if you do not see
    this error, it is because you have already configured a certificate).
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你未配置浏览器可信任的证书来加密和解密 HTTPS 流量，则会看到此错误（如果你未看到此错误，则是因为你已经配置了证书）。
- en: In a production environment, you would want to pay a company such as Verisign
    for an SSL certificate because they provide liability protection and technical
    support.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生产环境中，你可能会希望向Verisign等公司支付费用以获取SSL证书，因为他们提供责任保护和技术支持。
- en: '**For Linux Developers**: If you use a Linux variant that cannot create self-signed
    certificates or you do not mind reapplying for a new certificate every 90 days,
    then you can get a free certificate from the following link: [https://letsencrypt.org](https://letsencrypt.org)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Linux开发者注意**：如果你使用的Linux发行版无法创建自签名证书，或者你不介意每90天重新申请新证书，那么你可以通过以下链接获取免费证书：[https://letsencrypt.org](https://letsencrypt.org)'
- en: During development, you can tell your OS to trust a temporary development certificate
    provided by ASP.NET Core.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在开发过程中，你可以指示操作系统信任ASP.NET Core提供的临时开发证书。
- en: 'At the command line or in **TERMINAL**, press Ctrl + C to shut down the web
    server, and note the message that is written, as shown highlighted in the following
    output:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行或**终端**中，按Ctrl + C关闭Web服务器，并注意写入的消息，如下所示突出显示：
- en: '[PRE5]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you need to trust a local self-signed SSL certificate, then at the command
    line or in **TERMINAL**, enter the `dotnet dev-certs https --trust` command, and
    note the message, **Trusting the HTTPS development certificate was requested**.
    You might be prompted to enter your password and a valid HTTPS certificate may
    already be present.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要信任本地自签名SSL证书，那么在命令行或**终端**中输入`dotnet dev-certs https --trust`命令，并注意消息提示，**请求信任HTTPS开发证书**。你可能需要输入密码，并且可能已经存在有效的HTTPS证书。
- en: Enabling stronger security and redirect to a secure connection
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加强安全并自动重定向至安全连接
- en: It is good practice to enable stricter security and automatically redirect requests
    for HTTP to HTTPS.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 启用更严格的安全措施并自动将HTTP请求重定向到HTTPS是一种良好实践。
- en: '**Good Practice**: **HTTP Strict Transport Security** (**HSTS**) is an opt-in
    security enhancement that you should always enable. If a website specifies it
    and a browser supports it, then it forces all communication over HTTPS and prevents
    the visitor from using untrusted or invalid certificates.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：**HTTP严格传输安全**（**HSTS**）是一种应始终启用的可选安全增强措施。如果网站指定它且浏览器支持它，那么它将强制所有通信通过HTTPS进行，并阻止访问者使用不受信任或无效的证书。'
- en: 'Let''s do that now:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行操作：
- en: 'In `Program.cs`, add an `if` statement to enable HSTS when not in development,
    as shown in the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加一个`if`语句，在非开发环境下启用HSTS，如下代码所示：
- en: '[PRE6]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a statement before the call to `app.MapGet` to redirect HTTP requests to
    HTTPS, as shown in the following code:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`app.MapGet`之前添加一条语句，将HTTP请求重定向到HTTPS，如下代码所示：
- en: '[PRE7]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Start the **Northwind.Web** website project.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**Northwind.Web**网站项目。
- en: If Chrome is still running, close and restart it.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Chrome仍在运行，请关闭并重新启动它。
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，显示**开发者工具**，并点击**网络**标签。
- en: Enter the address `http://localhost:5000/`, or whatever port number was assigned
    to HTTP, and note how the server responds with a `307 Temporary Redirect` to port
    `5001` and that the certificate is now valid and trusted, as shown in *Figure
    14.8*:![](img/B17442_15_08.png)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址`http://localhost:5000/`，或分配给HTTP的任何端口号，并注意服务器如何响应`307临时重定向`到端口`5001`，以及证书现在如何有效且受信任，如图*14.8*所示：![](img/B17442_15_08.png)
- en: 'Figure 14.8: The connection is now secured using a valid certificate and a
    307 redirect'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.8：现在连接已通过有效证书和307重定向得到安全保障
- en: Close Chrome.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome。
- en: Shut down the web server.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: '**Good Practice**: Remember to shut down the Kestrel web server whenever you
    have finished testing a website.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：记得在完成网站测试后关闭Kestrel Web服务器。'
- en: Controlling the hosting environment
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制托管环境
- en: 'In earlier versions of ASP.NET Core, the project template set a rule to say
    that while in development mode, any unhandled exceptions will be shown in the
    browser window for the developer to see the details of the exception, as shown
    in the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core早期版本中，项目模板设定了一项规则，即在开发模式下，任何未处理的异常都会在浏览器窗口中显示，以便开发者查看异常详情，如下代码所示：
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With ASP.NET Core 6 and later, this code is executed automatically by default
    so it is not included in the project template.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 6及更高版本中，此代码默认会自动执行，因此不会包含在项目模板中。
- en: How does ASP.NET Core know when we are running in development mode so that the
    `IsDevelopment` method returns `true`? Let's find out.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core如何知道我们何时处于开发模式，使得`IsDevelopment`方法返回`true`？让我们来探究一下。
- en: ASP.NET Core can read from environment variables to determine what hosting environment
    to use, for example, `DOTNET_ENVIRONMENT` or `ASPNETCORE_ENVIRONMENT`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core可以从环境变量中读取以确定使用哪个托管环境，例如`DOTNET_ENVIRONMENT`或`ASPNETCORE_ENVIRONMENT`。
- en: 'You can override these settings during local development:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本地开发期间覆盖这些设置：
- en: 'In the `Northwind.Web` folder, expand the folder named `Properties`, open the
    file named `launchSettings.json`, and note the profile named `Northwind.Web` that
    sets the hosting environment to `Development`, as shown highlighted in the following
    configuration:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`文件夹中，展开名为`Properties`的文件夹，打开名为`launchSettings.json`的文件，并注意名为`Northwind.Web`的配置文件，该配置文件将托管环境设置为`Development`，如下所示：
- en: '[PRE9]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Change the randomly assigned port numbers for HTTP to `5000` and HTTPS to `5001`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将随机分配的HTTP端口号更改为`5000`，HTTPS端口号更改为`5001`。
- en: Change the environment to `Production`. Optionally, change `launchBrowser` to
    `false` to prevent Visual Studio from automatically launching a browser.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将环境更改为`Production`。可选地，将`launchBrowser`更改为`false`以防止Visual Studio自动启动浏览器。
- en: 'Start the website and note the hosting environment is `Production`, as shown
    in the following output:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站并注意托管环境为`Production`，如下所示：
- en: '[PRE10]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Shut down the web server.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: In `launchSettings.json`, change the environment back to `Development`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`launchSettings.json`中，将环境更改回`Development`。
- en: The `launchSettings.json` file also has a configuration for using IIS as the
    web server using random port numbers. In this book, we will only be using Kestrel
    as the web server since it is cross-platform.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchSettings.json`文件还具有使用随机端口号使用IIS作为Web服务器的配置。在本书中，我们将仅使用Kestrel作为Web服务器，因为它跨平台。'
- en: Separating configuration for services and pipeline
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务和管道配置的分离
- en: Putting all code to initialize a simple web project in `Program.cs` can be a
    good idea, especially for web services, so we will see this style again in *Chapter
    16*, *Building and Consuming Web Services*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有代码初始化一个简单的Web项目放在`Program.cs`中可能是一个好主意，特别是对于Web服务，因此我们将在*第16章*，*构建和消费Web服务*中再次看到这种风格。
- en: 'However, for anything more than the most basic web project, you might prefer
    to separate configuration into a separate `Startup` class with two methods:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于任何比最基本的Web项目更复杂的情况，您可能更愿意将配置分离到一个单独的`Startup`类中，该类包含两个方法：
- en: '`ConfigureServices(IServiceCollection services)`: to add dependency services
    to a dependency injection container, such as Razor Pages support, **Cross-Origin
    Resource Sharing** (**CORS**) support, or a database context for working with
    the Northwind database.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigureServices(IServiceCollection services)`：向依赖注入容器添加依赖服务，例如Razor Pages支持、**跨源资源共享**（**CORS**）支持，或用于处理Northwind数据库的数据库上下文。'
- en: '`Configure(IApplicationBuilder app, IWebHostEnvironment env)`: to set up the
    HTTP pipeline through which requests and responses flow. Call various `Use` methods
    on the `app` parameter to construct the pipeline in the order the features should
    be processed.![](img/B17442_15_09.png)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Configure(IApplicationBuilder app, IWebHostEnvironment env)`：通过调用`app`参数上的各种`Use`方法来设置HTTP管道，请求和响应通过该管道流动。按照应处理功能的顺序构建管道！[](img/B17442_15_09.png)'
- en: 'Figure 14.9: Startup class ConfigureServices and Configure methods diagram'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：Startup类ConfigureServices和Configure方法图
- en: Both methods will get called automatically by the runtime.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法将由运行时自动调用。
- en: 'Let''s create a `Startup` class now:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个`Startup`类：
- en: Add a new class file to the `Northwind.Web` project named `Startup.cs`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Northwind.Web`项目添加一个名为`Startup.cs`的新类文件。
- en: 'Modify `Startup.cs`, as shown in the following code:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Startup.cs`，如下所示：
- en: '[PRE11]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note the following about the code:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意以下代码内容：
- en: The `ConfigureServices` method is currently empty because we do not yet need
    any dependency services added.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigureServices`方法目前为空，因为我们尚未需要添加任何依赖服务。'
- en: The `Configure` method sets up the HTTP request pipeline and enables the use
    of endpoint routing. It configures a routed endpoint to wait for requests using
    the same map for each HTTP `GET` request for the root path `/` that responds to
    those requests by returning the plain text `"Hello World!"`. We will learn about
    routed endpoints and their benefits at the end of this chapter.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`Configure`方法设置HTTP请求管道并启用端点路由功能。它配置了一个路由端点，该端点等待根路径`/`的每个HTTP `GET`请求，并通过返回纯文本`"Hello
    World!"`来响应这些请求。我们将在本章末尾学习路由端点及其好处。
- en: Now we must specify that we want to use the `Startup` class in the application
    entry point.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们必须指定在应用程序入口点使用`Startup`类。
- en: 'Modify `Program.cs`, as shown in the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Program.cs`，如下所示：
- en: '[PRE12]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Start the website and note that it has the same behavior as before.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站并注意其行为与之前相同。
- en: Shut down the web server.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: In all the other website and service projects that we create in this book, we
    will use the single `Program.cs` file created by .NET 6 project templates. If
    you like the `Startup.cs` way of doing things, then you will see in this chapter
    how to use it.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中创建的所有其他网站和服务项目中，我们将使用.NET 6项目模板创建的单个`Program.cs`文件。如果你喜欢使用`Startup.cs`的方式，那么你将在本章中看到如何使用它。
- en: Enabling a website to serve static content
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使网站能够提供静态内容
- en: A website that only ever returns a single plain text message isn't very useful!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一个仅返回单一纯文本消息的网站并不十分有用！
- en: At a minimum, it ought to return static HTML pages, CSS that the web pages will
    use for styling, and any other static resources, such as images and videos.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，它应该返回静态HTML页面、网页将用于样式的CSS以及任何其他静态资源，如图像和视频。
- en: By convention, these files should be stored in a directory named `wwwroot` to
    keep them separate from the dynamically executing parts of your website project.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，这些文件应存储在名为`wwwroot`的目录中，以将它们与网站项目中动态执行的部分分开。
- en: Creating a folder for static files and a web page
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建静态文件文件夹和网页
- en: 'You will now create a folder for your static website resources and a basic
    index page that uses Bootstrap for styling:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将为静态网站资源创建一个文件夹，并创建一个使用Bootstrap进行样式设置的基本索引页面：
- en: In the `Northwind.Web` project/folder, create a folder named `wwwroot`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`项目/文件夹中，创建一个名为`wwwroot`的文件夹。
- en: Add a new HTML page file to the `wwwroot` folder named `index.html`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`wwwroot`文件夹添加一个新的HTML页面文件，命名为`index.html`。
- en: 'Modify its content to link to CDN-hosted Bootstrap for styling, and use modern
    good practices such as setting the viewport, as shown in the following markup:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容，链接到CDN托管的Bootstrap以进行样式设置，并采用现代良好实践，例如设置视口，如下所示标记：
- en: '[PRE13]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Good Practice**: To get the latest `<link>` element for Bootstrap, copy and
    paste it from the documentation at the following link: [https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：为了获取最新的`<link>`元素用于Bootstrap，请从以下链接的文档中复制并粘贴它：[https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/5.0/getting-started/introduction/#starter-template)。'
- en: Enabling static and default files
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用静态和默认文件
- en: If you were to start the website now and enter `http://localhost:5000/index.html`
    in the address box, the website would return a `404 Not Found` error saying no
    web page was found. To enable the website to return static files such as `index.html`,
    we must explicitly configure that feature.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在启动网站并在地址栏中输入`http://localhost:5000/index.html`，网站将返回一个`404 Not Found`错误，表示未找到网页。为了使网站能够返回诸如`index.html`之类的静态文件，我们必须明确配置该功能。
- en: Even if we enable static files, if you were to start the website and enter `http://localhost:5000/`
    in the address box, the website will return a `404 Not Found` error because the
    web server does not know what to return by default if no named file is requested.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们启用了静态文件，如果你启动网站并在地址栏中输入`http://localhost:5000/`，网站将返回一个`404 Not Found`错误，因为Web服务器不知道如果没有请求特定文件，默认应该返回什么。
- en: 'You will now enable static files, explicitly configure default files, and change
    the URL path registered that returns the plain text `Hello World!` response:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将启用静态文件，明确配置默认文件，并更改注册的URL路径，该路径返回纯文本`Hello World!`响应：
- en: 'In `Startup.cs`, in the `Configure` method, add statements after enabling HTTPS
    redirection to enable static files and default files, and modify the statement
    that maps a `GET` request to return the `Hello World!` plain text response to
    only respond to the URL path `/hello`, as shown highlighted in the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup.cs`中，在`Configure`方法中，在启用HTTPS重定向后添加语句以启用静态文件和默认文件，并修改将`GET`请求映射到返回`Hello
    World!`纯文本响应的语句，使其仅响应URL路径`/hello`，如下所示突出显示的代码：
- en: '[PRE14]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The call to `UseDefaultFiles` must come before the call to `UseStaticFiles`,
    or it will not work! You will learn more about the ordering of middleware and
    endpoint routing at the end of this chapter.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用`UseDefaultFiles`必须在调用`UseStaticFiles`之前，否则它不会工作！你将在本章末了解更多关于中间件和端点路由的顺序。
- en: Start the website.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Start **Chrome** and show **Developer Tools**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**Chrome**并显示**开发者工具**。
- en: In Chrome, enter `http://localhost:5000/` and note that you are redirected to
    the HTTPS address on port `5001`, and the `index.html` file is now returned over
    that secure connection because it is one of the possible default files for this
    website.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，输入`http://localhost:5000/`，并注意您被重定向到端口`5001`上的HTTPS地址，并且`index.html`文件现在通过该安全连接返回，因为它是该网站可能的默认文件之一。
- en: In **Developer Tools**, note the request for the Bootstrap stylesheet.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**开发者工具**中，注意对Bootstrap样式表的请求。
- en: In Chrome, enter `http://localhost:5000/hello` and note that it returns the
    plain text `Hello World!` as before.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，输入`http://localhost:5000/hello`，并注意它返回与之前一样的纯文本`Hello World!`。
- en: Close Chrome and shut down the web server.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: If all web pages are static, that is, they only get changed manually by a web
    editor, then our website programming work is complete. But almost all websites
    need dynamic content, which means a web page that is generated at runtime by executing
    code.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有网页都是静态的，即它们仅由网页编辑器手动更改，那么我们的网站编程工作就完成了。但几乎所有网站都需要动态内容，这意味着在运行时通过执行代码生成的网页。
- en: The easiest way to do that is to use a feature of ASP.NET Core named **Razor
    Pages**.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用ASP.NET Core的一个名为**Razor页面**的功能。
- en: Exploring ASP.NET Core Razor Pages
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索ASP.NET Core Razor Pages
- en: ASP.NET Core Razor Pages allow a developer to easily mix C# code statements
    with HTML markup to make the generated web page dynamic. That is why they use
    the `.cshtml` file extension.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Razor Pages允许开发人员轻松地将C#代码语句与HTML标记混合，以使生成的网页动态化。这就是为什么它们使用`.cshtml`文件扩展名。
- en: By convention, ASP.NET Core looks for Razor Pages in a folder named `Pages`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，ASP.NET Core会在名为`Pages`的文件夹中查找Razor页面。
- en: Enabling Razor Pages
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用Razor页面
- en: 'You will now copy and change the static HTML page into a dynamic Razor Page,
    and then add and enable the Razor Pages service:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将把静态HTML页面转换为动态Razor页面，并添加并启用Razor页面服务：
- en: In the `Northwind.Web` project folder, create a folder named `Pages`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`项目文件夹中，创建一个名为`Pages`的文件夹。
- en: Copy the `index.html` file into the `Pages` folder.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`index.html`文件复制到`Pages`文件夹中。
- en: For the file in the `Pages` folder, rename the file extension from `.html` to
    `.cshtml`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Pages`文件夹中的文件，将文件扩展名从`.html`更改为`.cshtml`。
- en: Remove the `<h2>` element that says that this is a static HTML page.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除表示这是静态HTML页面的`<h2>`元素。
- en: 'In `Startup.cs`, in the `ConfigureServices` method, add a statement to add
    ASP.NET Core Razor Pages and its related services, such as model binding, authorization,
    anti-forgery, views, and tag helpers, to the builder, as shown in the following
    code:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup.cs`中的`ConfigureServices`方法中，添加一个语句以将ASP.NET Core Razor Pages及其相关服务（如模型绑定、授权、防伪、视图和标签助手）添加到构建器中，如下所示：
- en: '[PRE15]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Startup.cs`, in the `Configure` method, in the configuration to use endpoints,
    add a statement to call the `MapRazorPages` method, as shown highlighted in the
    following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup.cs`中的`Configure`方法中，在配置使用端点的部分，添加一个语句以调用`MapRazorPages`方法，如下所示：
- en: '[PRE16]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding code to a Razor Page
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Razor页面添加代码
- en: 'In the HTML markup of a web page, Razor syntax is indicated by the `@` symbol.
    Razor Pages can be described as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页的HTML标记中，Razor语法由`@`符号表示。Razor页面可以描述如下：
- en: They require the `@page` directive at the top of the file.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们需要在文件顶部使用`@page`指令。
- en: 'They can optionally have an `@functions` section that defines any of the following:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以有可选的`@functions`部分，定义以下任何内容：
- en: Properties for storing data values, like in a class definition. An instance
    of that class is automatically instantiated named `Model` that can have its properties
    set in special methods and you can get the property values in the HTML.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于存储数据值的属性，类似于类定义。该类的实例会自动实例化名为`Model`，其属性可以在特殊方法中设置，并且可以在HTML中获取属性值。
- en: Methods named `OnGet`, `OnPost`, `OnDelete`, and so on that execute when HTTP
    requests are made, such as `GET`, `POST`, and `DELETE`.
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当进行HTTP请求（如`GET`、`POST`和`DELETE`）时，执行名为`OnGet`、`OnPost`、`OnDelete`等方法。
- en: 'Let''s now convert the static HTML page into a Razor Page:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将静态HTML页面转换为Razor页面：
- en: In the `Pages` folder, open `index.cshtml`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，打开`index.cshtml`。
- en: Add the `@page` statement to the top of the file.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加`@page`语句。
- en: After the `@page` statement, add an `@functions` statement block.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@page`语句之后，添加一个`@functions`语句块。
- en: Define a property to store the name of the current day as a `string` value.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个属性以存储当前日期的名称作为`string`值。
- en: 'Define a method to set `DayName` that executes when an HTTP `GET` request is
    made for the page, as shown in the following code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个设置`DayName`的方法，该方法在对该页面进行HTTP `GET`请求时执行，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Output the day name inside the second HTML paragraph, as shown highlighted
    in the following markup:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个HTML段落中输出日期名称，如下面的标记中突出显示的那样：
- en: '[PRE18]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Start the website.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: In Chrome, enter `https://localhost:5001/` and note the current day name is
    output on the page, as shown in *Figure 14.10*:![](img/B17442_15_10.png)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中输入`https://localhost:5001/`，并注意当前日期名称输出在页面上，如*图14.10*所示：![](img/B17442_15_10.png)
- en: 'Figure 14.10: Welcome to Northwind page showing the current day'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图14.10*：欢迎来到Northwind页面显示当前日期'
- en: In Chrome, enter `https://localhost:5001/index.html`, which exactly matches
    the static filename, and note that it returns the static HTML page as before.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中输入`https://localhost:5001/index.html`，它与静态文件名完全匹配，并注意它像以前一样返回静态HTML页面。
- en: In Chrome, enter `https://localhost:5001/hello`, which exactly matches the endpoint
    route that returns plain text, and note that it returns `Hello World!` as before.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中输入`https://localhost:5001/hello`，它与返回纯文本的端点路由完全匹配，并注意它像以前一样返回`Hello
    World!`。
- en: Close Chrome and shut down the web server.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并停止Web服务器。
- en: Using shared layouts with Razor Pages
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Razor Pages的共享布局
- en: Most websites have more than one page. If every page had to contain all of the
    boilerplate markup that is currently in `index.cshtml`, that would become a pain
    to manage. So, ASP.NET Core has a feature named **layouts**.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都有多个页面。如果每个页面都必须包含当前`index.cshtml`中的所有样板标记，那将变得难以管理。因此，ASP.NET Core提供了一个名为**布局**的功能。
- en: To use layouts, we must create a Razor file to define the default layout for
    all Razor Pages (and all MVC views) and store it in a `Shared` folder so that
    it can be easily found by convention. The name of this file can be anything, because
    we will specify it, but `_Layout.cshtml` is good practice.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用布局，我们必须创建一个Razor文件来定义所有Razor Pages（和所有MVC视图）的默认布局，并将其存储在`Shared`文件夹中，以便通过约定轻松找到。此文件的名称可以是任何名称，因为我们将会指定它，但`_Layout.cshtml`是良好的实践。
- en: We must also create a specially named file to set the default layout file for
    all Razor Pages (and all MVC views). This file must be named `_ViewStart.cshtml`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须创建一个特殊命名的文件来设置所有Razor Pages（和所有MVC视图）的默认布局文件。此文件必须命名为`_ViewStart.cshtml`。
- en: 'Let''s see layouts in action:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看布局的实际应用：
- en: In the `Pages` folder, add a file named `_ViewStart.cshtml`. (The Visual Studio
    item template is named **Razor View Start**.)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，添加一个名为`_ViewStart.cshtml`的文件。（Visual Studio项模板名为**Razor视图开始**。）
- en: 'Modify its content, as shown in the following markup:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容，如下面的标记所示：
- en: '[PRE19]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the `Pages` folder, create a folder named `Shared`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，创建一个名为`Shared`的文件夹。
- en: In the `Shared` folder, create a file named `_Layout.cshtml`. (The Visual Studio
    item template is named **Razor Layout**.)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shared`文件夹中，创建一个名为`_Layout.cshtml`的文件。（Visual Studio项模板名为**Razor布局**。）
- en: 'Modify the content of `_Layout.cshtml` (it is similar to `index.cshtml` so
    you can copy and paste the HTML markup from there), as shown in the following
    markup:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`_Layout.cshtml`的内容（它与`index.cshtml`类似，因此你可以从那里复制粘贴HTML标记），如下面的标记所示：
- en: '[PRE20]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: '`<title>` is set dynamically using server-side code from a dictionary named
    `ViewData`. This is a simple way to pass data between different parts of an ASP.NET
    Core website. In this case, the data will be set in a Razor Page class file and
    then output in the shared layout.'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<title>`通过从名为`ViewData`的字典中使用服务器端代码动态设置。这是一种在ASP.NET Core网站的不同部分之间传递数据的简单方法。在这种情况下，数据将在Razor页面类文件中设置，然后在共享布局中输出。'
- en: '`@RenderBody()` marks the insertion point for the view being requested.'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RenderBody()`标记了请求视图的插入点。'
- en: A horizontal rule and footer will appear at the bottom of each page.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个页面底部都会出现一条水平线和页脚。
- en: At the bottom of the layout is a script to implement some cool features of Bootstrap
    that we can use later, such as a carousel of images.
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局底部有一个脚本，用于实现Bootstrap的一些酷炫功能，我们稍后可以使用，例如图像轮播。
- en: After the `<script>` elements for Bootstrap, we have defined a section named
    `Scripts` so that a Razor Page can optionally inject additional scripts that it
    needs.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Bootstrap的`<script>`元素之后，我们定义了一个名为`Scripts`的部分，以便Razor页面可以有选择地注入它所需的额外脚本。
- en: Modify `index.cshtml` to remove all HTML markup except `<div class="jumbotron">`
    and its contents, and leave the C# code in the `@functions` block that you added
    earlier.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `index.cshtml` 以删除所有 HTML 标记，除了 `<div class="jumbotron">` 及其内容，并保留你之前添加的
    `@functions` 块中的 C# 代码。
- en: 'Add a statement to the `OnGet` method to store a page title in the `ViewData`
    dictionary, and modify the button to navigate to a suppliers page (which we will
    create in the next section), as shown highlighted in the following markup:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `OnGet` 方法添加一条语句，将页面标题存储在 `ViewData` 字典中，并修改按钮以导航到供应商页面（我们将在下一节创建），如下所示的高亮标记：
- en: '[PRE21]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Start the website, visit it with Chrome, and note that it has similar behavior
    as before, although clicking the button for suppliers will give a `404 Not Found`
    error because we have not created that page yet.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站，在 Chrome 中访问它，并注意到它与之前有相似的行为，尽管点击供应商按钮会给出 `404 未找到` 错误，因为我们尚未创建该页面。
- en: Using code-behind files with Razor Pages
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Razor Pages 的代码后置文件
- en: Sometimes, it is better to separate the HTML markup from the data and executable
    code, so Razor Pages allows you to do this by putting the C# code in **code-behind**
    class files. They have the same name as the `.cshtml` file but end with `.cshtml.cs`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将 HTML 标记与数据和可执行代码分离会更好，因此 Razor Pages 允许你通过将 C# 代码放入 **代码后置** 类文件中来实现这一点。它们与
    `.cshtml` 文件同名，但以 `.cshtml.cs` 结尾。
- en: 'You will now create a page that shows a list of suppliers. In this example,
    we are focusing on learning about code-behind files. In the next topic, we will
    load the list of suppliers from a database, but for now, we will simulate that
    with a hardcoded array of `string` values:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将创建一个显示供应商列表的页面。在本例中，我们专注于学习代码后置文件。在下一个主题中，我们将从数据库加载供应商列表，但现在，我们将使用硬编码的字符串数组来模拟这一过程：
- en: In the `Pages` folder, add two new files named `Suppliers.cshtml` and `Suppliers.cshtml.cs`.
    (The Visual Studio item template is named **Razor Page - Empty** and it creates
    both files.)
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Pages` 文件夹中，添加两个名为 `Suppliers.cshtml` 和 `Suppliers.cshtml.cs` 的新文件。（Visual
    Studio 项模板名为 **Razor 页面 - 空**，它会创建这两个文件。）
- en: 'Add statements to the code-behind file named `Suppliers.cshtml.cs`, as shown
    in the following code:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向名为 `Suppliers.cshtml.cs` 的代码后置文件添加如下所示的语句：
- en: '[PRE22]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: '`SuppliersModel` inherits from `PageModel`, so it has members such as the `ViewData`
    dictionary for sharing data. You can right-click on `PageModel` and select **Go
    To Definition** to see that it has lots more useful features, such as the entire
    `HttpContext` of the current request.'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SuppliersModel` 继承自 `PageModel`，因此它拥有诸如 `ViewData` 字典等成员，用于共享数据。你可以右键点击 `PageModel`
    并选择 **转到定义** 来查看它还有许多其他有用的特性，例如当前请求的整个 `HttpContext`。'
- en: '`SuppliersModel` defines a property for storing a collection of `string` values
    named `Suppliers`.'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SuppliersModel` 定义了一个用于存储名为 `Suppliers` 的 `string` 值集合的属性。'
- en: When an HTTP `GET` request is made for this Razor Page, the `Suppliers` property
    is populated with some example supplier names from an array of `string` values.
    Later, we will populate this from the Northwind database.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对该 Razor 页面发起 HTTP `GET` 请求时，`Suppliers` 属性会用来自字符串数组的一些示例供应商名称进行填充。稍后，我们将从
    Northwind 数据库填充此属性。
- en: 'Modify the contents of `Suppliers.cshtml`, as shown in the following markup:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Suppliers.cshtml` 的内容，如下所示的标记：
- en: '[PRE23]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: The model type for this Razor Page is set to `SuppliersModel`.
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此 Razor 页面的模型类型设置为 `SuppliersModel`。
- en: The page outputs an HTML table with Bootstrap styles.
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该页面输出一个带有 Bootstrap 样式的 HTML 表格。
- en: The data rows in the table are generated by looping through the `Suppliers`
    property of `Model` if it is not `null`.
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `Model` 的 `Suppliers` 属性不为 `null`，则表格中的数据行是通过循环遍历该属性生成的。
- en: Start the website and visit it using Chrome.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站并在 Chrome 中访问它。
- en: Click on the button to learn more about suppliers, and note the table of suppliers,
    as shown in *Figure 14.11*:![](img/B17442_15_11.png)
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮以了解更多关于供应商的信息，并注意供应商表格，如图 *14.11* 所示：![](img/B17442_15_11.png)
- en: 'Figure 14.11: The table of suppliers loaded from an array of strings'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.11：从字符串数组加载的供应商表格
- en: Using Entity Framework Core with ASP.NET Core
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 的 Entity Framework Core
- en: 'Entity Framework Core is a natural way to get real data into a website. In
    *Chapter 13*, *Introducing Practical Applications of C# and .NET*, you created
    two pairs of class libraries: one for the entity models and one for the Northwind
    database context, for either SQL Server or SQLite or both. You will now use them
    in your website project.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core 是一种自然而然的方式，将真实数据引入网站。在*第13章*，*C# 和 .NET 的实际应用介绍*中，你创建了两对类库：一对用于实体模型，另一对用于
    Northwind 数据库上下文，适用于 SQL Server 或 SQLite，或两者兼有。现在你将在网站项目中使用它们。
- en: Configure Entity Framework Core as a service
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Entity Framework Core 配置为服务
- en: Functionality such as Entity Framework Core database contexts that are needed
    by ASP.NET Core must be registered as a service during website startup. The code
    in the GitHub repository solution and below uses SQLite, but you can easily use
    SQL Server if you prefer.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 Entity Framework Core 数据库上下文之类的功能，对于 ASP.NET Core 是必需的，必须在网站启动时注册为服务。GitHub
    仓库解决方案和下面的代码使用 SQLite，但如果你更喜欢，也可以轻松使用 SQL Server。
- en: 'Let''s see how:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何操作：
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.Common.DataContext`
    project for either SQLite or SQL Server, as shown in the following markup:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web` 项目中，添加一个项目引用到 `Northwind.Common.DataContext` 项目，适用于 SQLite
    或 SQL Server，如下列标记所示：
- en: '[PRE24]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The project reference must go all on one line with no line break.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目引用必须全部在一行上，不能有换行。
- en: Build the `Northwind.Web` project.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Web` 项目。
- en: 'In `Startup.cs`, import namespaces to work with your entity model types, as
    shown in the following code:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Startup.cs` 中，导入命名空间以处理你的实体模型类型，如下列代码所示：
- en: '[PRE25]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a statement to the `ConfigureServices` method to register the `Northwind`
    database context class, as shown in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `ConfigureServices` 方法中添加一条语句，以注册 `Northwind` 数据库上下文类，如下列代码所示：
- en: '[PRE26]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `Northwind.Web` project, in the `Pages` folder, open `Suppliers.cshtml.cs`,
    and import the namespace for our database context, as shown in the following code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web` 项目中，在 `Pages` 文件夹下，打开 `Suppliers.cshtml.cs`，并导入我们的数据库上下文命名空间，如下列代码所示：
- en: '[PRE27]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `SuppliersModel` class, add a private field to store the `Northwind`
    database context and a constructor to set it, as shown in the following code:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SuppliersModel` 类中，添加一个私有字段来存储 `Northwind` 数据库上下文，以及一个构造函数来设置它，如下列代码所示：
- en: '[PRE28]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Change the `Suppliers` property to contain `Supplier` objects instead of `string`
    values.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Suppliers` 属性更改为包含 `Supplier` 对象而不是 `string` 值。
- en: 'In the `OnGet` method, modify the statements to set the `Suppliers` property
    from the `Suppliers` property of the database context, sorted by country and then
    company name, as shown highlighted in the following code:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnGet` 方法中，修改语句以根据数据库上下文的 `Suppliers` 属性设置 `Suppliers` 属性，按国家和公司名称排序，如下列突出显示的代码所示：
- en: '[PRE29]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Modify the contents of `Suppliers.cshtml` to import the `Packt.Shared` namespace
    and render multiple columns for each supplier, as shown highlighted in the following
    markup:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Suppliers.cshtml` 的内容，以导入 `Packt.Shared` 命名空间，并为每个供应商渲染多个列，如下列突出显示的标记所示：
- en: '[PRE30]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Start the website.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: In Chrome, enter `https://localhost:5001/`.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，输入 `https://localhost:5001/`。
- en: Click **Learn more about our suppliers** and note that the supplier table now
    loads from the database, as shown in *Figure 14.12*:![](img/B17442_15_12.png)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **了解更多关于我们的供应商**，并注意供应商表现在从数据库加载，如*图 14.12* 所示：![](img/B17442_15_12.png)
- en: 'Figure 14.12: The suppliers table loaded from the Northwind database'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12：从 Northwind 数据库加载的供应商表
- en: Manipulating data using Razor Pages
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Razor Pages 操作数据
- en: You will now add functionality to insert a new supplier.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将添加功能以插入新供应商。
- en: Enabling a model to insert entities
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用模型以插入实体
- en: 'First, you will modify the supplier model so that it responds to HTTP `POST`
    requests when a visitor submits a form to insert a new supplier:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将修改供应商模型，使其在访问者提交表单以插入新供应商时响应 HTTP `POST` 请求：
- en: 'In the `Northwind.Web` project, in the `Pages` folder, open `Suppliers.cshtml.cs`
    and import the following namespace:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web` 项目中，在 `Pages` 文件夹下，打开 `Suppliers.cshtml.cs` 并导入以下命名空间：
- en: '[PRE31]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the `SuppliersModel` class, add a property to store a single supplier and
    a method named `OnPost` that adds the supplier to the `Suppliers` table in the
    Northwind database if its model is valid, as shown in the following code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SuppliersModel` 类中，添加一个属性来存储单个供应商，以及一个名为 `OnPost` 的方法，如果模型有效，该方法会将供应商添加到
    Northwind 数据库的 `Suppliers` 表中，如下列代码所示：
- en: '[PRE32]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'While reviewing the preceding code, note the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在回顾前面的代码时，请注意以下几点：
- en: We added a property named `Supplier` that is decorated with the `[BindProperty]`
    attribute so that we can easily connect HTML elements on the web page to properties
    in the `Supplier` class.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了一个名为`Supplier`的属性，该属性装饰有`[BindProperty]`特性，以便我们可以轻松地将网页上的HTML元素连接到`Supplier`类中的属性。
- en: We added a method that responds to HTTP `POST` requests. It checks that all
    property values conform to validation rules on the `Supplier` class entity model
    (such as `[Required]` and `[StringLength]`) and then adds the supplier to the
    existing table and saves changes to the database context. This will generate a
    SQL statement to perform the insert into the database. Then it redirects to the
    `Suppliers` page so that the visitor sees the newly added supplier.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了一个响应HTTP `POST`请求的方法。它检查所有属性值是否符合`Supplier`类实体模型上的验证规则（如`[Required]`和`[StringLength]`），然后将供应商添加到现有表中，并保存对数据库上下文的更改。这将生成一个SQL语句以执行数据库中的插入操作。然后它重定向到`Suppliers`页面，以便访客看到新添加的供应商。
- en: Defining a form to insert a new supplier
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个用于插入新供应商的表单
- en: 'Next, you will modify the Razor Page to define a form that a visitor can fill
    in and submit to insert a new supplier:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将修改Razor页面以定义一个表单，访客可以填写并提交以插入新供应商：
- en: 'In `Suppliers.cshtml`, add tag helpers after the `@model` declaration so that
    we can use tag helpers such as `asp-for` on this Razor Page, as shown in the following
    markup:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Suppliers.cshtml`中，在`@model`声明后添加标签助手，以便我们可以在该Razor页面上使用诸如`asp-for`之类的标签助手，如下面的标记所示：
- en: '[PRE33]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'At the bottom of the file, add a form to insert a new supplier, and use the
    `asp-for` tag helper to bind the `CompanyName`, `Country`, and `Phone` properties
    of the `Supplier` class to the input box, as shown in the following markup:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部，添加一个用于插入新供应商的表单，并使用`asp-for`标签助手将`Supplier`类的`CompanyName`、`Country`和`Phone`属性绑定到输入框，如下面的标记所示：
- en: '[PRE34]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: The `<form>` element with a `POST` method is normal HTML, so an `<input type="submit"
    />` element inside it will make an HTTP `POST` request back to the current page
    with values of any other elements inside that form.
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`POST`方法的`<form>`元素是常规HTML，因此其中的`<input type="submit" />`元素将使用该表单内其他元素的值向当前页面发出HTTP
    `POST`请求。
- en: An `<input>` element with a tag helper named `asp-for` enables data binding
    to the model behind the Razor Page.
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有名为`asp-for`的标签助手的`<input>`元素能够将数据绑定到Razor页面背后的模型。
- en: Start the website.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Click **Learn more about our suppliers**, scroll down to the bottom of the page,
    enter `Bob's Burgers`, `USA`, and `(603) 555-4567`, and click **Submit**.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**了解更多关于我们的供应商**，滚动到页面底部，输入`Bob's Burgers`、`USA`和`(603) 555-4567`，然后点击**提交**。
- en: Note that you see a refreshed suppliers table with the new supplier added.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，你会看到一个更新的供应商表，其中新增了供应商。
- en: Close Chrome and shut down the web server.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Injecting a dependency service into a Razor Page
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Razor页面注入依赖服务
- en: If you have a `.cshtml` Razor Page that does not have a code-behind file, then
    you can inject a dependency service using the `@inject` directive instead of constructor
    parameter injection, and then directly reference the injected database context
    using Razor syntax in the middle of the markup.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个没有代码后置文件的`.cshtml` Razor页面，那么你可以使用`@inject`指令而不是构造函数参数注入来注入依赖服务，然后直接在标记中间使用Razor语法引用注入的数据库上下文。
- en: 'Let''s create a simple example:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的示例：
- en: In the `Pages` folder, add a new file named `Orders.cshtml`. (The Visual Studio
    item template is named **Razor Page - Empty** and it creates two files. Delete
    the `.cs` file.)
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，添加一个名为`Orders.cshtml`的新文件。（Visual Studio的项目模板名为**Razor Page - Empty**，它会创建两个文件。删除`.cs`文件。）
- en: 'In `Orders.cshtml`, write code to output the number of orders in the Northwind
    database, as shown in the following markup:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Orders.cshtml`中，编写代码以输出Northwind数据库中的订单数量，如下面的标记所示：
- en: '[PRE35]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Start the website.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Navigate to `/orders` and note that you see that there are 830 orders in the
    Northwind database.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`/orders`并注意你看到Northwind数据库中有830个订单。
- en: Close Chrome and shut down the web server.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Using Razor class libraries
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Razor类库
- en: Everything related to a Razor Page can be compiled into a class library for
    easier reuse in multiple projects. With ASP.NET Core 3.0 and later, this can include
    static files such as HTML, CSS, JavaScript libraries, and media assets such as
    image files. A website can either use the Razor Page's view as defined in the
    class library or override it.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 与Razor页面相关的所有内容都可以编译成类库，以便在多个项目中更容易重用。使用ASP.NET Core 3.0及更高版本，这可以包括静态文件，如HTML、CSS、JavaScript库和媒体资产，如图像文件。网站可以使用类库中定义的Razor页面的视图，也可以覆盖它。
- en: Creating a Razor class library
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Razor类库
- en: 'Let''s create a new Razor class library:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Razor类库：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的代码编辑器添加新项目，如下表所示：
- en: 'Project template: **Razor Class Library** / `razorclasslib`'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**Razor类库** / `razorclasslib`
- en: 'Checkbox/switch: **Support pages and views** / `-s`'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复选框/开关：**支持页面和视图** / `-s`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Razor.Employees`'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Razor.Employees`
- en: '`-s` is short for the `--support-pages-and-views` switch that enables the class
    library to use Razor Pages and `.cshtml` file views.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s`是`--support-pages-and-views`开关的简写，该开关使类库能够使用Razor页面和`.cshtml`文件视图。'
- en: Disabling compact folders for Visual Studio Code
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Visual Studio Code禁用紧凑文件夹
- en: Before we implement our Razor class library, I want to explain a Visual Studio
    Code feature that confused some readers of a previous edition because the feature
    was added after publishing.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现Razor类库之前，我想解释一下Visual Studio Code的一个功能，该功能在出版后添加，曾让一些读者感到困惑。
- en: 'The compact folders feature means that nested folders such as `/Areas/MyFeature/Pages/`
    are shown in a compact form if the intermediate folders in the hierarchy do not
    contain files, as shown in *Figure 14.13*:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 紧凑文件夹功能意味着，如果层次结构中的中间文件夹不包含文件，则类似`/Areas/MyFeature/Pages/`的嵌套文件夹会以紧凑形式显示，如图*14.13*所示：
- en: '![](img/B17442_15_13.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17442_15_13.png)'
- en: 'Figure 14.13: Compact folders enabled or disabled'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13：启用或禁用紧凑文件夹
- en: 'If you would like to disable the Visual Studio Code compact folders feature,
    complete the following steps:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想禁用Visual Studio Code的紧凑文件夹功能，请完成以下步骤：
- en: On Windows, navigate to **File** | **Preferences** | **Settings**. On macOS,
    navigate to **Code** | **Preferences** | **Settings**.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，导航至**文件** | **首选项** | **设置**。在macOS上，导航至**代码** | **首选项** | **设置**。
- en: In the **Search** settings box, enter `compact`.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**设置框中，输入`compact`。
- en: 'Clear the **Explorer: Compact Folders** checkbox, as shown in *Figure 14.14*:![Graphical
    user interface, text, application, email  Description automatically generated](img/B17442_15_14.png)'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除**资源管理器：紧凑文件夹**复选框，如图*14.14*所示：![图形用户界面，文本，应用程序，电子邮件 自动生成描述](img/B17442_15_14.png)
- en: 'Figure 14.14: Disabling compact folders for Visual Studio Code'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.14：为Visual Studio Code禁用紧凑文件夹
- en: Close the **Settings** tab.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**设置**标签页。
- en: Implementing the employees feature using EF Core
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EF Core实现员工功能
- en: 'Now we can add a reference to our entity models to get the employees to show
    in the Razor class library:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加对实体模型的引用，以便在Razor类库中显示员工信息：
- en: 'In the `Northwind.Razor.Employees` project, add a project reference to the
    `Northwind.Common.DataContext` project for either SQLite or SQL Server and note
    the SDK is `Microsoft.NET.Sdk.Razor`, as shown highlighted in the following markup:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Razor.Employees`项目中，添加对`Northwind.Common.DataContext`项目的项目引用，选择SQLite或SQL
    Server，并注意SDK为`Microsoft.NET.Sdk.Razor`，如下所示高亮显示：
- en: '[PRE36]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The project reference must go all on one line with no line break. Also, do not
    mix our SQLite and SQL Server projects or you will see compiler errors. If you
    used SQL Server in the `Northwind.Web` project, then you must use SQL Server in
    the `Northwind.Razor.Employees` project as well.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目引用必须全部在一行上，不能有换行。此外，不要混合使用我们的SQLite和SQL Server项目，否则你会看到编译器错误。如果你在`Northwind.Web`项目中使用了SQL
    Server，那么在`Northwind.Razor.Employees`项目中也必须使用SQL Server。
- en: Build the `Northwind.Razor.Employees` project.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Razor.Employees`项目。
- en: In the `Areas` folder, right-click the `MyFeature` folder, select **Rename**,
    enter the new name `PacktFeatures`, and press Enter.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Areas`文件夹中，右键点击`MyFeature`文件夹，选择**重命名**，输入新名称`PacktFeatures`，然后按Enter键。
- en: In the `PacktFeatures` folder, in the `Pages` subfolder, add a new file named
    `_ViewStart.cshtml`. (The Visual Studio item template is named **Razor View Start**.
    Or just copy it from the `Northwind.Web` project.)
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PacktFeatures`文件夹中，在`Pages`子文件夹中，添加一个名为`_ViewStart.cshtml`的新文件。（Visual Studio项模板名为**Razor视图开始**。或者直接从`Northwind.Web`项目复制。）
- en: 'Modify its content to inform this class library that any Razor Pages should
    look for a layout with the same name as used in the `Northwind.Web` project, as
    shown in the following markup:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容，通知此类库任何Razor页面应查找与`Northwind.Web`项目中使用的名称相同的布局，如下所示：
- en: '[PRE37]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We do not need to create the `_Layout.cshtml` file in this project. It will
    use the one in its host project, for example, the one in the `Northwind.Web` project.
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们无需在此项目中创建`_Layout.cshtml`文件。它将使用其宿主项目中的那个，例如`Northwind.Web`项目中的那个。
- en: In the `Pages` subfolder, rename `Page1.cshtml` to `Employees.cshtml`, and rename
    `Page1.cshtml.cs` to `Employees.cshtml.cs`.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`子文件夹中，将`Page1.cshtml`重命名为`Employees.cshtml`，并将`Page1.cshtml.cs`重命名为`Employees.cshtml.cs`。
- en: 'Modify `Employees.cshtml.cs` to define a page model with an array of `Employee`
    entity instances loaded from the Northwind database, as shown in the following
    code:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Employees.cshtml.cs`以定义一个页面模型，该模型包含从Northwind数据库加载的`Employee`实体实例数组，如下所示：
- en: '[PRE38]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Modify `Employees.cshtml`, as shown in the following markup:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Employees.cshtml`，如下所示：
- en: '[PRE39]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: We import the `Packt.Shared` namespace so that we can use classes in it such
    as `Employee`.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入`Packt.Shared`命名空间，以便可以使用其中的类，例如`Employee`。
- en: We add support for tag helpers so that we can use the `<partial>` element.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加对标签助手的支持，以便可以使用`<partial>`元素。
- en: We declare the `@model` type for this Razor Page to use the page model class
    that you just defined.
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们声明此Razor页面的`@model`类型，以使用你刚定义的页面模型类。
- en: We enumerate through the `Employees` in the model, outputting each one using
    a partial view.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们遍历模型中的`Employees`，使用部分视图输出每个员工。
- en: Implementing a partial view to show a single employee
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现一个部分视图以显示单个员工
- en: 'The `<partial>` tag helper was introduced in ASP.NET Core 2.1\. A partial view
    is like a piece of a Razor Page. You will create one in the next few steps to
    render a single employee:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`<partial>`标签助手是在ASP.NET Core 2.1中引入的。部分视图类似于Razor页面的一个片段。接下来几步中，你将创建一个以渲染单个员工：'
- en: In the `Northwind.Razor.Employees` project, in the `Pages` folder, create a
    `Shared` folder.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Razor.Employees`项目中，在`Pages`文件夹中创建一个`Shared`文件夹。
- en: In the `Shared` folder, create a file named `_Employee.cshtml`. (The Visual
    Studio item template is named **Razor View - Empty**.)
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shared`文件夹中，创建一个名为`_Employee.cshtml`的文件。（Visual Studio项模板名为**Razor视图 - 空**。）
- en: 'Modify `_Employee.cshtml`, as shown in the following markup:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`_Employee.cshtml`，如下所示：
- en: '[PRE40]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下几点：
- en: By convention, the names of partial views start with an underscore.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照惯例，部分视图的名称以一个下划线开头。
- en: If you put a partial view in the `Shared` folder, then it can be found automatically.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你将部分视图放在`Shared`文件夹中，那么它可以被自动找到。
- en: The model type for this partial view is a single `Employee` entity.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此部分视图的模型类型是单个`Employee`实体。
- en: We use Bootstrap card styles to output information about each employee.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Bootstrap卡片样式输出每个员工的信息。
- en: Using and testing a Razor class library
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用和测试Razor类库
- en: 'You will now reference and use the Razor class library in the website project:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将在网站项目中引用并使用Razor类库：
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.Razor.Employees`
    project, as shown in the following markup:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`项目中，添加对`Northwind.Razor.Employees`项目的一个项目引用，如下所示：
- en: '[PRE41]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Modify `Pages\index.cshtml` to add a paragraph with a link to the Packt feature
    employees page after the link to the suppliers page, as shown in the following
    markup:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Pages\index.cshtml`，在供应商页面链接后添加一个段落，其中包含指向Packt功能员工页面的链接，如下所示：
- en: '[PRE42]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Start the website, visit the website using Chrome, and click the **Contact our
    employees** button to see the cards of employees, as shown in *Figure 14.15*:![](img/B17442_15_15.png)
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站，使用Chrome访问网站，并点击**联系我们的员工**按钮以查看员工卡片，如图14.15所示：![](img/B17442_15_15.png)
- en: 'Figure 14.15: A list of employees from a Razor class library feature'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.15：来自Razor类库功能的员工列表
- en: Configuring services and the HTTP request pipeline
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务和HTTP请求管道
- en: Now that we have built a website, we can return to the `Startup` configuration
    and review how services and the HTTP request pipeline work in more detail.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经构建了一个网站，我们可以回到 `Startup` 配置，并更详细地审查服务和 HTTP 请求管道是如何工作的。
- en: Understanding endpoint routing
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Endpoint routing
- en: In earlier versions of ASP.NET Core, the routing system and the extendable middleware
    system did not always work easily together; for example, if you wanted to implement
    a policy such as CORS in both middleware and MVC. Microsoft has invested in improving
    routing with a system named **endpoint routing** introduced with ASP.NET Core
    2.2.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本的 ASP.NET Core 中，路由系统和可扩展的中间件系统并不总是能轻松协同工作；例如，如果你想在中间件和 MVC 中实现 CORS 等策略。微软投资改进路由，引入了名为
    **Endpoint routing** 的系统，该系统随 ASP.NET Core 2.2 一起推出。
- en: '**Good Practice**: Endpoint routing replaces the `IRouter`-based routing used
    in ASP.NET Core 2.1 and earlier. Microsoft recommends every older ASP.NET Core
    project migrates to endpoint routing if possible.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：Endpoint routing 取代了 ASP.NET Core 2.1 及更早版本中使用的基于 `IRouter` 的路由。微软建议尽可能将所有旧的
    ASP.NET Core 项目迁移到 Endpoint routing。'
- en: Endpoint routing is designed to enable better interoperability between frameworks
    that need routing, such as Razor Pages, MVC, or Web APIs, and middleware that
    needs to understand how routing affects them, such as localization, authorization,
    CORS, and so on.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: Endpoint routing 旨在实现需要路由的框架（如 Razor Pages、MVC 或 Web API）与需要了解路由如何影响它们的中间件（如本地化、授权、CORS
    等）之间的更好互操作性。
- en: Endpoint routing gets its name because it represents the route table as a compiled
    tree of endpoints that can be walked efficiently by the routing system. One of
    the biggest improvements is the performance of routing and action method selection.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: Endpoint routing 之所以得名，是因为它将路由表表示为可由路由系统高效遍历的编译端点树。其中最大的改进之一是路由和动作方法选择的性能。
- en: It is on by default with ASP.NET Core 2.2 or later if compatibility is set to
    2.2 or later. Traditional routes registered using the `MapRoute` method or with
    attributes are mapped to the new system.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果兼容性设置为 2.2 或更高版本，则默认情况下，ASP.NET Core 2.2 或更高版本会启用 Endpoint routing。使用 `MapRoute`
    方法或属性注册的传统路由会映射到新系统。
- en: The new routing system includes a link generation service registered as a dependency
    service that does not need an `HttpContext`.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 新的路由系统包括一个链接生成服务，该服务作为依赖服务注册，不需要 `HttpContext`。
- en: Configuring endpoint routing
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Endpoint routing
- en: 'Endpoint routing requires a pair of calls to the `UseRouting` and `UseEndpoints`
    methods:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: Endpoint routing 需要一对调用 `UseRouting` 和 `UseEndpoints` 方法：
- en: '`UseRouting` marks the pipeline position where a routing decision is made.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseRouting` 标记了做出路由决策的管道位置。'
- en: '`UseEndpoints` marks the pipeline position where the selected endpoint is executed.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseEndpoints` 标记了选定端点执行的管道位置。'
- en: Middleware such as localization that runs in between these methods can see the
    selected endpoint and can switch to a different endpoint if necessary.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些方法之间运行的中间件（如本地化）可以看到选定的端点，并在必要时切换到不同的端点。
- en: Endpoint routing uses the same route template syntax that has been used in ASP.NET
    MVC since 2010 and the `[Route]` attribute introduced with ASP.NET MVC 5 in 2013\.
    Migration often only requires changes to the `Startup` configuration.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: Endpoint routing 使用自 2010 年以来在 ASP.NET MVC 中使用的相同路由模板语法，以及 2013 年随 ASP.NET MVC
    5 引入的 `[Route]` 属性。迁移通常只需要更改 `Startup` 配置。
- en: MVC controllers, Razor Pages, and frameworks such as SignalR used to be enabled
    by a call to `UseMvc` or similar methods, but they are now added inside the `UseEndpoints`
    method call because they are all integrated into the same routing system along
    with middleware.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 控制器、Razor Pages 和 SignalR 等框架过去通过调用 `UseMvc` 或类似方法启用，但现在它们都在 `UseEndpoints`
    方法调用内部添加，因为它们都集成到了同一个路由系统中，与中间件一起。
- en: Reviewing the endpoint routing configuration in our project
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的项目中审查 Endpoint routing 配置
- en: 'Review the `Startup.cs` class file, as shown in the following code:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `Startup.cs` 类文件，如下所示：
- en: '[PRE43]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `Startup` class has two methods that are called automatically by the host
    to configure the website.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup` 类有两个方法，主机自动调用这两个方法来配置网站。'
- en: 'The `ConfigureServices` method registers services that can then be retrieved
    when the functionality they provide is needed using dependency injection. Our
    code registers two services: Razor Pages and an EF Core database context.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigureServices` 方法注册了可以在需要它们提供的功能时使用依赖注入检索的服务。我们的代码注册了两个服务：Razor Pages
    和 EF Core 数据库上下文。'
- en: Registering services in the ConfigureServices method
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 ConfigureServices 方法中注册服务
- en: 'Common methods that register dependency services, including services that combine
    other method calls that register services, are shown in the following table:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 注册依赖服务的常用方法，包括结合其他注册服务方法调用的服务，如下表所示：
- en: '| Method | Services that it registers |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 注册的服务 |'
- en: '| `AddMvcCore` | Minimum set of services necessary to route requests and invoke
    controllers. Most websites will need more configuration than this. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `AddMvcCore` | 路由请求和调用控制器所需的最小服务集。大多数网站需要比这更多的配置。 |'
- en: '| `AddAuthorization` | Authentication and authorization services. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `AddAuthorization` | 认证和授权服务。 |'
- en: '| `AddDataAnnotations` | MVC data annotations service. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| `AddDataAnnotations` | MVC 数据注解服务。 |'
- en: '| `AddCacheTagHelper` | MVC cache tag helper service. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| `AddCacheTagHelper` | MVC 缓存标签助手服务。 |'
- en: '| `AddRazorPages` | Razor Pages service including the Razor view engine. Commonly
    used in simple website projects. It calls the following additional methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper`
    |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| `AddRazorPages` | 包含 Razor 视图引擎的 Razor Pages 服务。常用于简单网站项目。它调用以下附加方法：`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper`
    |'
- en: '| `AddApiExplorer` | Web API explorer service. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| `AddApiExplorer` | Web API 探索服务。 |'
- en: '| `AddCors` | CORS support for enhanced security. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| `AddCors` | 增强安全性的 CORS 支持。 |'
- en: '| `AddFormatterMappings` | Mappings between a URL format and its corresponding
    media type. |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| `AddFormatterMappings` | URL 格式与其对应的媒体类型之间的映射。 |'
- en: '| `AddControllers` | Controller services but not services for views or pages.
    Commonly used in ASP.NET Core Web API projects. It calls the following additional
    methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings`
    |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| `AddControllers` | 控制器服务，但不包括视图或页面服务。常用于 ASP.NET Core Web API 项目。它调用以下附加方法：`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings`
    |'
- en: '| `AddViews` | Support for `.cshtml` views including default conventions. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| `AddViews` | 支持 `.cshtml` 视图，包括默认约定。 |'
- en: '| `AddRazorViewEngine` | Support for Razor view engine including processing
    the `@` symbol. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| `AddRazorViewEngine` | 支持 Razor 视图引擎，包括处理 `@` 符号。 |'
- en: '| `AddControllersWithViews` | Controller, views, and pages services. Commonly
    used in ASP.NET Core MVC website projects. It calls the following additional methods:`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings``AddViews``AddRazorViewEngine`
    |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| `AddControllersWithViews` | 控制器、视图和页面服务。常用于 ASP.NET Core MVC 网站项目。它调用以下附加方法：`AddMvcCore``AddAuthorization``AddDataAnnotations``AddCacheTagHelper``AddApiExplorer``AddCors``AddFormatterMappings``AddViews``AddRazorViewEngine`
    |'
- en: '| `AddMvc` | Similar to `AddControllersWithViews`, but you should only use
    it for backward compatibility. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| `AddMvc` | 类似于 `AddControllersWithViews`，但仅应为向后兼容而使用。 |'
- en: '| `AddDbContext<T>` | Your `DbContext` type and its optional `DbContextOptions<TContext>`.
    |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| `AddDbContext<T>` | 您的 `DbContext` 类型及其可选的 `DbContextOptions<TContext>`。
    |'
- en: '| `AddNorthwindContext` | A custom extension method we created to make it easier
    to register the `NorthwindContext` class for either SQLite or SQL Server based
    on the project referenced. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| `AddNorthwindContext` | 我们创建的一个自定义扩展方法，以便更容易地根据项目引用注册 `NorthwindContext`
    类，无论是 SQLite 还是 SQL Server。 |'
- en: You will see more examples of using these extension methods for registering
    services in the next few chapters when working with MVC and Web API services.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，当与 MVC 和 Web API 服务一起工作时，您将看到更多使用这些扩展方法注册服务的示例。
- en: Setting up the HTTP request pipeline in the Configure method
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Configure 方法中设置 HTTP 请求管道
- en: The `Configure` method configures the HTTP request pipeline, which is made up
    of a connected sequence of delegates that can perform processing and then decide
    to either return a response themselves or pass processing on to the next delegate
    in the pipeline. Responses that come back can also be manipulated.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`Configure` 方法配置 HTTP 请求管道，该管道由一系列连接的委托组成，这些委托可以执行处理，然后决定是自行返回响应，还是将处理传递给管道中的下一个委托。返回的响应也可以被操纵。'
- en: 'Remember that delegates define a method signature that a delegate implementation
    can plug into. The delegate for the HTTP request pipeline is simple, as shown
    in the following code:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，委托定义了一个方法签名，委托实现可以插入其中。HTTP 请求管道的委托很简单，如下所示：
- en: '[PRE44]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You can see that the input parameter is an `HttpContext`. This provides access
    to everything you might need to process the incoming HTTP request, including the
    URL path, query string parameters, cookies, and user agent.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到输入参数是一个`HttpContext`。这提供了访问处理传入HTTP请求所需的一切，包括URL路径、查询字符串参数、Cookie和用户代理。
- en: These delegates are often called middleware because they sit in between the
    browser client and the website or service.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 这些委托通常被称为中间件，因为它们位于浏览器客户端和网站或服务之间。
- en: 'Middleware delegates are configured using one of the following methods or a
    custom method that calls them itself:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件委托通过以下方法之一或调用它们本身的自定义方法进行配置：
- en: '`Run`: Adds a middleware delegate that terminates the pipeline by immediately
    returning a response instead of calling the next middleware delegate.'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Run`：添加一个中间件委托，该委托通过立即返回响应而不是调用下一个中间件委托来终止管道。'
- en: '`Map`: Adds a middleware delegate that creates a branch in the pipeline when
    there is a matching request usually based on a URL path like `/hello`.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map`：添加一个中间件委托，当存在匹配的请求时，通常基于URL路径（如`/hello`）在管道中创建分支。'
- en: '`Use`: Adds a middleware delegate that forms part of the pipeline so it can
    decide if it wants to pass the request to the next delegate in the pipeline and
    it can modify the request and response before and after the next delegate.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Use`：添加一个中间件委托，该委托构成管道的一部分，因此它可以决定是否要将请求传递给管道中的下一个委托，并且可以在下一个委托之前和之后修改请求和响应。'
- en: 'For convenience, there are many extension methods that make it easier to build
    the pipeline, for example, `UseMiddleware<T>`, where `T` is a class that has:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，有许多扩展方法使得构建管道更加容易，例如`UseMiddleware<T>`，其中`T`是一个具有以下特性的类：
- en: A constructor with a `RequestDelegate` parameter that will be passed the next
    pipeline component
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个带有`RequestDelegate`参数的构造函数，该参数将传递给下一个管道组件
- en: An `Invoke` method with a `HttpContext` parameter and returns a `Task`
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个带有`HttpContext`参数并返回`Task`的`Invoke`方法
- en: Summarizing key middleware extension methods
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结关键中间件扩展方法
- en: 'Key middleware extension methods used in our code include the following:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码中使用的关键中间件扩展方法包括以下内容：
- en: '`UseDeveloperExceptionPage`: Captures synchronous and asynchronous `System.Exception`
    instances from the pipeline and generates HTML error responses.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseDeveloperExceptionPage`：捕获管道中的同步和异步`System.Exception`实例，并生成HTML错误响应。'
- en: '`UseHsts`: Adds middleware for using HSTS, which adds the `Strict-Transport-Security`
    header.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseHsts`：添加使用HSTS的中间件，该中间件添加了`Strict-Transport-Security`头。'
- en: '`UseRouting`: Adds middleware that defines a point in the pipeline where routing
    decisions are made and must be combined with a call to `UseEndpoints` where the
    processing is then executed. This means that for our code, any URL paths that
    match `/` or `/index` or `/suppliers` will be mapped to Razor Pages and a match
    on `/hello` will be mapped to the anonymous delegate. Any other URL paths will
    be passed on to the next delegate for matching, for example, static files. This
    is why, although it looks like the mapping for Razor Pages and `/hello` happen
    after static files in the pipeline, they actually take priority because the call
    to `UseRouting` happens before `UseStaticFiles`.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseRouting`：添加中间件，该中间件定义管道中的一个点，在此点进行路由决策，并且必须与调用`UseEndpoints`结合使用，在此处执行处理。这意味着对于我们的代码，任何匹配`/`或`/index`或`/suppliers`的URL路径都将映射到Razor页面，而匹配`/hello`的URL路径将映射到匿名委托。任何其他URL路径都将传递给下一个委托进行匹配，例如静态文件。这就是为什么，尽管看起来Razor页面和`/hello`的映射发生在静态文件之后，但实际上它们具有优先权，因为调用`UseRouting`发生在`UseStaticFiles`之前。'
- en: '`UseHttpsRedirection`: Adds middleware for redirecting HTTP requests to HTTPS,
    so in our code a request for `http://localhost:5000` would be modified to `https://localhost:5001`.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseHttpsRedirection`：添加中间件，用于将HTTP请求重定向到HTTPS，因此在我们的代码中，对`http://localhost:5000`的请求将被修改为`https://localhost:5001`。'
- en: '`UseDefaultFiles`: Adds middleware that enables default file mapping on the
    current path, so in our code it would identify files such as `index.html`.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseDefaultFiles`：添加中间件，该中间件在当前路径上启用默认文件映射，因此在我们的代码中，它会识别诸如`index.html`之类的文件。'
- en: '`UseStaticFiles`: Adds middleware that looks in `wwwroot` for static files
    to return in the HTTP response.'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseStaticFiles`：添加中间件，该中间件在`wwwroot`中查找静态文件以返回HTTP响应。'
- en: '`UseEndpoints`: Adds middleware to execute to generate responses from decisions
    made earlier in the pipeline. Two endpoints are added, as shown in the following
    sub-list:'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UseEndpoints`：添加中间件以执行，根据管道中早先做出的决策生成响应。如以下子列表所示，添加了两个端点：'
- en: '`MapRazorPages`: Adds middleware that will map URL paths such as `/suppliers`
    to a Razor Page file in the `/Pages` folder named `suppliers.cshtml` and return
    the results as the HTTP response.'
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapRazorPages`：添加中间件，将URL路径（如`/suppliers`）映射到`/Pages`文件夹中的Razor Page文件`suppliers.cshtml`，并将结果作为HTTP响应返回。'
- en: '`MapGet`: Adds middleware that will map URL paths such as `/hello` to an inline
    delegate that writes plain text directly to the HTTP response.'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapGet`：添加中间件，将URL路径（如`/hello`）映射到内联委托，该委托直接将纯文本写入HTTP响应。'
- en: Visualizing the HTTP pipeline
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化HTTP管道
- en: 'The HTTP request and response pipeline can be visualized as a sequence of request
    delegates, called one after the other, as shown in the following simplified diagram,
    which excludes some middleware delegates, such as `UseHsts`:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求和响应管道可以被可视化为一系列请求委托的序列，一个接一个地调用，如下面的简化图所示，其中省略了一些中间件委托，如`UseHsts`：
- en: '![Diagram  Description automatically generated](img/B17442_15_16.png)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的图表描述](img/B17442_15_16.png)'
- en: 'Figure 14.16: The HTTP request and response pipeline'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.16：HTTP请求和响应管道
- en: As mentioned before, the `UseRouting` and `UseEndpoints` methods must be used
    together. Although the code to define the mapped routes such as `/hello` are written
    in `UseEndpoints`, the decision about whether an incoming HTTP request URL path
    matches and therefore which endpoint to execute is made at the `UseRouting` point
    in the pipeline.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`UseRouting`和`UseEndpoints`方法必须一起使用。虽然定义映射路由（如`/hello`）的代码写在`UseEndpoints`中，但决定传入的HTTP请求URL路径是否匹配以及因此执行哪个端点的决策是在管道中的`UseRouting`点做出的。
- en: Implementing an anonymous inline delegate as middleware
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现匿名内联委托作为中间件
- en: A delegate can be specified as an inline anonymous method. We will register
    one that plugs into the pipeline after routing decisions for endpoints have been
    made.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 委托可以指定为内联匿名方法。我们将注册一个在端点路由决策之后插入到管道中的委托。
- en: 'It will output which endpoint was chosen, as well as handling one specific
    route: `/bonjour`. If that route is matched, it will respond with plain text,
    without calling any further into the pipeline:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出选择了哪个端点，以及处理特定路由`/bonjour`。如果匹配到该路由，它将以纯文本形式响应，不会进一步调用管道中的任何内容：
- en: 'In `Startup.cs`, statically import `Console`, as shown in the following code:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup.cs`中静态导入`Console`，如下所示：
- en: '[PRE45]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add statements after the call to `UseRouting` and before the call to `UseHttpsRedirection`
    to use an anonymous method as a middleware delegate, as shown in the following
    code:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`UseRouting`之后和调用`UseHttpsRedirection`之前添加语句，使用匿名方法作为中间件委托，如下所示：
- en: '[PRE46]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Start the website.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: 'In Chrome, navigate to `https://localhost:5001/`, look at the console output
    and note that there was a match on an endpoint route `/`, it was processed as
    `/index`, and the `Index.cshtml` Razor Page was executed to return the response,
    as shown in the following output:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中访问`https://localhost:5001/`，查看控制台输出，注意到匹配到了一个端点路由`/`，它被处理为`/index`，并且执行了`Index.cshtml`
    Razor Page来返回响应，如下所示：
- en: '[PRE47]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Navigate to `https://localhost:5001/suppliers` and note that you can see that
    there was a match on an endpoint route `/Suppliers` and the `Suppliers.cshtml`
    Razor Page was executed to return the response, as shown in the following output:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/suppliers`，注意到匹配到了一个端点路由`/Suppliers`，并且执行了`Suppliers.cshtml`
    Razor Page来返回响应，如下所示：
- en: '[PRE48]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Navigate to `https://localhost:5001/index` and note that there was a match
    on an endpoint route `/index` and the `Index.cshtml` Razor Page was executed to
    return the response, as shown in the following output:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/index`，注意到匹配到了一个端点路由`/index`，并且执行了`Index.cshtml` Razor
    Page来返回响应，如下所示：
- en: '[PRE49]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Navigate to `https://localhost:5001/index.html` and note that there is no output
    written to the console because there was no match on an endpoint route but there
    was a match for a static file, so it was returned as the response.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/index.html`，注意到控制台没有输出，因为没有匹配到端点路由，但匹配到了一个静态文件，因此作为响应返回。
- en: Navigate to `https://localhost:5001/bonjour` and note that there is no output
    written to the console because there was no match on an endpoint route. Instead,
    our delegate matched on `/bonjour`, wrote directly to the response stream, and
    returned with no further processing.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/bonjour`，注意到控制台没有输出，因为没有匹配到端点路由。相反，我们的委托匹配到了`/bonjour`，直接写入响应流，并返回，没有进一步处理。
- en: Close Chrome and shut down the web server.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Practicing and exploring
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践与探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试你的知识和理解，进行一些实践练习，并通过深入研究来探索本章的主题。
- en: Exercise 14.1 – Test your knowledge
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: List six method names that can be specific in an HTTP request.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个可以在HTTP请求中指定的方法名称。
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个状态码及其描述，这些状态码可以在HTTP响应中返回。
- en: In ASP.NET Core, what is the `Startup` class used for?
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP.NET Core中，`Startup`类的作用是什么？
- en: What does the acronym HSTS stand for and what does it do?
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩写HSTS代表什么，它有什么作用？
- en: How do you enable static HTML pages for a website?
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为网站启用静态HTML页面？
- en: How do you mix C# code into the middle of HTML to create a dynamic page?
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在HTML中间混合C#代码以创建动态页面？
- en: How can you define shared layouts for Razor Pages?
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何定义Razor Pages的共享布局？
- en: How can you separate the markup from the code-behind in a Razor Page?
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在Razor Page中分离标记与代码背后的代码？
- en: How do you configure an Entity Framework Core data context for use with an ASP.NET
    Core website?
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何配置Entity Framework Core数据上下文以用于ASP.NET Core网站？
- en: How can you reuse Razor Pages with ASP.NET Core 2.2 or later?
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在ASP.NET Core 2.2或更高版本中重用Razor Pages？
- en: Exercise 14.2 – Practice building a data-driven web page
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.2 – 实践构建数据驱动的网页
- en: Add a Razor Page to the `Northwind.Web` website that enables the user to see
    a list of customers grouped by country. When the user clicks on a customer record,
    they then see a page showing the full contact details of that customer, and a
    list of their orders.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 向`Northwind.Web`网站添加一个Razor Page，使用户能够查看按国家分组的客户列表。当用户点击客户记录时，他们将看到一个显示该客户完整联系信息以及其订单列表的页面。
- en: Exercise 14.3 – Practice building web pages for console apps
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.3 – 实践为控制台应用构建网页
- en: Reimplement some of the console apps from earlier chapters as Razor Pages, for
    example, from *Chapter 4*, *Writing, Debugging, and Testing Functions*, provide
    a web user interface to output times tables, calculate tax, and generate factorials
    and the Fibonacci sequence.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 将前几章的一些控制台应用重新实现为Razor Pages，例如，从*第4章*，*编写、调试和测试函数*，提供一个Web用户界面来输出乘法表、计算税款、生成阶乘和斐波那契序列。
- en: Exercise 14.4 – Explore topics
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.4 – 探索主题
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，深入了解本章涵盖的主题：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages)'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-14---building-websites-using-aspnet-core-razor-pages)'
- en: Summary
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the foundations of web development using
    HTTP, how to build a simple website that returns static files, and you used ASP.NET
    Core Razor Pages with Entity Framework Core to create web pages that were dynamically
    generated from information in a database.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你学习了使用HTTP进行Web开发的基础知识，如何构建一个返回静态文件的简单网站，以及如何使用ASP.NET Core Razor Pages结合Entity
    Framework Core来创建从数据库信息动态生成的网页。
- en: We reviewed the HTTP request and response pipeline, what the helper extension
    methods do, and how you can add your own middleware that affects processing.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了HTTP请求和响应管道，辅助扩展方法的作用，以及如何添加自己的中间件，影响处理过程。
- en: In the next chapter, you will learn how to build more complex websites using
    ASP.NET Core MVC, which separates the technical concerns of building a website
    into models, views, and controllers to make them easier to manage.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章，你将学习如何使用ASP.NET Core MVC构建更复杂的网站，该框架将构建网站的技术关注点分离为模型、视图和控制器，使其更易于管理。
