- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Building User Interfaces Using Blazor
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blazor构建用户界面
- en: This chapter is about using Blazor to build user interfaces. I will describe
    the different flavors of Blazor and their pros and cons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于使用Blazor构建用户界面的。我将描述Blazor的不同变体及其优缺点。
- en: You will learn how to build Blazor components that can execute their code on
    the web server or in the web browser. When hosted with Blazor Server, it uses
    SignalR to communicate needed updates to the user interface in the browser. When
    hosted with Blazor WebAssembly, the components execute their code in the client
    and must make HTTP calls to interact with the server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学会如何构建能在Web服务器或Web浏览器中执行代码的Blazor组件。当与Blazor Server托管时，它使用SignalR向浏览器中的用户界面发送必要的更新。当与Blazor
    WebAssembly托管时，组件在客户端执行其代码，并必须通过HTTP调用与服务器交互。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨以下主题：
- en: Understanding Blazor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Blazor
- en: Comparing Blazor project templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较Blazor项目模板
- en: Building components using Blazor Server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Blazor Server构建组件
- en: Abstracting a service for a Blazor component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Blazor组件抽象服务
- en: Building components using Blazor WebAssembly
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Blazor WebAssembly构建组件
- en: Improving Blazor WebAssembly apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进Blazor WebAssembly应用
- en: Understanding Blazor
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Blazor
- en: Blazor lets you build shared components and interactive web user interfaces
    using C# instead of JavaScript. In April 2019, Microsoft announced that Blazor
    "is no longer experimental and we are committing to ship it as a supported web
    UI framework, including support for running client side in the browser on WebAssembly."
    Blazor is supported on all modern browsers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor允许你使用C#而非JavaScript构建共享组件和交互式Web用户界面。2019年4月，微软宣布Blazor“不再是实验性的，我们将承诺将其作为支持的Web
    UI框架发布，包括在浏览器中基于WebAssembly运行客户端的支持。”Blazor支持所有现代浏览器。
- en: JavaScript and friends
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript及其伙伴们
- en: Traditionally, any code that needs to execute in a web browser is written using
    the JavaScript programming language or a higher-level technology that **transpiles**
    (transforms or compiles) into JavaScript. This is because all browsers have supported
    JavaScript for about two decades, so it has become the lowest common denominator
    for implementing business logic on the client side.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，任何需要在Web浏览器中执行的代码都是使用JavaScript编程语言或**转译**（转换或编译）成JavaScript的高级技术编写的。这是因为所有浏览器都支持JavaScript已有大约二十年，因此它已成为客户端实现业务逻辑的最低共同标准。
- en: JavaScript does have some issues, however. Although it has superficial similarities
    to C-style languages like C# and Java, it is actually very different once you
    dig beneath the surface. It is a dynamically typed pseudo-functional language
    that uses prototypes instead of class inheritance for object reuse. It might look
    human, but you will get a surprise when it's revealed to actually be a Skrull.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript确实存在一些问题。尽管它与C#和Java等C风格语言有表面上的相似性，但一旦深入挖掘，你会发现它实际上非常不同。它是一种动态类型的伪函数式语言，使用原型而非类继承来实现对象重用。它可能看起来像人类，但当它揭示出实际上是Skrull时，你会感到惊讶。
- en: Wouldn't it be great if we could use the same language and libraries in a web
    browser as we do on the server side?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果能在Web浏览器中使用与服务器端相同的语言和库，那该多好？
- en: Silverlight – C# and .NET using a plugin
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Silverlight – 使用插件的C#和.NET
- en: Microsoft made a previous attempt at achieving this goal with a technology named
    Silverlight. When Silverlight 2.0 was released in 2008, a C# and .NET developer
    could use their skills to build libraries and visual components that were executed
    in the web browser by the Silverlight plugin.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft曾尝试通过一种名为Silverlight的技术实现此目标。2008年发布的Silverlight 2.0允许C#和.NET开发者运用其技能构建在Web浏览器中通过Silverlight插件执行的库和可视组件。
- en: By 2011 and Silverlight 5.0, Apple's success with the iPhone and Steve Jobs'
    hatred of browser plugins like Flash eventually led to Microsoft abandoning Silverlight
    since, like Flash, Silverlight is banned from iPhones and iPads.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到了2011年，随着Silverlight 5.0的推出，苹果公司在iPhone上的成功以及史蒂夫·乔布斯对Flash等浏览器插件的厌恶，最终导致微软放弃Silverlight。因为与Flash类似，Silverlight在iPhone和iPad上被禁用。
- en: WebAssembly – a target for Blazor
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebAssembly – Blazor的目标
- en: 'A recent development in browsers has given Microsoft the opportunity to make
    another attempt. In 2017, the **WebAssembly Consensus** was completed, and all
    major browsers now support it: Chromium (Chrome, Edge, Opera, Brave), Firefox,
    and WebKit (Safari). Blazor is not supported by Microsoft''s Internet Explorer
    because it is a legacy web browser.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器的一项最新发展为微软提供了再次尝试的机会。2017年，**WebAssembly共识**完成，所有主流浏览器现在都支持它：Chromium（Chrome、Edge、Opera、Brave）、Firefox和WebKit（Safari）。Blazor不支持微软的Internet
    Explorer，因为它是一个遗留的Web浏览器。
- en: '**WebAssembly** (**Wasm**) is a binary instruction format for a virtual machine
    that provides a way to run code written in multiple languages on the web at near-native
    speed. Wasm is designed as a portable target for the compilation of high-level
    languages like C#.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebAssembly**（**Wasm**）是一种为虚拟机设计的二进制指令格式，它提供了一种在网页上以接近原生速度运行多种语言编写的代码的方法。Wasm被设计为C#等高级语言编译的便携目标。'
- en: Understanding Blazor hosting models
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Blazor托管模型
- en: 'Blazor is a single programming or app model with multiple hosting models:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor是一个具有多种托管模型的单一编程或应用模型：
- en: '**Blazor Server** runs on the server side, so the C# code that you write has
    full access to all resources that your business logic might need without needing
    to authenticate. It then uses SignalR to communicate user interface updates to
    the client side.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Server** 运行于服务器端，因此你编写的C#代码可以完全访问业务逻辑可能需要的所有资源，无需进行认证。然后，它使用SignalR将用户界面更新传达给客户端。'
- en: The server must keep a live SignalR connection to each client and track the
    current state of every client, so Blazor Server does not scale well if you need
    to support lots of clients. It first shipped as part of ASP.NET Core 3.0 in September
    2019 and is included with .NET 5.0 and later.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器必须保持与每个客户端的实时SignalR连接，并跟踪每个客户端的当前状态，因此如果需要支持大量客户端，Blazor Server的扩展性不佳。它于2019年9月作为ASP.NET
    Core 3.0的一部分首次发布，并包含在.NET 5.0及更高版本中。
- en: '**Blazor WebAssembly** runs on the client side, so the C# code that you write
    only has access to resources in the browser and it must make HTTP calls (that
    might require authentication) before it can access resources on the server. It
    first shipped as an extension to ASP.NET Core 3.1 in May 2020 and was versioned
    3.2 because it is a Current release and therefore not covered by ASP.NET Core
    3.1''s Long Term Support. The Blazor WebAssembly 3.2 version used the Mono runtime
    and Mono libraries; .NET 5 and later versions use the Mono runtime and the .NET
    5 libraries. "*Blazor WebAssembly runs on a .NET IL interpreter without any JIT
    so it''s not going to win any speed competitions. We have made some significant
    speed improvements though in .NET 5, and we expect to improve things further for
    .NET 6.*"—Daniel Roth'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly** 运行于客户端，因此你编写的C#代码仅能访问浏览器内的资源，并且必须在访问服务器资源前进行HTTP调用（可能需要认证）。它于2020年5月作为ASP.NET
    Core 3.1的扩展首次发布，版本号为3.2，因为它是一个当前版本，因此不受ASP.NET Core 3.1长期支持的覆盖。Blazor WebAssembly
    3.2版本使用了Mono运行时和Mono库；.NET 5及更高版本则使用Mono运行时和.NET 5库。“*Blazor WebAssembly运行在.NET
    IL解释器上，没有JIT，因此它不会在速度竞赛中获胜。不过，我们在.NET 5中实现了一些显著的速度改进，并预计在.NET 6中进一步改善。*”—Daniel
    Roth'
- en: '**.NET MAUI Blazor App**, aka **Blazor Hybrid**, runs in the .NET process,
    renders its web UI to a web view control using a local interop channel, and is
    hosted in a .NET MAUI app. It is conceptually like Electron apps that use Node.js.
    We will see this hosting model in online chapter, *Chapter 19*, *Building Mobile
    and Desktop Apps Using .NET MAUI*.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI Blazor App**，又称**Blazor混合模式**，运行在.NET进程中，使用本地互操作通道将Web UI渲染到WebView控件，并托管在.NET
    MAUI应用中。其概念类似于使用Node.js的Electron应用。我们将在在线章节《第19章：使用.NET MAUI构建移动和桌面应用》中看到这种托管模型。'
- en: This multi-host model means that, with careful planning, a developer can write
    Blazor components once, and then run them on the web server side, web client side,
    or within a desktop app.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种多宿主模型意味着，通过精心规划，开发者可以编写一次Blazor组件，然后既可以在Web服务器端、Web客户端运行，也可以在桌面应用中运行。
- en: Although Blazor Server is supported on Internet Explorer 11, Blazor WebAssembly
    is not.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Blazor Server支持Internet Explorer 11，但Blazor WebAssembly不支持。
- en: Blazor WebAssembly has optional support for **Progressive Web Apps** (**PWAs**),
    meaning a website visitor can use a browser menu to add the app to their desktop
    and run the app offline.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly对**渐进式Web应用**（**PWAs**）提供可选支持，这意味着网站访问者可以通过浏览器菜单将应用添加到桌面，并在离线状态下运行该应用。
- en: Understanding Blazor components
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Blazor组件
- en: It is important to understand that Blazor is used to create **user interface
    components**. Components define how to render the user interface, react to user
    events, and can be composed and nested, and compiled into a NuGet Razor class
    library for packaging and distribution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解Blazor用于创建**用户界面组件**。组件定义了如何渲染用户界面，响应用户事件，并且可以组合和嵌套，编译成NuGet Razor类库进行打包和分发。
- en: 'For example, you might create a component named `Rating.razor`, as shown in
    the following markup:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以创建一个名为`Rating.razor`的组件，如下面的标记所示：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instead of a single file with both markup and an `@code` block, the code can
    be stored in a separate code-behind file named `Rating.razor.cs`. The class in
    this file must be `partial` and have the same name as the component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以存储在一个名为`Rating.razor.cs`的单独代码隐藏文件中，而不是单个文件中既有标记又有`@code`块。该文件中的类必须是`partial`，并且与组件同名。
- en: 'You could then use the component on a web page, as shown in the following markup:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在网页上使用该组件，如下面的标记所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are many built-in Blazor components, including ones to set elements like
    `<title>` in the `<head>` section of a web page, and plenty of third parties who
    will sell you components for common purposes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多内置的Blazor组件，包括设置网页`<head>`部分中`<title>`等元素的组件，以及许多第三方供应商，他们会向您出售常见用途的组件。
- en: In the future, Blazor might not be limited to only creating user interface components
    using web technologies. Microsoft has an experimental technology known as **Blazor
    Mobile Bindings** that allows developers to use Blazor to build mobile user interface
    components. Instead of using HTML and CSS to build a web user interface, it uses
    XAML and .NET MAUI to build a cross-platform graphical user interface.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，Blazor可能不仅限于使用Web技术创建用户界面组件。微软有一个名为**Blazor Mobile Bindings**的实验性技术，允许开发者使用Blazor构建移动用户界面组件。它不是使用HTML和CSS构建Web用户界面，而是使用XAML和.NET
    MAUI构建跨平台的图形用户界面。
- en: What is the difference between Blazor and Razor?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor和Razor之间有什么区别？
- en: You might wonder why Blazor components use `.razor` as their file extension.
    Razor is a template markup syntax that allows the mixing of HTML and C#. Older
    technologies that support Razor syntax use the `.cshtml` file extension to indicate
    the mix of C# and HTML.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会好奇为什么Blazor组件使用`.razor`作为它们的文件扩展名。Razor是一种模板标记语法，允许混合HTML和C#。支持Razor语法的旧技术使用`.cshtml`文件扩展名来表示C#和HTML的混合。
- en: 'Razor syntax is used for:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Razor语法用于：
- en: ASP.NET Core MVC **views** and **partial views** that use the `.cshtml` file
    extension. The business logic is separated into a controller class that treats
    the view as a template to push the view model to, which then outputs it to a web
    page.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC **视图**和**部分视图**使用`.cshtml`文件扩展名。业务逻辑被分离到一个控制器类中，该类将视图视为模板，推送视图模型，然后将其输出到网页。
- en: '**Razor Pages** that use the `.cshtml` file extension. The business logic can
    be embedded or separated into a file that uses the `.cshtml.cs` file extension.
    The output is a web page.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Razor Pages**使用`.cshtml`文件扩展名。业务逻辑可以嵌入或分离到一个使用`.cshtml.cs`文件扩展名的文件中。输出是一个网页。'
- en: '**Blazor components** that use the `.razor` file extension. The output is not
    a web page, although layouts can be used to wrap a component so it outputs as
    a web page, and the `@page` directive can be used to assign a route that defines
    the URL path to retrieve the component as a page.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor组件**使用`.razor`文件扩展名。输出不是一个网页，尽管可以使用布局将组件包装起来，使其输出为网页，并且可以使用`@page`指令分配一个定义URL路径以检索组件作为页面的路由。'
- en: Comparing Blazor project templates
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较Blazor项目模板
- en: One way to understand the choice between the Blazor Server and Blazor WebAssembly
    hosting models is to review the differences in their default project templates.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Blazor Server和Blazor WebAssembly托管模型之间选择的一种方法是审查它们默认项目模板之间的差异。
- en: Reviewing the Blazor Server project template
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查Blazor Server项目模板
- en: 'Let us look at the default template for a Blazor Server project. Mostly you
    will see that it is the same as an ASP.NET Core Razor Pages template, with a few
    key additions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Blazor Server项目的默认模板。您会发现它大多与ASP.NET Core Razor Pages模板相同，有几个关键的添加：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下表所定义：
- en: 'Project template: **Blazor Server App** / `blazorserver`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**Blazor Server App** / `blazorserver`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.BlazorServer`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Visual Studio options: **Authentication Type**: **None**; **Configure
    for HTTPS**: selected; **Enable Docker**: cleared'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Northwind.BlazorServer` as the active OmniSharp
    project.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorServer` project.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project/folder, open `Northwind.BlazorServer.csproj`
    and note that it is identical to an ASP.NET Core project that uses the Web SDK
    and targets .NET 6.0.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Program.cs`, and note it is almost identical to an ASP.NET Core project.
    Differences include the section that configures services, with its call to the
    `AddServerSideBlazor` method, as shown highlighted in the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also note the section for configuring the HTTP pipeline, which adds the calls
    to the `MapBlazorHub` and `MapFallbackToPage` methods that configure the ASP.NET
    Core app to accept incoming SignalR connections for Blazor components, while other
    requests fall back to a Razor Page named `_Host.cshtml`, as shown highlighted
    in the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `Pages` folder, open `_Host.cshtml` and note that it sets a shared layout
    named `_Layout` and renders a Blazor component of type `App` that is prerendered
    on the server, as shown in the following markup:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `Pages` folder, open the shared layout file named `_Layout.cshtml`,
    as shown in the following markup:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<div id="blazor-error-ui">` for showing Blazor errors that will appear as
    a yellow bar at the bottom of the web page when an error occurs'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The script block for `blazor.server.js` manages the SignalR connection back
    to the server
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.BlazorServer` folder, open `App.razor` and note that it defines
    a `Router` for all components found in the current assembly, as shown in the following
    code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a matching route is found, then `RouteView` is executed that sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a matching route is not found, then `LayoutView` is executed that renders
    the internal markup (in this case, a simple paragraph element with a message telling
    the visitor there is nothing at this address) inside `MainLayout`.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open `MainLayout.razor` and note that it defines `<div>`
    for a sidebar containing a navigation menu that is implemented by the `NavMenu.razor`
    component file in this project, and an HTML5 element such as `<main>` and `<article>`
    for the content, as shown in the following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `Shared` folder, open `MainLayout.razor.css` and note that it contains
    isolated CSS styles for the component.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open `NavMenu.razor` and note that it has three menu
    items for **Home**, **Counter**, and **Fetch data**. These are created by using
    a Microsoft-provided Blazor component named `NavLink`, as shown in the following
    markup:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `Pages` folder, open `FetchData.razor` and note that it defines a component
    that fetches weather forecasts from an injected dependency weather service and
    then renders them in a table, as shown in the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Pages` 文件夹中，打开 `FetchData.razor` 并注意它定义了一个组件，该组件从注入的依赖天气服务获取天气预报，然后将其呈现在表格中，如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `Data` folder, open `WeatherForecastService.cs` and note that it is
    *not* a Web API controller class; it is just an ordinary class that returns random
    weather data, as shown in the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Data` 文件夹中，打开 `WeatherForecastService.cs` 并注意它*不是*一个 Web API 控制器类；它只是一个返回随机天气数据的普通类，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Understanding CSS and JavaScript isolation
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 CSS 和 JavaScript 隔离
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure this does not conflict with site-level CSS and JavaScript, Blazor supports
    CSS and JavaScript isolation. If you have a component named `Index.razor`, simply
    create a CSS file named `Index.razor.css`. The styles defined within this file
    will override any other styles in the project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 组件通常需要提供自己的 CSS 来应用样式或 JavaScript 来执行不能纯粹在 C# 中完成的操作，例如访问浏览器 API。为了确保这不会与站点级别的
    CSS 和 JavaScript 冲突，Blazor 支持 CSS 和 JavaScript 隔离。如果您有一个名为 `Index.razor` 的组件，只需创建一个名为
    `Index.razor.css` 的 CSS 文件。该文件中定义的样式将覆盖项目中的任何其他样式。
- en: Understanding Blazor routing to page components
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Blazor 路由到页面组件
- en: The `Router` component that we saw in the `App.razor` file enables routing to
    components. The markup for creating an instance of a component looks like an HTML
    tag where the name of the tag is the component type. Components can be embedded
    on a web page using an element, for example, `<Rating Stars="5" />`, or can be
    routed to like a Razor Page or MVC controller.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `App.razor` 文件中看到的 `Router` 组件启用了组件的路由。创建组件实例的标记看起来像一个 HTML 标签，其中标签的名称是组件类型。组件可以使用元素嵌入到网页中，例如
    `<Rating Stars="5" />`，或者可以像 Razor 页面或 MVC 控制器一样路由。
- en: How to define a routable page component
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何定义可路由的页面组件
- en: 'To create a routable page component, add the `@page` directive to the top of
    a component''s `.razor` file, as shown in the following markup:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建可路由的页面组件，请在组件的 `.razor` 文件顶部添加 `@page` 指令，如下所示：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code is the equivalent of an MVC controller decorated with the
    `[Route]` attribute, as shown in the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码相当于一个装饰有 `[Route]` 属性的 MVC 控制器，如下所示：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for components decorated with the `[Route]` attribute and registers
    their URL paths.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router` 组件在其 `AppAssembly` 参数中专门扫描组件，这些组件装饰有 `[Route]` 属性，并注册它们的 URL 路径。'
- en: Any single-page component can have multiple `@page` directives to register multiple
    routes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 任何单页组件都可以有多个 `@page` 指令来注册多个路由。
- en: At runtime, the page component is merged with any specific layout that you have
    specified, just like an MVC view or Razor Page would be. By default, the Blazor
    Server project template defines `MainLayout.razor` as the layout for page components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，页面组件将与您指定的任何特定布局合并，就像 MVC 视图或 Razor 页面一样。默认情况下，Blazor Server 项目模板将 `MainLayout.razor`
    定义为页面组件的布局。
- en: '**Good Practice**: By convention, put routable page components in the `Pages`
    folder.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：按照惯例，将可路由的页面组件放在 `Pages` 文件夹中。'
- en: How to navigate Blazor routes
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何导航 Blazor 路由
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 提供了一个名为 `NavigationManager` 的依赖服务，该服务理解 Blazor 路由和 `NavLink` 组件。
- en: The `NavigateTo` method is used to go to the specified URL.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavigateTo` 方法用于转到指定的 URL。'
- en: How to pass route parameters
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何传递路由参数
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the passed values by binding the parameter to a property
    in the code block using the `[Parameter]` attribute, as shown in the following
    markup:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 路由可以包含大小写不敏感的命名参数，并且您的代码可以通过将参数绑定到代码块中的属性来最轻松地访问传递的值，使用 `[Parameter]`
    属性，如下所示：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter with `?` and use the null coalescing
    operator in the `OnParametersSet` method, as shown in the following markup:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的处理应具有默认值的参数的方法是，当参数缺失时，在参数后缀加上 `?` 并在 `OnParametersSet` 方法中使用空合并运算符，如下所示：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Understanding base component classes
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解基础组件类
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default named `ComponentBase`, as shown in the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnParametersSet`方法由组件默认继承的基类`ComponentBase`定义，如下面的代码所示：'
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in the following table:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComponentBase`有一些有用的方法，您可以调用和重写，如下表所示：'
- en: '| Method(s) | Description |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer''s synchronization context. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `InvokeAsync` | 调用此方法以在关联渲染器的同步上下文中执行函数。 |'
- en: '| `OnAfterRender`, `OnAfterRenderAsync` | Override these methods to invoke
    code after each time the component has been rendered. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `OnAfterRender`, `OnAfterRenderAsync` | 重写这些方法以在每次组件渲染后调用代码。 |'
- en: '| `OnInitialized`, `OnInitializedAsync` | Override these methods to invoke
    code after the component has received its initial parameters from its parent in
    the render tree. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `OnInitialized`, `OnInitializedAsync` | 重写这些方法以在组件从渲染树中的父级接收到初始参数后调用代码。 |'
- en: '| `OnParametersSet`, `OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `OnParametersSet`, `OnParametersSetAsync` | 重写这些方法以在组件接收到参数且值已分配给属性后调用代码。
    |'
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `ShouldRender` | 重写此方法以指示组件是否应进行渲染。 |'
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `StateHasChanged` | 调用此方法以使组件重新渲染。 |'
- en: Blazor components can have shared layouts in a similar way to MVC views and
    Razor Pages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor组件可以以类似于MVC视图和Razor页面的方式拥有共享布局。
- en: 'Create a `.razor` component file, but make it explicitly inherit from `LayoutComponentBase`,
    as shown in the following markup:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`.razor`组件文件，但需明确继承自`LayoutComponentBase`，如下面的标记所示：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基类有一个名为`Body`的属性，您可以在布局中的正确位置在标记中渲染它。
- en: 'Set a default layout for components in the `App.razor` file and its `Router`
    component. To explicitly set a layout for a component, use the `@layout` directive,
    as shown in the following markup:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.razor`文件及其`Router`组件中为组件设置默认布局。要明确为组件设置布局，请使用`@layout`指令，如下面的标记所示：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to use the navigation link component with routes
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用导航链接组件与路由
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，您使用`<a>`元素来定义导航链接，如下面的标记所示：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blazor中，使用`<NavLink>`组件，如下面的标记所示：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match on the current location URL.
    If your CSS uses a different class name, then you can set the class name in the
    `NavLink.ActiveClass` property.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavLink`组件优于锚元素，因为它会自动将其类设置为`active`，如果其`href`与当前位置URL匹配。如果您的CSS使用不同的类名，则可以在`NavLink.ActiveClass`属性中设置类名。'
- en: 'By default, in the matching algorithm, the `href` is a path *prefix*, so if
    `NavLink` has an `href` of `/customers`, as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在匹配算法中，`href`是一个路径*前缀*，因此如果`NavLink`具有`/customers`的`href`，如前述代码示例所示，则它将匹配以下所有路径并将它们都设置为具有`active`类样式：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    paths, set the `Match` parameter to `NavLinkMatch.All`, as shown in the following
    code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保匹配算法仅对*所有*路径执行匹配，将`Match`参数设置为`NavLinkMatch.All`，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you set other attributes such as `target`, they are passed through to the
    underlying `<a>` element that is generated.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您设置其他属性，如`target`，它们将传递给生成的底层`<a>`元素。
- en: Running the Blazor Server project template
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Blazor Server项目模板
- en: 'Now that we have reviewed the project template and the important parts that
    are specific to Blazor Server, we can start the website and review its behavior:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了项目模板以及Blazor Server特有的重要部分，我们可以启动网站并审查其行为：
- en: In the `Properties` folder, open `launchSettings.json`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Properties`文件夹中，打开`launchSettings.json`。
- en: 'Modify the `applicationUrl` to use port `5000` for `HTTP` and port `5001` for
    `HTTPS`, as shown highlighted in the following markup:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Start the website.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Fetch data**, as shown in *Figure 17.1*:![](img/B17442_19_01.png)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.1: Fetching weather data into a Blazor Server app'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the browser address bar, change the route to `/apples` and note the missing
    message, as shown in *Figure 17.2*:![](img/B17442_19_02.png)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.2: The missing component message'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing the Blazor WebAssembly project template
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create a Blazor WebAssembly project. I will not show code in the
    book if the code is the same as in a Blazor Server project:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project to the `PracticalApps`
    solution or workspace, as defined in the following list:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Blazor WebAssembly App** / `blazorwasm`'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switches: `--pwa --hosted`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.BlazorWasm`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Authentication Type**: **None**'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: checked'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ASP.NET Core hosted**: checked'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Progressive Web Application**: checked'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While reviewing the generated folders and files, note that three projects are
    generated, as described in the following list:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Client` is the Blazor WebAssembly project in the `Northwind.BlazorWasm\Client`
    folder.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Server` is an ASP.NET Core project website in the `Northwind.BlazorWasm\Server`
    folder for hosting the weather service that has the same implementation for returning
    random weather forecasts as before, but is implemented as a proper Web API controller
    class. The project file has project references to `Shared` and `Client`, and a
    package reference to support Blazor WebAssembly on the server side.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Shared` is a class library in the `Northwind.BlazorWasm\Shared`
    folder that contains models for the weather service.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The folder structure is simplified, as shown in *Figure 17.3*:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B17442_19_03.png)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.3: The folder structure for the Blazor WebAssembly project template'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are two ways to deploy a Blazor WebAssembly app. You could deploy just
    the `Client` project by placing its published files in any static hosting web
    server. It could be configured to call the weather service that you created in
    *Chapter 16*, *Building and Consuming Web Services*, or you can deploy the `Server`
    project, which references the `Client` app and hosts both the weather service
    and the Blazor WebAssembly app. The app is placed in the server website `wwwroot`
    folder along with any other static assets. You can read more about these choices
    at the following link: [https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly](https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Client` folder, open `Northwind.BlazorWasm.Client.csproj` and note
    that it uses the Blazor WebAssembly SDK and references two WebAssembly packages
    and the `Shared` project, as well as the service worker required for PWA support,
    as shown in the following markup:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `Client` folder, open `Program.cs` and note that the host builder is
    for `WebAssembly` instead of server-side ASP.NET Core, and that it registers a
    dependency service for making HTTP requests, which is an extremely common requirement
    for Blazor WebAssembly apps, as shown in the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `wwwroot` folder, open `index.html` and note the `manifest.json` and
    `service-worker.js` files supporting offline work, and the `blazor.webassembly.js`
    script that downloads all the NuGet packages for Blazor WebAssembly, as shown
    in the following markup:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that the following `.razor` files are identical to those in a Blazor Server
    project:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App.razor`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\MainLayout.razor`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\NavMenu.razor`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\SurveyPrompt.razor`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pages\Counter.razor`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pages\Index.razor`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open `FetchData.razor` and note that the markup is like
    Blazor Server except for the injected dependency service for making HTTP requests,
    as shown highlighted in the following partial markup:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Start the `Northwind.BlazorWasm.Server` project.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the app has the same functionality as before. The Blazor component
    code is executing inside the browser instead of on the server. The weather service
    is running on the web server.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building components using Blazor Server
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a component to list, create, and edit customers
    in the Northwind database. We will build it first for Blazor Server naively, and
    then refactor it to work with both Blazor Server and Blazor WebAssembly.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Defining and testing a simple component
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the new component to the existing Blazor Server project:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project (*not* the `Northwind.BlazorWasm.Server`
    project), in the `Pages` folder, add a new file named `Customers.razor`. In Visual
    Studio, the project item is named **Razor Component**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Component filenames must start with an uppercase letter,
    or you will have compile errors!'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add statements to output a heading for the `Customers` component and define
    a code block that defines a property to store the name of a country, as shown
    in the following markup:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `Pages` folder, in the `Index.razor` component, add statements to the
    bottom of the file to instantiate the `Customers` component twice, once passing
    `Germany` as the country parameter, and once without setting the country, as shown
    in the following markup:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Start the `Northwind.BlazorServer` website project.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` and note the `Customers` components, as
    shown in *Figure 17.4*:![](img/B17442_19_04.png)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.4: The Customers component with the Country parameter set to Germany
    and not set'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the component a routable page component
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in the `Customers.razor` component, add a statement
    at the top of the file to register `/customers` as its route with an optional
    country route parameter, as shown in the following markup:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `Shared` folder, open `NavMenu.razor` and add two list item elements
    for our routable page component to show customers worldwide and in Germany that
    both use an icon of people, as shown in the following markup:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We used an icon of people for the customers menu item. You can see the other
    available icons at the following link: [https://iconify.design/icon-sets/oi/](https://iconify.design/icon-sets/oi/)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the website project.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers in Germany**, and note that the
    country name is correctly passed to the page component and that the component
    uses the same shared layout as the other page components, like `Index.razor`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting entities into a component
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have seen the minimum implementation of a component, we can add
    some useful functionality to it. In this case, we will use the Northwind database
    context to fetch customers from the database:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Northwind.BlazorServer.csproj`, add a reference to the Northwind database
    context project for either SQL Server or SQLite, as shown in the following markup:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Build the `Northwind.BlazorServer` project.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace for working with the Northwind database
    context, as shown in the following code:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the section that configures services, add a statement to register the Northwind
    database context in the dependency services collection, as shown in the following
    code:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open `_Imports.razor` and import namespaces for working with the Northwind
    entities so that Blazor components that we build do not need to import the namespaces
    individually, as shown in the following markup:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `_Imports.razor` file only applies to `.razor` files. If you use code-behind
    `.cs` files to implement component code, then they must have namespaces imported
    separately or use global usings to implicitly import the namespace.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in `Customers.razor`, add statements to inject the Northwind
    database context and then use it to output a table of all customers, as shown
    in the following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Start the `Northwind.BlazorServer` project website.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers Worldwide**, and note that the
    table of customers loads from the database and renders in the web page, as shown
    in *Figure 17.5*:![](img/B17442_19_05.png)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.5: The list of customers worldwide'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers in Germany**, and note that the
    table of customers is filtered to only show German customers.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**德国客户**，注意客户表此时仅显示德国客户。
- en: In the browser address bar, change `Germany` to `UK`, and note that the table
    of customers is filtered to only show UK customers.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器地址栏中，将`Germany`更改为`UK`，注意客户表此时仅显示英国客户。
- en: In the left navigation menu, click **Home**, and note that the customers component
    also works correctly when used as an embedded component on a page.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**首页**，注意客户组件作为嵌入页面的一部分时也能正确工作。
- en: Click any of the edit or delete buttons and note that they return a message
    saying `Sorry, there's nothing at this address`. because we have not yet implemented
    that functionality.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任意编辑或删除按钮，注意它们会返回一条消息，内容为`对不起，此地址下没有任何内容`，因为我们尚未实现该功能。
- en: Close the browser.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: Shut down the web server.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: Abstracting a service for a Blazor component
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Blazor组件抽象服务
- en: Currently, the Blazor component directly calls the Northwind database context
    to fetch the customers. This works fine in Blazor Server since the component executes
    on the server. But this component would not work when hosted in Blazor WebAssembly.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Blazor组件直接调用Northwind数据库上下文来获取客户信息。这在Blazor服务器上运行良好，因为组件在服务器上执行。但当该组件托管在Blazor
    WebAssembly上时，将无法工作。
- en: 'We will now create a local dependency service to enable better reuse of the
    components:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个本地依赖服务，以实现组件的更好复用：
- en: In the `Northwind.BlazorServer` project, in the `Data` folder, add a new file
    named `INorthwindService.cs`. (The Visual Studio project item template is named
    **Interface**.)
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.BlazorServer`项目中，在`Data`文件夹中，添加一个名为`INorthwindService.cs`的新文件。（Visual
    Studio项目项模板名为**接口**。）
- en: 'Modify its contents to define a contract for a local service that abstracts
    CRUD operations, as shown in the following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一个本地服务的契约，该服务抽象了CRUD操作，如下所示：
- en: '[PRE36]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the `Data` folder, add a new file named `NorthwindService.cs` and modify
    its contents to implement the `INorthwindService` interface by using the Northwind
    database context, as shown in the following code:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Data`文件夹中，添加一个名为`NorthwindService.cs`的新文件，并修改其内容以使用Northwind数据库上下文实现`INorthwindService`接口，如下所示：
- en: '[PRE37]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In `Program.cs`, in the section that configures services, add a statement to
    register `NorthwindService` as a transient service that implements the `INorthwindService`
    interface, as shown in the following code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在配置服务的部分，添加一条语句，将`NorthwindService`注册为实现`INorthwindService`接口的瞬态服务，如下所示：
- en: '[PRE38]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `Pages` folder, open `Customers.razor` and replace the directive to
    inject the Northwind database context with a directive to inject the registered
    Northwind service, as shown in the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，打开`Customers.razor`文件，将注入Northwind数据库上下文的指令替换为注入已注册的Northwind服务的指令，如下所示：
- en: '[PRE39]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Modify the `OnParametersSetAsync` method to call the service, as shown highlighted
    in the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`OnParametersSetAsync`方法以调用服务，如下所示：
- en: '[PRE40]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Start the `Northwind.BlazorServer` website project and confirm that it retains
    the same functionality as before.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.BlazorServer`网站项目，并确认它保留了与之前相同的功能。
- en: Defining forms using the EditForm component
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EditForm组件定义表单
- en: Microsoft provides ready-made components for building forms. We will use them
    to provide, create, and edit functionality for customers.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft提供了现成的组件用于构建表单。我们将使用它们来提供、创建和编辑客户的功能。
- en: Microsoft provides the `EditForm` component and several form elements such as
    `InputText` to make it easier to use forms with Blazor.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft提供了`EditForm`组件及`InputText`等若干表单元素，以便于在Blazor中更轻松地使用表单。
- en: '`EditForm` can have a model set to bind it to an object with properties and
    event handlers for custom validation, as well as recognizing standard Microsoft
    validation attributes on the model class, as shown in the following code:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm`可以设置一个模型，将其绑定到具有属性和自定义验证事件处理程序的对象，并识别模型类上的标准Microsoft验证属性，如下所示：'
- en: '[PRE41]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As an alternative to a `ValidationSummary` component, you can use the `ValidationMessage`
    component to show a message next to an individual form element.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`ValidationSummary`组件的替代，您可以使用`ValidationMessage`组件在单个表单元素旁边显示消息。
- en: Building and using a customer form component
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建并使用客户表单组件
- en: 'Now we can create a shared component to create or edit a customer:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个共享组件来创建或编辑客户：
- en: In the `Shared` folder, create a new file named `CustomerDetail.razor`. (The
    Visual Studio project item template is named **Razor Component**.) This component
    will be reused on multiple page components.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shared`文件夹中，创建一个名为`CustomerDetail.razor`的新文件。（Visual Studio项目项模板名为**Razor组件**。）此组件将在多个页面组件中重用。
- en: 'Modify its contents to define a form to edit the properties of a customer,
    as shown in the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一个表单来编辑客户属性，如下列代码所示：
- en: '[PRE42]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the `Pages` folder, create a new file named `CreateCustomer.razor`. This
    will be a routable page component.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，创建一个名为`CreateCustomer.razor`的新文件。这将是一个可路由的页面组件。
- en: 'Modify its contents to use the customer detail component to create a new customer,
    as shown in the following code:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以使用客户详情组件来创建新客户，如下列代码所示：
- en: '[PRE43]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the `Pages` folder, open the file named `Customers.razor` and after the
    `<h3>` element, add a `<div>` element with a button to navigate to the `createcustomer`
    page component, as shown in the following markup:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，打开名为`Customers.razor`的文件，并在`<h3>`元素后添加一个带有按钮的`<div>`元素，以导航到`createcustomer`页面组件，如下列标记所示：
- en: '[PRE44]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the `Pages` folder, create a new file named `EditCustomer.razor` and modify
    its contents to use the customer detail component to edit and save changes to
    an existing customer, as shown in the following code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，创建一个名为`EditCustomer.razor`的新文件，并修改其内容以使用客户详情组件来编辑和保存对现有客户的更改，如下列代码所示：
- en: '[PRE45]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the `Pages` folder, create a new file named `DeleteCustomer.razor` and modify
    its contents to use the customer detail component to show the customer that is
    about to be deleted, as shown in the following code:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，创建一个名为`DeleteCustomer.razor`的新文件，并修改其内容以使用客户详情组件来显示即将被删除的客户，如下列代码所示：
- en: '[PRE46]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Testing the customer form component
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试客户表单组件
- en: 'Now we can test the customer form component and how to use it to create, edit,
    and delete customers:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试客户表单组件以及如何使用它来创建、编辑和删除客户：
- en: Start the `Northwind.BlazorServer` website project.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.BlazorServer`网站项目。
- en: Start Chrome.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/`。
- en: Navigate to **Customers Worldwide** and click the **+ Create New** button.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**全球客户**并点击**+ 创建新**按钮。
- en: Enter an invalid **Customer Id** like `ABCDEF`, leave the textbox, and note
    the validation message, as shown in *Figure 17.6*:![](img/B17442_19_06.png)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个无效的**客户ID**，如`ABCDEF`，离开文本框，并注意验证消息，如图*17.6*所示：![](img/B17442_19_06.png)
- en: 'Figure 17.6: Creating a new customer and entering an invalid customer ID'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.6：创建新客户并输入无效的客户ID
- en: Change the **Customer Id** to `ABCDE`, enter values for the other textboxes,
    and click the **Create Customer** button.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**客户ID**更改为`ABCDE`，为其他文本框输入值，并点击**创建客户**按钮。
- en: When the list of customers appears, scroll down to the bottom of the page to
    see the new customer.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当客户列表出现时，滚动到页面底部以查看新客户。
- en: On the **ABCDE** customer row, click the **Edit** icon button, change the address,
    click the **Update** button, and note that the customer record has been updated.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ABCDE**客户行上，点击**编辑**图标按钮，更改地址，点击**更新**按钮，并注意客户记录已被更新。
- en: On the **ABCDE** customer row, click the **Delete** icon button, note the warning,
    click the **Delete Customer** button, and note that the customer record has been
    deleted.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ABCDE**客户行上，点击**删除**图标按钮，注意警告，点击**删除客户**按钮，并注意客户记录已被删除。
- en: Close Chrome and shut down the web server.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Building components using Blazor WebAssembly
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blazor WebAssembly构建组件
- en: Now we will reuse the same functionality in the Blazor WebAssembly project so
    that you can clearly see the key differences.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在Blazor WebAssembly项目中重用相同的功能，以便您可以清楚地看到关键差异。
- en: 'Since we abstracted the local dependency service in the `INorthwindService`
    interface, we will be able to reuse all the components and that interface, as
    well as the entity model classes. The only part that will need to be rewritten
    is the implementation of the `NorthwindService` class. Instead of directly calling
    the `NorthwindContext` class, it will call a customer Web API controller on the
    server side, as shown in *Figure 17.7*:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`INorthwindService`接口中抽象了本地依赖服务，我们将能够重用所有组件以及该接口和实体模型类。唯一需要重写的是`NorthwindService`类的实现。它不再直接调用`NorthwindContext`类，而是调用服务器端的一个自定义Web
    API控制器，如图*17.7*所示：
- en: '![](img/B17442_19_08.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17442_19_08.png)'
- en: 'Figure 17.7: Comparing implementations using Blazor Server and Blazor WebAssembly'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the server for Blazor WebAssembly
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need a web service that the client app can call to get and manage
    customers. If you completed *Chapter 16*, *Building and Consuming Web Services*,
    then you have a customer service in the `Northwind.WebApi` service project that
    you could use. However, to keep this chapter more self-contained, let''s build
    a customer Web API controller in the `Northwind.BlazorWasm.Server` project:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Unlike previous projects, relative path references for shared
    projects like the entity models and the database are two levels up, for example,
    `"..\.."`.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Server` project/folder, open `Northwind.BlazorWasm.Server.csproj` and
    add statements to reference the Northwind database context project for either
    SQL Server or SQLite, as shown in the following markup:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Build the `Northwind.BlazorWasm.Server` project.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Server` project/folder, open `Program.cs` and add a statement to import
    the namespace for working with the Northwind database context, as shown in the
    following code:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the section that configures services, add a statement to register the Northwind
    database context for either SQL Server or SQLite, as shown in the following code:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `Server` project, in the `Controllers` folder, create a file named `CustomersController.cs`
    and add statements to define a Web API controller class with similar CRUD methods
    as before, as shown in the following code:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Configuring the client for Blazor WebAssembly
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Second, we can reuse the components from the Blazor Server project. Since the
    components will be identical, we can copy them and only need to make changes to
    the local implementation of the abstracted Northwind service:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Client` project, open `Northwind.BlazorWasm.Client.csproj` and add
    statements to reference the Northwind entity models library project (not the database
    context project) for either SQL Server or SQLite, as shown in the following markup:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Build the `Northwind.BlazorWasm.Client` project.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Client` project, open `_Imports.razor` and import the `Packt.Shared`
    namespace to make the Northwind entity model types available in all Blazor components,
    as shown in the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `Client` project, in the `Shared` folder, open `NavMenu.razor` and add
    a `NavLink` element for customers worldwide and in France, as shown in the following
    markup:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Copy the `CustomerDetail.razor` component from the `Northwind.BlazorServer`
    project's `Shared` folder to the `Northwind.BlazorWasm` `Client` project's `Shared`
    folder.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following routable page components from the `Northwind.BlazorServer`
    project''s `Pages` folder to the `Northwind.BlazorWasm` `Client` project''s `Pages`
    folder:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CreateCustomer.razor`'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Customers.razor`'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeleteCustomer.razor`'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditCustomer.razor`'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Client` project, create a `Data` folder.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `INorthwindService.cs` file from the `Northwind.BlazorServer` project's
    `Data` folder into the `Client` project's `Data` folder.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Northwind.BlazorServer`项目`Data`文件夹中的`INorthwindService.cs`文件复制到`Client`项目`Data`文件夹中。
- en: In the `Data` folder, add a new file named `NorthwindService.cs`.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Data`文件夹中，添加一个名为`NorthwindService.cs`的新文件。
- en: 'Modify its contents to implement the `INorthwindService` interface by using
    an `HttpClient` to call the customers Web API service, as shown in the following
    code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以实现`INorthwindService`接口，使用`HttpClient`调用客户Web API服务，如下列代码所示：
- en: '[PRE54]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In `Program.cs`, import the `Packt.Shared` and `Northwind.BlazorWasm.Client.Data`
    namespaces.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`Packt.Shared`和`Northwind.BlazorWasm.Client.Data`命名空间。
- en: 'In the section for configuring services, add a statement to register the Northwind
    dependency service, as shown in the following code:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置服务部分，添加一条语句以注册Northwind依赖服务，如下列代码所示：
- en: '[PRE55]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Testing the Blazor WebAssembly components and service
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试Blazor WebAssembly组件和服务
- en: 'Now we can start the Blazor WebAssembly server hosting project to test if the
    components work with the abstracted Northwind service that calls the customers
    Web API service:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动Blazor WebAssembly服务器托管项目，测试组件是否能与调用客户Web API服务的抽象Northwind服务协同工作：
- en: In the `Server` project/folder, start the `Northwind.BlazorWasm.Server` website
    project.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Server`项目/文件夹中，启动`Northwind.BlazorWasm.Server`网站项目。
- en: Start Chrome, show **Developer Tools**, and select the **Network** tab.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome，显示**开发者工具**，并选择**网络**标签页。
- en: Navigate to `https://localhost:5001/`. Your port number will be different since
    it is randomly assigned. View the console output to discover what it is.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/`。由于端口号是随机分配的，您的端口号将有所不同。查看控制台输出以确定其具体值。
- en: Select the **Console** tab and note that Blazor WebAssembly has loaded .NET
    assemblies into the browser cache and that they take about 10 MB of space, as
    shown in *Figure 17.8*:![](img/B17442_19_09.png)
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**控制台**标签页，注意Blazor WebAssembly已将.NET程序集加载到浏览器缓存中，占用约10MB空间，如图*17.8*所示:![](img/B17442_19_09.png)
- en: 'Figure 17.8: Blazor WebAssembly loading .NET assemblies into the browser cache'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图17.8: Blazor WebAssembly将.NET程序集加载到浏览器缓存中'
- en: Select the **Network** tab.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**网络**标签页。
- en: In the left navigation menu, click **Customers Worldwide** and note the HTTP
    `GET` request with the JSON response containing all customers, as shown in *Figure
    17.9*:![](img/B17442_19_10.png)
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**全球客户**并注意包含所有客户的JSON响应的HTTP `GET`请求，如图*17.9*所示:![](img/B17442_19_10.png)
- en: 'Figure 17.9: The HTTP GET request with the JSON response containing all customers'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图17.9: 包含所有客户的JSON响应的HTTP GET请求'
- en: Click the **+ Create New** button, complete the form to add a new customer as
    before, and note the HTTP `POST` request made, as shown in *Figure 17.10*:![](img/B17442_19_11.png)
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+ 创建新**按钮，按照之前的方式填写表格以添加新客户，并注意所发起的HTTP `POST`请求，如图*17.10*所示:![](img/B17442_19_11.png)
- en: 'Figure 17.10: The HTTP POST request for creating a new customer'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图17.10: 创建新客户的HTTP POST请求'
- en: Repeat the steps as before to edit and then delete the newly created customer.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复之前的步骤，编辑并删除新创建的客户。
- en: Close Chrome and shut down the web server.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并停止Web服务器。
- en: Improving Blazor WebAssembly apps
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升Blazor WebAssembly应用性能
- en: There are common ways to improve Blazor WebAssembly apps. We'll look at some
    of the most popular ones now.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 提升Blazor WebAssembly应用性能的常见方法有多种。现在我们将探讨其中最受欢迎的几种。
- en: Enabling Blazor WebAssembly AOT
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用Blazor WebAssembly AOT编译
- en: By default, the .NET runtime used by Blazor WebAssembly is doing IL interpretation
    using an interpreter written in WebAssembly. Unlike other .NET apps, it does not
    use a just-in-time (JIT) compiler, so the performance of CPU-intensive workloads
    is lower than you might hope for.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Blazor WebAssembly使用的.NET运行时通过WebAssembly编写的解释器进行IL解释。与其他.NET应用不同，它不使用即时(JIT)编译器，因此对于CPU密集型工作负载的性能低于预期。
- en: In .NET 6, Microsoft has added support for **ahead-of-time** (**AOT**) compilation,
    but you must explicitly opt-in because although it can dramatically improve runtime
    performance, AOT compilation can take several minutes on small projects like the
    ones in this book and potentially much longer for larger projects. The size of
    the compiled app is also larger than without AOT—typically twice the size. The
    decision to use AOT is therefore based on a balance of increased compile and browser
    download times, with potentially much faster runtimes.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6中，微软新增了对**预先**(**AOT**)编译的支持，但你必须明确选择加入，因为尽管它能显著提升运行时性能，AOT编译在小项目上可能需要几分钟，对于更大的项目则可能更久。编译后的应用大小也比非AOT编译的要大——通常是两倍。因此，是否使用AOT取决于编译和浏览器下载时间的增加与潜在更快的运行时之间的平衡。
- en: AOT was the top requested feature in a Microsoft survey, and the lack of AOT
    was cited as a primary reason why some developers had not yet adopted .NET for
    developing **single-page applications** (**SPAs**).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: AOT是微软调查中需求最高的功能，缺乏AOT被认为是一些开发者尚未采用.NET开发**单页应用**(**SPA**)的主要原因。
- en: 'Let''s install the additional required workload for Blazor AOT named **.NET
    WebAssembly build tools** and then enable AOT for our Blazor WebAssembly project:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装名为**.NET WebAssembly构建工具**的Blazor AOT所需额外工作负载，并为我们的Blazor WebAssembly项目启用AOT：
- en: 'In the command prompt or terminal with admin rights, install the Blazor AOT
    workload, as shown in the following command:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有管理员权限的命令提示符或终端中，安装Blazor AOT工作负载，如下所示：
- en: '[PRE56]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Note the messages, as shown in the following partial output:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下部分输出中的消息：
- en: '[PRE57]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Modify the `Northwind.BlazorWasm.Client` project file to enable AOT, as shown
    highlighted in the following markup:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Northwind.BlazorWasm.Client`项目文件以启用AOT，如下所示突出显示：
- en: '[PRE58]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Publish the `Northwind.BlazorWasm.Client` project, as shown in the following
    command:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布`Northwind.BlazorWasm.Client`项目，如下所示：
- en: '[PRE59]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Note that 75 assemblies have AOT applied, as shown in the following partial
    output:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，有75个程序集应用了AOT，如下所示的部分输出：
- en: '[PRE60]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Wait for the process to finish. The process can take around 20 minutes even
    on a modern multi-core CPU.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待进程完成。即使在现代多核CPU上，此过程也可能需要大约20分钟。
- en: Navigate to the `Northwind.BlazorWasm\Client\bin\release\net6.0\publish` folder
    and note the increased size of the download from 10 MB to 112 MB.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`Northwind.BlazorWasm\Client\bin\release\net6.0\publish`文件夹，并注意下载大小从10 MB增加到了112
    MB。
- en: Without AOT, the downloaded Blazor WebAssembly app took about 10 MB of space.
    With AOT, it took about 112 MB. This increase in size will affect a website visitor's
    experience.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 没有AOT，下载的Blazor WebAssembly应用大约占用10 MB空间。使用AOT后，占用空间约为112 MB。这种大小的增加会影响网站访问者的体验。
- en: The use of AOT is a balance between slower initial download and faster potential
    execution. Depending on the specifics of your app, AOT might not be worth it.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: AOT的使用是在初始下载较慢和潜在执行更快之间的一种平衡。根据你的应用的具体情况，AOT可能并不值得。
- en: Exploring Progressive Web App support
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索渐进式Web应用支持
- en: '**Progressive Web App (PWA)** support in Blazor WebAssembly projects means
    that the web app gains the following benefits:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly项目中的**渐进式Web应用**(**PWA**)支持意味着Web应用获得以下好处：
- en: It acts as a normal web page until the visitor explicitly decides to progress
    to a full app experience.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它作为普通网页运行，直到访问者明确决定升级到完整的应用体验。
- en: After the app is installed, launch it from the OS's start menu or desktop.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用安装后，可从操作系统的开始菜单或桌面启动。
- en: It visually appears in its own app window instead of a browser tab.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在独立的应用窗口中显示，而不是浏览器标签页。
- en: It works offline.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持离线工作。
- en: It automatically updates.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它自动更新。
- en: 'Let us see PWA support in action:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看PWA支持的实际效果：
- en: Start the `Northwind.BlazorWasm.Server` web host project.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.BlazorWasm.Server`Web主机项目。
- en: Navigate to `https://localhost:5001/` or whatever your port number is.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/`或你的端口号。
- en: In Chrome, in the address bar on the right, click the icon with the tooltip
    **Install Northwind.BlazorWasm**, as shown in *Figure 17.11*:![](img/B17442_19_13.png)
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，在地址栏右侧，点击带有提示**安装Northwind.BlazorWasm**的图标，如*图17.11*所示：![](img/B17442_19_13.png)
- en: 'Figure 17.11: Installing Northwind.BlazorWasm as an app'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.11：将Northwind.BlazorWasm安装为应用
- en: Click the **Install** button.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: Close Chrome. You might also need to close the app if it runs automatically.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome。如果应用自动运行，你可能还需要关闭应用。
- en: Launch the **Northwind.BlazorWasm** app from your Windows Start menu or macOS
    Launchpad and note that it has a full app experience.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Windows开始菜单或macOS Launchpad启动**Northwind.BlazorWasm**应用，并注意它具有完整的应用体验。
- en: On the right of the title bar, click the three dots menu and note that you can
    uninstall the app, but do not do so yet.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题栏右侧，点击三个点菜单，并注意您可以卸载应用，但暂时不要这样做。
- en: Navigate to **Developer Tools**. On Windows, press F12 or Ctrl + Shift + I.
    On macOS, press Cmd + Shift + I.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**开发者工具**。在Windows上，按F12或Ctrl + Shift + I。在macOS上，按Cmd + Shift + I。
- en: Select the **Network** tab and then, in the **Throttling** dropdown, select
    the **Offline** preset.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**网络**选项卡，然后在**节流**下拉菜单中选择**离线**预设。
- en: In the left navigation menu, click **Home** and then click **Customers Worldwide**,
    and note the failure to load any customers and the error message at the bottom
    of the app window, as shown in *Figure 17.12*:![](img/B17442_19_15.png)
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**主页**，然后点击**全球客户**，并注意无法加载任何客户以及应用窗口底部的错误消息，如图*17.12*所示：![](img/B17442_19_15.png)
- en: 'Figure 17.12: Failure to load any customers when the network is offline'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.12：当网络离线时无法加载任何客户
- en: 'In **Developer Tools**, set **Throttling** back to **Disabled: No throttling**.'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**开发者工具**中，将**节流**设置回**已禁用：无节流**。
- en: Click the **Reload** link in the yellow error bar at the bottom of the app and
    note that functionality returns.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击应用底部黄色错误栏中的**重新加载**链接，并注意功能恢复。
- en: You could now uninstall the PWA app or just close it.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以卸载PWA应用或只是关闭它。
- en: Implementing offline support for PWAs
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为PWA实现离线支持
- en: We could improve the experience by caching HTTP `GET` responses from the Web
    API service locally, storing new, modified, or deleted customers locally, and
    then synchronizing with the server later by making the stored HTTP requests once
    network connectivity is restored. But that takes a lot of effort to implement
    well, so it is beyond the scope of this book.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过本地缓存Web API服务的HTTP `GET`响应，本地存储新、修改或删除的客户，然后在网络连接恢复后通过发出存储的HTTP请求与服务器同步来改善体验。但这需要大量努力才能实现良好，因此超出了本书的范围。
- en: Understanding the browser compatibility analyzer for Blazor WebAssembly
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Blazor WebAssembly的浏览器兼容性分析器
- en: With .NET 6, Microsoft has unified the .NET library for all workloads. However,
    although in theory, this means that a Blazor WebAssembly app has full access to
    all .NET APIs, in practice, it runs inside a browser sandbox so there are limitations.
    If you call an unsupported API, this will throw a `PlatformNotSupportedException`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET 6，微软已经统一了所有工作负载的.NET库。然而，虽然在理论上这意味着Blazor WebAssembly应用可以完全访问所有.NET API，但实际上它在浏览器沙箱中运行，因此存在限制。如果您调用一个不支持的API，这将抛出一个`PlatformNotSupportedException`。
- en: To be forewarned about unsupported APIs, you can add a platform compatibility
    analyzer that will warn you when your code uses APIs that are not supported by
    browsers.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 为了预先警告不支持的API，您可以添加一个平台兼容性分析器，当您的代码使用浏览器不支持的API时，它会警告您。
- en: '**Blazor WebAssembly App** and **Razor Class Library** project templates automatically
    enable browser compatibility checks.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly应用**和**Razor类库**项目模板会自动启用浏览器兼容性检查。'
- en: 'To manually activate browser compatibility checks, for example, in a **Class
    Library** project, add an entry to the project file, as shown in the following
    markup:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要在**类库**项目中手动激活浏览器兼容性检查，例如，向项目文件添加一个条目，如下面的标记所示：
- en: '[PRE61]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Microsoft decorates unsupported APIs, as shown in the following code:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 微软装饰不支持的API，如下列代码所示：
- en: '[PRE62]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '**Good Practice**: If you create libraries that should not be used in Blazor
    WebAssembly apps, then you should decorate your APIs in the same way.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您创建的库不应在Blazor WebAssembly应用中使用，那么您应该以相同方式装饰您的API。'
- en: Sharing Blazor components in a class library
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在类库中共享Blazor组件
- en: We currently have components duplicated in a Blazor Server project and a Blazor
    WebAssembly project. It would be better to have them defined once in a class library
    project and reference them from the two other Blazor projects.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前在一个Blazor服务器项目和一个Blazor WebAssembly项目中重复了组件。最好在类库项目中定义它们一次，并从另外两个Blazor项目引用它们。
- en: 'Let''s create a new Razor class library:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Razor类库：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列清单所定义：
- en: 'Project template: **Razor Class Library** / `razorclasslib`'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**Razor类库** / `razorclasslib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Blazor.Customers`'
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Support pages and views: checked'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor.Customers` project, add a project reference to the
    `Northwind.Common.EntityModels.Sqlite` or `SqlServer` project.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor.Customers` project, add an entry to check browser
    compatibility, as shown highlighted in the following markup:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In the `Northwind.BlazorServer` project, add a project reference to the `Northwind.Blazor.Customers`
    project.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorServer` project.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor.Customers` project, delete the `Areas` folder and all
    its contents.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `_Imports.razor` file from the root of the `Northwind.BlazorServer`
    project to the root of the `Northwind.Blazor.Customers` project.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `_Imports.razor`, delete the two imports for the `Northwind.BlazorServer`
    namespace and add a statement to import the namespace that will contain our shared
    Blazor components, as shown in the following code:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Create three folders named `Data`, `Pages`, and `Shared`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move `INorthwindService.cs` from the `Northwind.BlazorServer` project's `Data`
    folder to the `Northwind.Blazor.Customers` project's `Data` folder.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all the components from the `Northwind.BlazorServer` project's `Shared`
    folder to the `Northwind.Blazor.Customers` project's `Shared` folder.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `CreateCustomer.razor`, `Customers.razor`, `EditCustomer.razor`, and
    `DeleteCustomer.razor` components from the `Northwind.BlazorServer` project's
    `Pages` folder to the `Northwind.Blazor.Customers` project's `Pages` folder.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will leave the other page components because they have dependencies on the
    weather service that has not been properly refactored.
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.BlazorServer` project, in `_Imports.razor`, remove the `using`
    statement for `Northwind.BlazorServer.Shared` and add statements to import the
    page and shared components in the class library, as shown in the following code:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In the `Northwind.BlazorServer` project, in `App.razor`, add a parameter to
    tell the `Router` component to scan the additional assembly to set up the routes
    for the page components in the class library, as shown highlighted in the following
    code:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '**Good Practice**: It does not matter which class you specify as long as it
    is in the external assembly. I chose `Customers` since it is the most important
    and obvious component class.'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project and note that it has the same behavior
    as before.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: You can now reuse the Blazor components in other Blazor
    Server projects. However, you cannot use that class library in Blazor WebAssembly
    projects because it has a dependency on the full ASP.NET Core workload. Creating
    Blazor component libraries that work with both hosting models is beyond the scope
    of this book.'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Interop with JavaScript
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Blazor components do not have access to browser capabilities like
    local storage, geolocation, and media capture, or any JavaScript libraries like
    React or Vue. If you need to interact with them, you can use JavaScript Interop.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example that uses the browser window''s alert box and local storage
    that can persist up to 5 MB of data per visitor indefinitely:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project, in the `wwwroot` folder, add a folder
    named `scripts`.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `scripts` folder, add a file named `interop.js`.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following code:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the `Pages` folder, in `_Layout.cshtml`, after the `script` element that
    adds Blazor Server support, add a `script` element that references the JavaScript
    file that you just created, as shown in the following code:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the `Pages` folder, in `Index.razor`, delete the two `Customers` component
    instances and then add a button and a code block that uses the Blazor JavaScript
    runtime dependency service to call a JavaScript function, as shown in the following
    code:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Start the `Northwind.BlazorServer` project.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5001/`.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, in the textbox, enter `red` and then click the **Set Color**
    button.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show **Developer Tools**, select the **Application** tab, expand **Local Storage**,
    select `https://localhost:5001`, and note the key-value pair `color-red`, as shown
    in *Figure 17.13*:![](img/B17442_19_16.png)
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.13: Storing a color in browser local storage using JavaScript Interop'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5001/`.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click the **Get Color** button and note that the value `red`
    is shown in the textbox, retrieved from local storage between visitor sessions.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Libraries of Blazor components
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many libraries of Blazor components. Paid component libraries are
    from companies like Telerik, DevExpress, and Syncfusion. Open source Blazor component
    libraries include the following:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'Radzen Blazor Components: [https://blazor.radzen.com/](https://blazor.radzen.com/)'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Awesome Open Source Blazor Projects: [https://awesomeopensource.com/projects/blazor](https://awesomeopensource.com/projects/blazor)'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practicing and exploring
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1 – Test your knowledge
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: What are the two primary hosting models for Blazor, and how are they different?
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor Server website project, compared to an ASP.NET Core MVC website
    project, what extra configuration is required in the Startup class?
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the benefits of Blazor is being able to implement client-side components
    using C# and .NET instead of JavaScript. Does a Blazor component need any JavaScript?
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor project, what does the `App.razor` file do?
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a benefit of using the `<NavLink>` component?
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you pass a value into a component?
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a benefit of using the `<EditForm>` component?
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when parameters are set?
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when a component appears?
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are two key differences in the `Program` class between a Blazor Server
    and Blazor WebAssembly project?
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 17.2 – Practice by creating a times table component
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a component that renders a times table based on a parameter named `Number`
    and then test your component in two ways.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: 'First, by adding an instance of your component to the `Index.razor` file, as
    shown in the following markup:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Second, by entering a path in the browser address bar, as shown in the following
    link:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:5001/timestable/6`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.3 – Practice by creating a country navigation item
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add an action method to the `CustomersController` class to return a list of
    country names.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: In the shared `NavMenu` component, call the customer's web service to get the
    list of country names and loop through them, creating a menu item for each country.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.4 – Explore topics
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-17---building-user-interfaces-using-blazor](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-17---building-user-interfaces-using-blazor)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build Blazor components hosted for both
    Server and WebAssembly. You saw some of the key differences between the two hosting
    models, like how data should be managed using dependency services.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
