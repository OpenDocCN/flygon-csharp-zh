["```cs\n    dotnet new mvc --help \n    ```", "```cs\n    ASP.NET Core Web App (Model-View-Controller) (C#)\n    Author: Microsoft\n    Description: A project template for creating an ASP.NET Core application with example ASP.NET Core MVC Views and Controllers. This template can also be used for RESTful HTTP services.\n    This template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore/6.0-third-party-notices for details. \n    ```", "```cs\ndotnet ef database update \n```", "```cs\n{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=aspnet-Northwind.Mvc-...;Trusted_Connection=True;MultipleActiveResultSets=true\"\n  }, \n```", "```cs\n{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"DataSource=app.db;Cache=Shared\"\n  }, \n```", "```cs\n    \"profiles\": {\n      \"Northwind.Mvc\": {\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n        \"applicationUrl\": \"https://localhost:7274;http://localhost:5274\",\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        }\n      }, \n    ```", "```cs\n    \"applicationUrl\": \"https://localhost:5001;http://localhost:5000\", \n    ```", "```cs\n{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"**Server=(localdb)\\\\mssqllocaldb;Database=aspnet-Northwind.Mvc-2F6A1E12-F9CF-480C-987D-FEFB4827DE22;Trusted_Connection=True;MultipleActiveResultSets=true**\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n} \n```", "```cs\n    using Microsoft.AspNetCore.Identity; // IdentityUser\n    using Microsoft.EntityFrameworkCore; // UseSqlServer, UseSqlite\n    using Northwind.Mvc.Data; // ApplicationDbContext \n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    var connectionString = builder.Configuration\n      .GetConnectionString(\"DefaultConnection\");\n    builder.Services.AddDbContext<ApplicationDbContext>(options =>\n      options.UseSqlServer(connectionString)); // or UseSqlite\n    builder.Services.AddDatabaseDeveloperPageExceptionFilter();\n    builder.Services.AddDefaultIdentity<IdentityUser>(options => \n      options.SignIn.RequireConfirmedAccount = true)\n      .AddEntityFrameworkStores<ApplicationDbContext>();\n    builder.Services.AddControllersWithViews(); \n    ```", "```cs\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n      app.UseMigrationsEndPoint();\n    }\n    else\n    {\n      app.UseExceptionHandler(\"/Home/Error\");\n      // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n      app.UseHsts();\n    }\n    app.UseHttpsRedirection();\n    app.UseStaticFiles();\n    app.UseRouting();\n    app.UseAuthentication();\n    app.UseAuthorization();\n    app.MapControllerRoute(\n      name: \"default\",\n      pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    app.MapRazorPages(); \n    ```", "```cs\n    app.Run(); // blocking call \n    ```", "```cs\nendpoints.MapControllerRoute(\n  name: \"default\",\n  pattern: \"{controller=Home}/{action=Index}/{id?}\"); \n```", "```cs\nnamespace Microsoft.AspNetCore.Mvc\n{\n  //\n  // Summary:\n  // A base class for an MVC controller without view support.\n  [Controller]\n  public abstract class ControllerBase\n  {\n... \n```", "```cs\nnamespace Microsoft.AspNetCore.Mvc\n{\n  //\n  // Summary:\n  // A base class for an MVC controller with view support.\n  public abstract class Controller : ControllerBase,\n    IActionFilter, IFilterMetadata, IAsyncActionFilter, IDisposable\n  {\n... \n```", "```cs\n    using Microsoft.AspNetCore.Mvc; // Controller, IActionResult\n    using Northwind.Mvc.Models; // ErrorViewModel\n    using System.Diagnostics; // Activity\n    namespace Northwind.Mvc.Controllers;\n    public class HomeController : Controller\n    {\n      private readonly ILogger<HomeController> _logger;\n      public HomeController(ILogger<HomeController> logger)\n      {\n        _logger = logger;\n      }\n      public IActionResult Index()\n      {\n        return View();\n      }\n      public IActionResult Privacy()\n      {\n        return View();\n      }\n      [ResponseCache(Duration = 0,\n        Location = ResponseCacheLocation.None, NoStore = true)]\n      public IActionResult Error()\n      {\n        return View(new ErrorViewModel { RequestId = \n          Activity.Current?.Id ?? HttpContext.TraceIdentifier });\n      }\n    } \n    ```", "```cs\n    _logger.LogError(\"This is a serious error (not really!)\");\n    _logger.LogWarning(\"This is your first warning!\");\n    _logger.LogWarning(\"Second warning!\");\n    _logger.LogInformation(\"I am in the Index method of the HomeController.\"); \n    ```", "```cs\n    fail: Northwind.Mvc.Controllers.HomeController[0]\n          This is a serious error (not really!)\n    warn: Northwind.Mvc.Controllers.HomeController[0]\n          This is your first warning!\n    warn: Northwind.Mvc.Controllers.HomeController[0]\n          Second warning!\n    info: Northwind.Mvc.Controllers.HomeController[0]\n          I am in the Index method of the HomeController. \n    ```", "```cs\n    builder.Services.AddControllersWithViews(options =>\n      {\n        options.Filters.Add(typeof(MyCustomFilter));\n      }); \n    ```", "```cs\n    **[****Authorize(Roles =** **\"Administrators\"****)****]**\n    public IActionResult Privacy() \n    ```", "```cs\n    services.AddDefaultIdentity<IdentityUser>(\n      options => options.SignIn.RequireConfirmedAccount = true)\n     **.AddRoles<IdentityRole>()** **// enable role management**\n      .AddEntityFrameworkStores<ApplicationDbContext>(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Identity; // RoleManager, UserManager\n    using Microsoft.AspNetCore.Mvc; // Controller, IActionResult\n    using static System.Console;\n    namespace Northwind.Mvc.Controllers;\n    public class RolesController : Controller\n    {\n      private string AdminRole = \"Administrators\";\n      private string UserEmail = \"test@example.com\";\n      private readonly RoleManager<IdentityRole> roleManager;\n      private readonly UserManager<IdentityUser> userManager;\n      public RolesController(RoleManager<IdentityRole> roleManager,\n        UserManager<IdentityUser> userManager)\n      {\n        this.roleManager = roleManager;\n        this.userManager = userManager;\n      }\n      public async Task<IActionResult> Index()\n      {\n        if (!(await roleManager.RoleExistsAsync(AdminRole)))\n        {\n          await roleManager.CreateAsync(new IdentityRole(AdminRole));\n        }\n        IdentityUser user = await userManager.FindByEmailAsync(UserEmail);\n        if (user == null)\n        {\n          user = new();\n          user.UserName = UserEmail;\n          user.Email = UserEmail;\n          IdentityResult result = await userManager.CreateAsync(\n            user, \"Pa$$w0rd\");\n          if (result.Succeeded)\n          {\n            WriteLine($\"User {user.UserName} created successfully.\");\n          }\n          else\n          { \n            foreach (IdentityError error in result.Errors)\n            {\n              WriteLine(error.Description);\n            }\n          }\n        }\n        if (!user.EmailConfirmed)\n        {\n          string token = await userManager\n            .GenerateEmailConfirmationTokenAsync(user);\n          IdentityResult result = await userManager\n            .ConfirmEmailAsync(user, token);\n          if (result.Succeeded)\n          {\n            WriteLine($\"User {user.UserName} email confirmed successfully.\");\n          }\n          else\n          {\n            foreach (IdentityError error in result.Errors)\n            {\n              WriteLine(error.Description);\n            }\n          }\n        }\n        if (!(await userManager.IsInRoleAsync(user, AdminRole)))\n        {\n          IdentityResult result = await userManager\n            .AddToRoleAsync(user, AdminRole);\n          if (result.Succeeded)\n          {\n            WriteLine($\"User {user.UserName} added to {AdminRole} successfully.\");\n          }\n          else\n          {\n            foreach (IdentityError error in result.Errors)\n            {\n              WriteLine(error.Description);\n            }\n          }\n        }\n        return Redirect(\"/\");\n      }\n    } \n    ```", "```cs\n    User test@example.com created successfully.\n    User test@example.com email confirmed successfully.\n    User test@example.com added to Administrators successfully. \n    ```", "```cs\n    **[****ResponseCache(Duration = 10, Location = ResponseCacheLocation.Any)****]**\n    public IActionResult Index() \n    ```", "```cs\n    <p class=\"alert alert-primary\">@DateTime.Now.ToLongTimeString()</p> \n    ```", "```cs\n    warn: Microsoft.AspNetCore.Antiforgery.DefaultAntiforgery[8]\n          The 'Cache-Control' and 'Pragma' headers have been overridden and set to 'no-cache, no-store' and 'no-cache' respectively to prevent caching of this response. Any response that uses antiforgery should not be cached. \n    ```", "```cs\nhttps://localhost:5001/home/privacy \n```", "```cs\nhttps://localhost:5001/private \n```", "```cs\n    **[****Route(****\"private\"****)****]**\n    [Authorize(Roles = \"Administrators\")]\n    public IActionResult Privacy() \n    ```", "```cs\n    https://localhost:5001/private \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\n    \"..\\Northwind.Common.DataContext.Sqlite\\Northwind.Common.DataContext.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    {\n      \"ConnectionStrings\": {\n        \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=aspnet-Northwind.Mvc-DC9C4FAF-DD84-4FC9-B925-69A61240EDA7;Trusted_Connection=True;MultipleActiveResultSets=true\",\n    **\"NorthwindConnection\"****:** **\"Server=.;Database=Northwind;Trusted_Connection=True;MultipleActiveResultSets=true\"**\n      }, \n    ```", "```cs\n    using Packt.Shared; // AddNorthwindContext extension method \n    ```", "```cs\n    // if you are using SQL Server\n    string sqlServerConnection = builder.Configuration\n      .GetConnectionString(\"NorthwindConnection\");\n    builder.Services.AddNorthwindContext(sqlServerConnection);\n    // if you are using SQLite default is ..\\Northwind.db\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\n    using Packt.Shared; // Category, Product\n    namespace Northwind.Mvc.Models;\n    public record HomeIndexViewModel\n    (\n      int VisitorCount,\n      IList<Category> Categories,\n      IList<Product> Products\n    ); \n    ```", "```cs\n    using Packt.Shared; // NorthwindContext \n    ```", "```cs\n    public class HomeController : Controller\n    {\n      private readonly ILogger<HomeController> _logger;\n    **private****readonly** **NorthwindContext db;**\n      public HomeController(ILogger<HomeController> logger,\n     **NorthwindContext injectedContext****)**\n      {\n        _logger = logger;\n     **db = injectedContext;**\n      }\n    ... \n    ```", "```cs\n    [ResponseCache(Duration = 10, Location = ResponseCacheLocation.Any)]\n    public IActionResult Index()\n    {\n      _logger.LogError(\"This is a serious error (not really!)\");\n      _logger.LogWarning(\"This is your first warning!\");\n      _logger.LogWarning(\"Second warning!\");\n      _logger.LogInformation(\"I am in the Index method of the HomeController.\");\n     **HomeIndexViewModel model =** **new**\n     **(**\n     **VisitorCount: (****new** **Random()).Next(****1****,** **1001****),**\n     **Categories: db.Categories.ToList(),**\n     **Products: db.Products.ToList()**\n     **);**\n    **return** **View(model);** **// pass model to view**\n    } \n    ```", "```cs\n    @{\n      ViewData[\"Title\"] = \"Home Page\";\n    } \n    ```", "```cs\n    @{\n      Layout = \"_Layout\";\n    } \n    ```", "```cs\n    @using Northwind.Mvc \n    @using Northwind.Mvc.Models\n    @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers \n    ```", "```cs\n    <title>@ViewData[\"Title\"] – Northwind.Mvc</title> \n    ```", "```cs\n    <link rel=\"stylesheet\" \n      href=\"~/lib/bootstrap/dist/css/bootstrap.css\" />\n    <link rel=\"stylesheet\" href=\"~/css/site.css\" /> \n    ```", "```cs\n    <body>\n      <header>\n        <nav class=\"navbar ...\"> \n    ```", "```cs\n    <div class=\n      \"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\n      <ul class=\"navbar-nav flex-grow-1\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link text-dark\" asp-area=\"\"\n            asp-controller=\"Home\" asp-action=\"Index\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link text-dark\"\n            asp-area=\"\" asp-controller=\"Home\" \n            asp-action=\"Privacy\">Privacy</a>\n        </li>\n      </ul>\n      <partial name=\"_LoginPartial\" />\n    </div> \n    ```", "```cs\n    <div class=\"container\">\n      <main role=\"main\" class=\"pb-3\">\n        @RenderBody()\n      </main>\n    </div> \n    ```", "```cs\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/bootstrap.bundle.min.js\">\n    </script>\n    <script src=\"img/site.js\" asp-append-version=\"true\"></script> \n    @await RenderSectionAsync(\"scripts\", required: false) \n    ```", "```cs\n<script src=\"img/site.js? v=Kl_dqr9NVtnMdsM2MUg4qthUnWZm5T1fCEimBPWDNgM\"></script> \n```", "```cs\n    #product-columns\n    {\n      column-count: 3;\n    } \n    ```", "```cs\n@{\n  Order order = new()\n  {\n    OrderId = 123,\n    Product = \"Sushi\",\n    Price = 8.49M,\n    Quantity = 3\n  };\n}\n<div>Your order for @order.Quantity of @order.Product has a total cost of $@ order.Price * @order.Quantity</div> \n```", "```cs\nYour order for 3 of Sushi has a total cost of $8.49 * 3 \n```", "```cs\n<div>Your order for @order.Quantity of @order.Product has a total cost of $@ (order.Price * order.Quantity)</div> \n```", "```cs\nYour order for 3 of Sushi has a total cost of $25.47 \n```", "```cs\n    @model HomeIndexViewModel \n    ```", "```cs\n    @using Packt.Shared\n    @model HomeIndexViewModel \n    @{\n      ViewData[\"Title\"] = \"Home Page\";\n      string currentItem = \"\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">Welcome</h1>\n      <p>Learn about <a href=\"https://docs.microsoft.com/aspnet/core\">building Web apps with ASP.NET Core</a>.</p>\n      <p class=\"alert alert-primary\">@DateTime.Now.ToLongTimeString()</p>\n    </div>\n    @if (Model is not null)\n    {\n    <div id=\"categories\" class=\"carousel slide\" data-ride=\"carousel\" \n         data-interval=\"3000\" data-keyboard=\"true\">\n      <ol class=\"carousel-indicators\">\n      @for (int c = 0; c < Model.Categories.Count; c++)\n      {\n        if (c == 0)\n        {\n          currentItem = \"active\";\n        }\n        else\n        {\n          currentItem = \"\";\n        }\n        <li data-target=\"#categories\" data-slide-to=\"@c\"  \n            class=\"@currentItem\"></li>\n      }\n      </ol>\n      <div class=\"carousel-inner\">\n      @for (int c = 0; c < Model.Categories.Count; c++)\n      {\n        if (c == 0)\n        {\n          currentItem = \"active\";\n        }\n        else\n        {\n          currentItem = \"\";\n        }\n        <div class=\"carousel-item @currentItem\">\n          <img class=\"d-block w-100\" src=   \n            \"~/images/category@(Model.Categories[c].CategoryId).jpeg\"  \n            alt=\"@Model.Categories[c].CategoryName\" />\n          <div class=\"carousel-caption d-none d-md-block\">\n            <h2>@Model.Categories[c].CategoryName</h2>\n            <h3>@Model.Categories[c].Description</h3>\n            <p>\n              <a class=\"btn btn-primary\"  \n                href=\"/category/@Model.Categories[c].CategoryId\">View</a>\n            </p>\n          </div>\n        </div>\n      }\n      </div>\n      <a class=\"carousel-control-prev\" href=\"#categories\" \n        role=\"button\" data-slide=\"prev\">\n        <span class=\"carousel-control-prev-icon\" \n          aria-hidden=\"true\"></span>\n        <span class=\"sr-only\">Previous</span>\n      </a>\n      <a class=\"carousel-control-next\" href=\"#categories\" \n        role=\"button\" data-slide=\"next\">\n        <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n        <span class=\"sr-only\">Next</span>\n      </a>\n    </div>\n    }\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h1>Northwind</h1>\n        <p class=\"lead\">\n          We have had @Model?.VisitorCount visitors this month.\n        </p>\n        @if (Model is not null)\n        {\n        <h2>Products</h2>\n        <div id=\"product-columns\">\n          <ul>\n          @foreach (Product p in @Model.Products)\n          {\n            <li>\n              <a asp-controller=\"Home\"\n                 asp-action=\"ProductDetail\"\n                 asp-route-id=\"@p.ProductId\">\n                @p.ProductName costs \n    @(p.UnitPrice is null ? \"zero\" : p.UnitPrice.Value.ToString(\"C\"))\n              </a>\n            </li>\n          }\n          </ul>\n        </div>\n        }\n      </div>\n    </div> \n    ```", "```cs\n    public IActionResult ProductDetail(int? id)\n    {\n      if (!id.HasValue)\n      {\n        return BadRequest(\"You must pass a product ID in the route, for example, /Home/ProductDetail/21\");\n      }\n      Product? model = db.Products\n        .SingleOrDefault(p => p.ProductId == id);\n      if (model == null)\n      {\n        return NotFound($\"ProductId {id} not found.\");\n      }\n      return View(model); // pass model to view and then return result\n    } \n    ```", "```cs\n    @model Packt.Shared.Product \n    @{\n      ViewData[\"Title\"] = \"Product Detail - \" + Model.ProductName;\n    }\n    <h2>Product Detail</h2>\n    <hr />\n    <div>\n      <dl class=\"dl-horizontal\">\n        <dt>Product Id</dt>\n        <dd>@Model.ProductId</dd>\n        <dt>Product Name</dt>\n        <dd>@Model.ProductName</dd>\n        <dt>Category Id</dt>\n        <dd>@Model.CategoryId</dd>\n        <dt>Unit Price</dt>\n        <dd>@Model.UnitPrice.Value.ToString(\"C\")</dd>\n        <dt>Units In Stock</dt>\n        <dd>@Model.UnitsInStock</dd>\n      </dl>\n    </div> \n    ```", "```cs\n    <form action=\"post\" action=\"/Home/ProductDetail\">\n      <input type=\"text\" name=\"id\" value=\"2\" />\n      <input type=\"submit\" />\n    </form> \n    ```", "```cs\n    namespace Northwind.Mvc.Models;\n    public class Thing\n    {\n      public int? Id { get; set; }\n      public string? Color { get; set; }\n    } \n    ```", "```cs\n    public IActionResult ModelBinding()\n    {\n      return View(); // the page with a form to submit\n    }\n    public IActionResult ModelBinding(Thing thing)\n    {\n      return View(thing); // show the model bound thing\n    } \n    ```", "```cs\n    @model Thing \n    @{\n      ViewData[\"Title\"] = \"Model Binding Demo\";\n    }\n    <h1>@ViewData[\"Title\"]</h1>\n    <div>\n      Enter values for your thing in the following form:\n    </div>\n    <form method=\"POST\" action=\"/home/modelbinding?id=3\">\n      <input name=\"color\" value=\"Red\" />\n      <input type=\"submit\" />\n    </form>\n    @if (Model != null)\n    {\n    <h2>Submitted Thing</h2>\n    <hr />\n    <div>\n      <dl class=\"dl-horizontal\">\n        <dt>Model.Id</dt>\n        <dd>@Model.Id</dd>\n        <dt>Model.Color</dt>\n        <dd>@Model.Color</dd>\n      </dl>\n    </div>\n    } \n    ```", "```cs\n    <p><a asp-action=\"ModelBinding\" asp-controller=\"Home\">Binding</a></p> \n    ```", "```cs\n    **[****HttpPost****]**\n    public IActionResult ModelBinding(Thing thing) \n    ```", "```cs\n    <form method=\"POST\" action=\"/home/modelbinding**/2**?id=3\"> \n    ```", "```cs\n    <form method=\"POST\" action=\"/home/modelbinding/2?id=3\">\n     **<input name=****\"id\"****value****=****\"1\"** **/>**\n      <input name=\"color\" value=\"Red\" />\n      <input type=\"submit\" />\n    </form> \n    ```", "```cs\n    public class Thing\n    {\n     **[****Range(1, 10)****]**\n      public int? Id { get; set; }\n     **[****Required****]**\n      public string? Color { get; set; }\n     **[****EmailAddress****]**\n    **public****string****? Email {** **get****;** **set****; }**\n    } \n    ```", "```cs\n    namespace Northwind.Mvc.Models;\n    public record HomeModelBindingViewModel\n    (\n      Thing Thing,\n      bool HasErrors, \n      IEnumerable<string> ValidationErrors\n    ); \n    ```", "```cs\n    [HttpPost]\n    public IActionResult ModelBinding(Thing thing)\n    {\n     **HomeModelBindingViewModel model =** **new****(**\n     **thing,**\n     **!ModelState.IsValid,** \n     **ModelState.Values**\n     **.SelectMany(state => state.Errors)**\n     **.Select(error => error.ErrorMessage)**\n     **);**\n    **return** **View(model);**\n    } \n    ```", "```cs\n    @model Northwind.Mvc.Models.HomeModelBindingViewModel \n    ```", "```cs\n    <form method=\"POST\" action=\"/home/modelbinding/2?id=3\">\n      <input name=\"id\" value=\"1\" />\n      <input name=\"color\" value=\"Red\" />\n      <input name=\"email\" value=\"test@example.com\" />\n      <input type=\"submit\" />\n    </form>\n    @if (Model != null)\n    {\n      <h2>Submitted Thing</h2>\n      <hr />\n      <div>\n        <dl class=\"dl-horizontal\">\n          <dt>Model**.Thing**.Id</dt>\t\n          <dd>@Model**.Thing**.Id</dd>\t\n          <dt>Model**.Thing**.Color</dt>\n          <dd>@Model**.Thing**.Color</dd>\n    **<****dt****>****Model.Thing.Email****</****dt****>**\n    **<****dd****>****@Model.Thing.Email****</****dd****>**\n        </dl>\n      </div>\n      @if (Model.HasErrors)\n      {\n        <div>\n          @foreach(string errorMessage in Model.ValidationErrors)\n          {\n            <div class=\"alert alert-danger\" role=\"alert\">@errorMessage</div>\n          }\n        </div>\n      }\n    } \n    ```", "```cs\n    <dd>@Html.DisplayFor(model => model.Thing.Email)</dd> \n    ```", "```cs\n    public IActionResult ProductsThatCostMoreThan(decimal? price)\n    {\n      if (!price.HasValue)\n      {\n        return BadRequest(\"You must pass a product price in the query string, for example, /Home/ProductsThatCostMoreThan?price=50\");\n      }\n      IEnumerable<Product> model = db.Products\n        .Include(p => p.Category)\n        .Include(p => p.Supplier)\n        .Where(p => p.UnitPrice > price);\n      if (!model.Any())\n      {\n        return NotFound(\n          $\"No products cost more than {price:C}.\");\n      }\n      ViewData[\"MaxPrice\"] = price.Value.ToString(\"C\");\n      return View(model); // pass model to view\n    } \n    ```", "```cs\n    @using Packt.Shared\n    @model IEnumerable<Product> \n    @{\n      string title =\n        \"Products That Cost More Than \" + ViewData[\"MaxPrice\"]; \n      ViewData[\"Title\"] = title;\n    }\n    <h2>@title</h2>\n    @if (Model is null)\n    {\n      <div>No products found.</div>\n    }\n    else\n    {\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Category Name</th>\n            <th>Supplier's Company Name</th>\n            <th>Product Name</th>\n            <th>Unit Price</th>\n            <th>Units In Stock</th>\n          </tr>\n        </thead>\n        <tbody>\n        @foreach (Product p in Model)\n        {\n          <tr>\n            <td>\n              @Html.DisplayFor(modelItem => p.Category.CategoryName)\n            </td>\n            <td>\n              @Html.DisplayFor(modelItem => p.Supplier.CompanyName)\n            </td>\n            <td>\n              @Html.DisplayFor(modelItem => p.ProductName)\n            </td>\n            <td>\n              @Html.DisplayFor(modelItem => p.UnitPrice)\n            </td>\n            <td>\n              @Html.DisplayFor(modelItem => p.UnitsInStock)\n            </td>\n          </tr>\n        }\n        <tbody>\n      </table>\n    } \n    ```", "```cs\n    <h3>Query products by price</h3>\n    <form asp-action=\"ProductsThatCostMoreThan\" method=\"GET\">\n      <input name=\"price\" placeholder=\"Enter a product price\" />\n      <input type=\"submit\" />\n    </form> \n    ```", "```cs\n    public **async** **Task<IActionResult>** Index()\n    {\n      HomeIndexViewModel model = new\n      (\n        VisitorCount = (new Random()).Next(1, 1001),\n        Categories = **await** db.Categories.ToList**Async**(),\n        Products = **await** db.Products.ToList**Async**()\n      );\n      return View(model); // pass model to view\n    } \n    ```", "```cs\n    public **async** **Task<IActionResult>** ProductDetail(int? id)\n    {\n      if (!id.HasValue)\n      {\n        return BadRequest(\"You must pass a product ID in the route, for example,\n    /Home/ProductDetail/21\");\n      }\n      Product? model = **await** db.Products\n        .SingleOrDefault**Async**(p => p.ProductId == id);\n      if (model == null)\n      {\n        return NotFound($\"ProductId {id} not found.\");\n      }\n      return View(model); // pass model to view and then return result\n    } \n    ```"]