- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Introducing Practical Applications of C# and .NET
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍C#和.NET的实际应用
- en: The third and final part of this book is about practical applications of C#
    and .NET. You will learn how to build cross-platform projects such as websites,
    services, and mobile and desktop apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第三部分也是最后一部分是关于C#和.NET的实际应用。你将学习如何构建跨平台项目，如网站、服务以及移动和桌面应用。
- en: Microsoft calls platforms for building applications **app models** or **workloads**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 微软将构建应用的平台称为**应用模型**或**工作负载**。
- en: In *Chapters 1* to *18* and *20*, you can use OS-specific Visual Studio or cross-platform
    Visual Studio Code and JetBrains Rider to build all the apps. In *Chapter 19*,
    *Building Mobile and Desktop Apps Using .NET MAUI*, although you could use Visual
    Studio Code to build the mobile and desktop app, it is not easy. Visual Studio
    2022 for Windows has better support for .NET MAUI than Visual Studio Code does
    (for now).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1章*至*第18章*和*第20章*中，你可以使用特定操作系统的Visual Studio或跨平台的Visual Studio Code和JetBrains
    Rider来构建所有应用。在*第19章*，*使用.NET MAUI构建移动和桌面应用*中，尽管你可以使用Visual Studio Code来构建移动和桌面应用，但这并不容易。Windows上的Visual
    Studio 2022对.NET MAUI的支持比Visual Studio Code更好（目前）。
- en: I recommend that you work through this and subsequent chapters sequentially
    because later chapters will reference projects in earlier chapters, and you will
    build up sufficient knowledge and skills to tackle the trickier problems in later
    chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你按顺序阅读本章及后续章节，因为后续章节会引用早期章节中的项目，并且你将积累足够的知识和技能来解决后续章节中更棘手的问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Understanding app models for C# and .NET
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解C#和.NET的应用模型
- en: New features in ASP.NET Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core中的新特性
- en: Structuring projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Using other project templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他项目模板
- en: Building an entity data model for Northwind
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Northwind实体数据模型
- en: Understanding app models for C# and .NET
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解C#和.NET的应用模型
- en: Since this book is about C# 10 and .NET 6, we will learn about app models that
    use them to build the practical applications that we will encounter in the remaining
    chapters of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书是关于C# 10和.NET 6的，我们将学习使用它们构建实际应用的应用模型，这些应用将在本书剩余章节中遇到。
- en: '**Learn More**: Microsoft has extensive guidance for implementing app models
    in its .NET Application Architecture Guidance documentation, which you can read
    at the following link: [https://www.microsoft.com/net/learn/architecture](https://www.microsoft.com/net/learn/architecture)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**了解更多**：微软在其.NET应用架构指南文档中提供了丰富的应用模型实施指导，你可以在以下链接阅读：[https://www.microsoft.com/net/learn/architecture](https://www.microsoft.com/net/learn/architecture)'
- en: Building websites using ASP.NET Core
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core构建网站
- en: Websites are made up of multiple web pages loaded statically from the filesystem
    or generated dynamically by a server-side technology such as ASP.NET Core. A web
    browser makes `GET` requests using **Unique Resource Locators** (**URLs**) that
    identify each page and can manipulate data stored on the server using `POST`,
    `PUT`, and `DELETE` requests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 网站由多个网页组成，这些网页可以从文件系统静态加载或通过服务器端技术如ASP.NET Core动态生成。Web浏览器使用**唯一资源定位符**（**URLs**）进行`GET`请求，这些URL标识每个页面，并可以使用`POST`、`PUT`和`DELETE`请求操作服务器上存储的数据。
- en: With many websites, the web browser is treated as a presentation layer, with
    almost all the processing performed on the server side. Some JavaScript might
    be used on the client side to implement some presentation features, such as carousels.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多网站中，Web浏览器被视为表示层，几乎所有的处理都在服务器端执行。客户端可能会使用一些JavaScript来实现某些表示层功能，如轮播。
- en: 'ASP.NET Core provides multiple technologies for building websites:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core提供了多种构建网站的技术：
- en: '**ASP.NET Core Razor Pages** and **Razor class libraries** are ways to dynamically
    generate HTML for simple websites. You will learn about them in detail in *Chapter
    14*, *Building Websites Using ASP.NET Core Razor Pages*.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core Razor Pages**和**Razor类库**是动态生成简单网站HTML的方法。你将在*第14章*，*使用ASP.NET
    Core Razor Pages构建网站*中详细学习它们。'
- en: '**ASP.NET Core MVC** is an implementation of the **Model-View-Controller**
    (**MVC**) design pattern that is popular for developing complex websites. You
    will learn about it in detail in *Chapter 15*, *Building Websites Using the Model-View-Controller
    Pattern*.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core MVC**是**模型-视图-控制器**（**MVC**）设计模式的一种实现，该模式在开发复杂网站时非常流行。你将在*第15章*，*使用模型-视图-控制器模式构建网站*中详细学习它。'
- en: '**Blazor** lets you build user interface components using C# and .NET instead
    of a JavaScript-based UI framework like Angular, React, and Vue. **Blazor WebAssembly**
    runs your code in the browser like a JavaScript-based framework would. **Blazor
    Server** runs your code on the server and updates the web page dynamically. You
    will learn about Blazor in detail in *Chapter 17*, *Building User Interfaces Using
    Blazor*. Blazor is not just for building websites; it can also be used to create
    hybrid mobile and desktop apps.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor** 允许你使用C#和.NET构建用户界面组件，而非基于JavaScript的UI框架如Angular、React和Vue。**Blazor
    WebAssembly** 在浏览器中运行你的代码，如同JavaScript框架一样。**Blazor Server** 在服务器上运行你的代码，并动态更新网页。你将在*第17章*，*使用Blazor构建用户界面*中详细了解Blazor。Blazor不仅适用于构建网站，还可用于创建混合移动和桌面应用。'
- en: Building websites using a content management system
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用内容管理系统构建网站
- en: Most websites have a lot of content, and if developers had to be involved every
    time some content needed to be changed, that would not scale well. A **Content
    Management System** (**CMS**) enables developers to define content structure and
    templates to provide consistency and good design while making it easy for a non-technical
    content owner to manage the actual content. They can create new pages or blocks
    of content, and update existing content, knowing it will look great for visitors
    with minimal effort.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站内容繁多，如果每次内容变动都需要开发者介入，这将难以扩展。**内容管理系统**（**CMS**）使开发者能够定义内容结构和模板，以保持一致性和良好设计，同时让非技术内容所有者轻松管理实际内容。他们可以创建新页面或内容块，并更新现有内容，确保访客看到的内容美观且维护工作量最小。
- en: There is a multitude of CMSs available for all web platforms, like WordPress
    for PHP or Django CMS for Python. CMSs that support modern .NET include Optimizely
    Content Cloud, Piranha CMS, and Orchard Core.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 针对所有网络平台，有多种CMS可供选择，如PHP的WordPress或Python的Django CMS。支持现代.NET的CMS包括Optimizely内容云、Piranha
    CMS和Orchard Core。
- en: The key benefit of using a CMS is that it provides a friendly content management
    user interface. Content owners log in to the website and manage the content themselves.
    The content is then rendered and returned to visitors using ASP.NET Core MVC controllers
    and views, or via web service endpoints, known as a **headless CMS**, to provide
    that content to "heads" implemented as mobile or desktop apps, in-store touchpoints,
    or clients built with JavaScript frameworks or Blazor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CMS的关键优势在于它提供了一个友好的内容管理用户界面。内容所有者登录网站并自行管理内容。内容随后通过ASP.NET Core MVC控制器和视图渲染并返回给访问者，或通过称为**无头CMS**的网络服务端点，将内容提供给作为移动或桌面应用、店内触点或使用JavaScript框架或Blazor构建的客户端的“头部”。
- en: 'This book does not cover .NET CMSs, so I have included links where you can
    learn more about them in the GitHub repository:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涉及.NET CMS，因此我在GitHub仓库中提供了链接，供你进一步了解：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems)'
- en: Building web applications using SPA frameworks
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SPA框架构建网页应用
- en: Web applications, also known as **Single-Page Applications** (**SPAs**), are
    made up of a single web page built with a frontend technology such as Blazor WebAssembly,
    Angular, React, Vue, or a proprietary JavaScript library that can make requests
    to a backend web service for getting more data when needed and posting updated
    data using common serialization formats such as XML and JSON. The canonical examples
    are Google web apps like Gmail, Maps, and Docs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用，又称**单页应用**（**SPAs**），由单一网页构成，采用前端技术如Blazor WebAssembly、Angular、React、Vue或专有JavaScript库。这些应用在需要时向后台网络服务请求更多数据，并通过XML和JSON等通用序列化格式发布更新数据。典型例子包括谷歌的Gmail、地图和文档等网页应用。
- en: With a web application, the client side uses JavaScript frameworks or Blazor
    WebAssembly to implement sophisticated user interactions, but most of the important
    processing and data access still happens on the server side, because the web browser
    has limited access to local system resources.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页应用中，客户端使用JavaScript框架或Blazor WebAssembly实现复杂的用户交互，但大部分重要处理和数据访问仍在服务器端进行，因为网络浏览器对本地系统资源的访问有限。
- en: JavaScript is loosely typed and is not designed for complex projects, so most
    JavaScript libraries these days use Microsoft TypeScript, which adds strong typing
    to JavaScript and is designed with many modern language features for handling
    complex implementations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是弱类型语言，并非为复杂项目设计，因此当今大多数 JavaScript 库采用微软的 TypeScript，它为 JavaScript
    添加了强类型特性，并设计了许多现代语言特性以应对复杂实现。
- en: .NET SDK has project templates for JavaScript and TypeScript-based SPAs, but
    we will not spend any time learning how to build JavaScript- and TypeScript-based
    SPAs in this book, even though these are commonly used with ASP.NET Core as the
    backend, because this book is about C#, it is not about other languages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK 提供了基于 JavaScript 和 TypeScript 的 SPA 项目模板，但本书不会花费时间学习如何构建基于 JavaScript
    和 TypeScript 的 SPA，尽管这些通常与 ASP.NET Core 作为后端配合使用，因为本书专注于 C#，而非其他语言。
- en: 'In summary, C# and .NET can be used on both the server side and the client
    side to build websites, as shown in *Figure 13.1*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，C# 和 .NET 可用于服务器端和客户端构建网站，如 *图 13.1* 所示：
- en: '![](img/B17442_14_01.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17442_14_01.png)'
- en: 'Figure 13.1: The use of C# and .NET to build websites on both the server side
    and the client side'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.1*：C# 和 .NET 用于构建服务器端和客户端网站'
- en: Building web and other services
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Web 及其他服务
- en: Although we will not learn about JavaScript- and TypeScript-based SPAs, we will
    learn how to build a web service using the **ASP.NET Core Web API**, and then
    call that web service from the server-side code in our ASP.NET Core websites,
    and then later, we will call that web service from Blazor WebAssembly components
    and cross-platform mobile and desktop apps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会学习基于 JavaScript 和 TypeScript 的 SPA，但我们将学习如何使用 **ASP.NET Core Web API**
    构建 Web 服务，然后从我们的 ASP.NET Core 网站的服务器端代码调用该 Web 服务，之后再从 Blazor WebAssembly 组件以及跨平台移动和桌面应用调用该
    Web 服务。
- en: 'There are no formal definitions, but services are sometimes described based
    on their complexity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有正式定义，但服务有时会根据其复杂性进行描述：
- en: '**Service**: all functionality needed by a client app in one monolithic service.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：客户端应用所需的所有功能集中在一个单一服务中。'
- en: '**Microservice**: multiple services that each focus on a smaller set of functionalities.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：专注于较小功能集的多个服务。'
- en: '**Nanoservice**: a single function provided as a service. Unlike services and
    microservices that are hosted 24/7/365, nanoservices are often inactive until
    called upon to reduce resources and costs.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nanoservice**：作为服务提供的单一功能。与全天候运行的服务和微服务不同，纳米服务通常处于非活动状态，直到被调用以减少资源和成本。'
- en: 'As well as web services that use HTTP as the underlying communication technology
    and the design principles of the API, we will learn how to build services using
    other technologies and design philosophies, including:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 HTTP 作为底层通信技术的 Web 服务以及 API 设计原则外，我们还将学习如何使用其他技术和设计理念构建服务，包括：
- en: '**gRPC** for building highly efficient and performant services with support
    for almost any platform.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC** 用于构建高效且性能卓越的服务，支持几乎所有平台。'
- en: '**SignalR** for building real-time communications between components.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR** 用于构建组件间的实时通信。'
- en: '**OData** for wrapping Entity Framework Core and other data models with a web
    API.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OData** 用于将 Entity Framework Core 和其他数据模型通过 Web API 进行封装。'
- en: '**GraphQL** for letting the client control what data is retrieved across multiple
    data sources.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL** 允许客户端控制跨多个数据源检索哪些数据。'
- en: '**Azure Functions** for hosting serverless nanoservices in the cloud.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Functions** 用于在云中托管无服务器纳米服务。'
- en: Building mobile and desktop apps
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建移动和桌面应用
- en: 'There are two major mobile platforms: Apple''s iOS and Google''s Android, each
    with its own programming languages and platform APIs. There are also two major
    desktop platforms: Apple''s macOS and Microsoft''s Windows, each with its own
    programming languages and platform APIs, as shown in the following list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台主要有两大阵营：苹果的 iOS 和谷歌的 Android，各自拥有自己的编程语言和平台 API。桌面平台也有两大主流：苹果的 macOS 和微软的
    Windows，同样各自拥有自己的编程语言和平台 API，如下表所示：
- en: '**iOS**: Objective C or Swift and UIkit.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：Objective C 或 Swift 以及 UIkit。'
- en: '**Android**: Java or Kotlin and the Android API.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：Java 或 Kotlin 以及 Android API。'
- en: '**macOS**: Objective C or Swift and AppKit or Catalyst.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**：Objective C 或 Swift 以及 AppKit 或 Catalyst。'
- en: '**Windows**: C, C++, or many other languages and the Win32 API or Windows App
    SDK.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：C、C++ 或多种其他语言，以及 Win32 API 或 Windows App SDK。'
- en: Since this book is about modern cross-platform development using C# and .NET
    it does not include coverage of building desktop apps using **Windows Forms**,
    **Windows Presentation Foundation** (**WPF**), or **Universal Windows Platform**
    (**UWP**) apps because they are Windows-only.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书关注的是使用 C# 和 .NET 进行现代跨平台开发，因此不包含使用 **Windows Forms**、**Windows Presentation
    Foundation** (**WPF**) 或 **Universal Windows Platform** (**UWP**) 构建桌面应用的内容，因为它们仅限于
    Windows 平台。
- en: Cross-platform mobile and desktop apps can be built once for the **.NET Multi-platform
    App User Interfaces** (**MAUI**) platform, and then can run on many mobile and
    desktop platforms.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台移动和桌面应用可以为 **.NET 多平台应用用户界面** (**MAUI**) 平台构建一次，然后就能在多种移动和桌面平台上运行。
- en: .NET MAUI makes it easy to develop those apps by sharing user interface components
    as well as business logic. They can target the same .NET APIs as used by console
    apps, websites, and web services. The app will be executed by the Mono runtime
    on mobile devices and the CoreCLR runtime on desktop devices. The Mono runtime
    is better optimized for mobile devices compared to the normal .NET CoreCLR runtime.
    Blazor WebAssembly also uses the Mono runtime because like a mobile app, it is
    resource constrained.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 使得通过共享用户界面组件和业务逻辑来开发这些应用变得简单。它们可以针对与控制台应用、网站和 Web 服务相同的 .NET API。应用将在移动设备上的
    Mono 运行时和桌面设备上的 CoreCLR 运行时执行。与常规 .NET CoreCLR 运行时相比，Mono 运行时对移动设备的优化更好。Blazor
    WebAssembly 也使用 Mono 运行时，因为它像移动应用一样，资源受限。
- en: The apps can exist on their own, but they usually call services to provide an
    experience that spans across all your computing devices, from servers and laptops
    to phones and gaming systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用可以独立存在，但通常会调用服务以提供跨所有计算设备的体验，从服务器和笔记本电脑到手机和游戏系统。
- en: Future updates to .NET MAUI will support existing MVVM and XAML patterns as
    well as ones like **Model-View-Update** (**MVU**) with C#, which is like Apple's
    Swift UI.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 未来对 .NET MAUI 的更新将支持现有的 MVVM 和 XAML 模式，以及类似 **模型-视图-更新** (**MVU**) 的 C# 模式，这与
    Apple 的 Swift UI 类似。
- en: The penultimate chapter in this sixth edition is *Chapter 19*, *Building Mobile
    and Desktop Apps Using .NET MAUI*, and covers using .NET MAUI to build cross-platform
    mobile and desktop apps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第六版的倒数第二章是 *第 19 章*，*使用 .NET MAUI 构建跨平台移动和桌面应用*，涵盖了使用 .NET MAUI 构建跨平台移动和桌面应用的内容。
- en: Alternatives to .NET MAUI
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI 的替代方案
- en: Before Microsoft created .NET MAUI, third parties created open-source initiatives
    to enable .NET developers to build cross-platform apps using XAML named **Uno**
    and **Avalonia**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软创建 .NET MAUI 之前，第三方已发起开源倡议，让 .NET 开发者能够使用 XAML 构建跨平台应用，名为 **Uno** 和 **Avalonia**。
- en: Understanding Uno Platform
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Uno Platform
- en: As Uno state on their website, it is "the first and only UI Platform for single-codebase
    applications for Windows, WebAssembly, iOS, macOS, Android, and Linux."
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Uno 在其网站上所述，它是“首个也是唯一一个为 Windows、WebAssembly、iOS、macOS、Android 和 Linux 提供单一代码库应用的
    UI 平台”。
- en: Developers can reuse 99% of the business logic and UI layer across native mobile,
    web, and desktop.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以在原生移动、Web 和桌面平台上重用 99% 的业务逻辑和 UI 层。
- en: Uno Platform uses the Xamarin native platform but not Xamarin.Forms. For WebAssembly,
    Uno uses the Mono-WASM runtime just like Blazor WebAssembly. For Linux, Uno uses
    Skia to draw the user interface on the canvas.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Uno Platform 使用 Xamarin 原生平台而非 Xamarin.Forms。对于 WebAssembly，Uno 采用 Mono-WASM
    运行时，与 Blazor WebAssembly 类似。在 Linux 上，Uno 利用 Skia 在画布上绘制用户界面。
- en: Understanding Avalonia
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Avalonia
- en: As stated on .NET Foundation's website, Avalonia "is a cross-platform XAML-based
    UI framework providing a flexible styling system and supporting a wide range of
    Operating Systems such as Windows, Linux via Xorg, macOS. Avalonia is ready for
    General-Purpose Desktop App Development."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 .NET 基金会的网站所述，Avalonia “是一个跨平台的 XAML 基础 UI 框架，提供灵活的样式系统，并支持广泛的如 Windows、通过
    Xorg 的 Linux、macOS 等操作系统。Avalonia 已准备好用于通用桌面应用开发。”
- en: You can think of Avalonia as a spiritual successor to WPF. WPF, Silverlight,
    and UWP developers familiar with WPF can continue to benefit from their years
    of pre-existing knowledge and skills.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Avalonia 视为 WPF 的精神继承者。熟悉 WPF、Silverlight 和 UWP 的开发者可以继续利用他们多年积累的知识和技能。
- en: It was used by JetBrains to modernize their WPF-based tools and take them cross-platform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains 利用它来现代化其基于 WPF 的工具，并使其跨平台。
- en: The Avalonia extension for Visual Studio and deep integration with JetBrains
    Rider makes development easier and more productive.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Avalonia 的 Visual Studio 扩展以及与 JetBrains Rider 的深度集成使得开发更加简便和高效。
- en: New features in ASP.NET Core
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core 的新特性
- en: 'Over the past few years, Microsoft has rapidly expanded the capabilities of
    ASP.NET Core. You should note which .NET platforms are supported, as shown in
    the following list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年，微软迅速扩展了ASP.NET Core的能力。您应注意哪些.NET平台得到支持，如下表所示：
- en: ASP.NET Core 1.0 to 2.2 runs on either .NET Core or .NET Framework.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0至2.2版本可在.NET Core或.NET Framework上运行。
- en: ASP.NET Core 3.0 or later only runs on .NET Core 3.0 or later.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0及更高版本仅在.NET Core 3.0及更高版本上运行。
- en: ASP.NET Core 1.0
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0
- en: ASP.NET Core 1.0 was released in June 2016 and focused on implementing a minimum
    API suitable for building modern cross-platform web apps and services for Windows,
    macOS, and Linux.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0于2016年6月发布，重点是实现一个适合构建现代跨平台Web应用和服务的最小API，支持Windows、macOS和Linux。
- en: ASP.NET Core 1.1
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.1
- en: ASP.NET Core 1.1 was released in November 2016 and focused on bug fixes and
    general improvements to features and performance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.1 于2016年11月发布，主要关注错误修复和功能及性能的常规改进。
- en: ASP.NET Core 2.0
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0
- en: ASP.NET Core 2.0 was released in August 2017 and focused on adding new features
    such as Razor Pages, bundling assemblies into a `Microsoft.AspNetCore.All` metapackage,
    targeting .NET Standard 2.0, providing a new authentication model, and performance
    improvements.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0 于2017年8月发布，重点增加了新特性，如Razor Pages、将程序集捆绑到`Microsoft.AspNetCore.All`元包中、面向.NET
    Standard 2.0、提供新的认证模型以及性能改进。
- en: The biggest new features introduced with ASP.NET Core 2.0 are ASP.NET Core Razor
    Pages, which is covered in *Chapter 14*, *Building Websites Using ASP.NET Core
    Razor Pages*, and ASP.NET Core OData support, which is covered in *Chapter 18*,
    *Building and Consuming Specialized Services*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0引入的最大新特性包括ASP.NET Core Razor Pages，这在*第14章*，*使用ASP.NET Core
    Razor Pages构建网站*中有所介绍，以及ASP.NET Core OData支持，这在*第18章*，*构建和消费专业化服务*中有所介绍。
- en: ASP.NET Core 2.1
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1
- en: ASP.NET Core 2.1 was released in May 2018 and was a **Long Term Support** (**LTS**)
    release, meaning it was supported for three years until August 21, 2021 (LTS designation
    was not officially assigned to it until August 2018 with version 2.1.3).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1于2018年5月发布，是一个**长期支持**(**LTS**)版本，意味着它将支持至2021年8月21日（LTS标识直到2018年8月版本2.1.3才正式分配给它）。
- en: 'It focused on adding new features such as **SignalR** for real-time communication,
    **Razor class libraries** for reusing web components, **ASP.NET Core Identity**
    for authentication, and better support for HTTPS and the European Union''s **General
    Data Protection Regulation** (**GDPR**), including the topics listed in the following
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2专注于增加新特性，如**SignalR**用于实时通信，**Razor类库**用于重用Web组件，**ASP.NET Core
    Identity**用于认证，以及对HTTPS和欧盟**通用数据保护条例**(**GDPR**)的更好支持，包括下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| Razor class libraries | 14 | Using Razor class libraries |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| Razor类库 | 14 | 使用Razor类库 |'
- en: '| GDPR support | 15 | Creating and exploring an ASP.NET Core MVC website |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| GDPR支持 | 15 | 创建和探索ASP.NET Core MVC网站 |'
- en: '| Identity UI library and scaffolding | 15 | Exploring an ASP.NET Core MVC
    website |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 身份验证UI库和脚手架 | 15 | 探索ASP.NET Core MVC网站 |'
- en: '| Integration tests | 15 | Testing an ASP.NET Core MVC website |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 集成测试 | 15 | 测试ASP.NET Core MVC网站 |'
- en: '| `[ApiController]`, `ActionResult<T>` | 16 | Creating an ASP.NET Core Web
    API project |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `[ApiController]`, `ActionResult<T>` | 16 | 创建ASP.NET Core Web API项目 |'
- en: '| Problem details | 16 | Implementing a Web API controller |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 问题详情 | 16 | 实现Web API控制器 |'
- en: '| `IHttpClientFactory` | 16 | Configuring HTTP clients using HttpClientFactory
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `IHttpClientFactory` | 16 | 使用HttpClientFactory配置HTTP客户端 |'
- en: '| ASP.NET Core SignalR | 18 | Implementing Real-time communication using SignalR
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core SignalR | 18 | 使用SignalR实现实时通信 |'
- en: ASP.NET Core 2.2
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2
- en: 'ASP.NET Core 2.2 was released in December 2018 and focused on improving the
    building of RESTful HTTP APIs, updating the project templates to Bootstrap 4 and
    Angular 6, an optimized configuration for hosting in Azure, and performance improvements,
    including the topics listed in the following table:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2于2018年12月发布，重点改进RESTful HTTP API的构建，更新项目模板至Bootstrap 4和Angular
    6，优化Azure托管配置，以及性能改进，包括下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| HTTP/2 in Kestrel | 14 | Classic ASP.NET versus modern ASP.NET Core |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| Kestrel中的HTTP/2 | 14 | 经典ASP.NET与现代ASP.NET Core的对比 |'
- en: '| In-process hosting model | 14 | Creating an ASP.NET Core project |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 进程内托管模型 | 14 | 创建ASP.NET Core项目 |'
- en: '| Endpoint routing | 14 | Understanding endpoint routing |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 端点路由 | 14 | 理解端点路由 |'
- en: '| Health Check API | 16 | Implementing a health check API |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 健康检查API | 16 | 实现健康检查API |'
- en: '| Open API analyzers | 16 | Implementing Open API analyzers and conventions
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| Open API分析器 | 16 | 实现Open API分析器和约定 |'
- en: ASP.NET Core 3.0
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0
- en: 'ASP.NET Core 3.0 was released in September 2019 and focused on fully leveraging
    .NET Core 3.0 and .NET Standard 2.1, which meant it could not support .NET Framework,
    and it added useful refinements, including the topics listed in the following
    table:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0于2019年9月发布，专注于充分利用.NET Core 3.0和.NET Standard 2.1，这意味着它不支持.NET
    Framework，并增加了有用的改进，包括下表列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| Static assets in Razor class libraries | 14 | Using Razor class libraries
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| Razor类库中的静态资产 | 14 | 使用Razor类库 |'
- en: '| New options for MVC service registration | 15 | Understanding ASP.NET Core
    MVC startup |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| MVC服务注册的新选项 | 15 | 理解ASP.NET Core MVC启动 |'
- en: '| ASP.NET Core gRPC | 18 | Building services using ASP.NET Core gRPC |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core gRPC | 18 | 使用ASP.NET Core gRPC构建服务 |'
- en: '| Blazor Server | 17 | Building components using Blazor Server |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Blazor Server | 17 | 使用Blazor Server构建组件 |'
- en: ASP.NET Core 3.1
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.1
- en: ASP.NET Core 3.1 was released in December 2019 and is an LTS release, meaning
    it will be supported until December 3, 2022\. It focused on refinements like partial
    class support for Razor components and a new `<component>` tag helper.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.1于2019年12月发布，是一款LTS版本，意味着它将得到支持直至2022年12月3日。它专注于改进，如Razor组件的局部类支持和新的`<component>`标签助手。
- en: Blazor WebAssembly 3.2
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 3.2
- en: Blazor WebAssembly 3.2 was released in May 2020\. It was a Current release,
    meaning that projects had to be upgraded to the .NET 5 version within three months
    of the .NET 5 release, that is, by February 10, 2021\. Microsoft finally delivered
    on the promise of full-stack web development with .NET, and both Blazor Server
    and Blazor WebAssembly are covered in *Chapter 17*, *Building User Interfaces
    Using Blazor*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 3.2于2020年5月发布。它是一个当前版本，意味着项目必须在.NET 5发布后的三个月内升级到.NET 5版本，即2021年2月10日前。微软最终实现了使用.NET进行全栈Web开发的承诺，并且Blazor
    Server和Blazor WebAssembly都在*第17章*，*使用Blazor构建用户界面*中有所涉及。
- en: ASP.NET Core 5.0
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 5.0
- en: 'ASP.NET Core 5.0 was released in November 2020 and focused on bug fixes, performance
    improvements using caching for certificate authentication, HPACK dynamic compression
    of HTTP/2 response headers in Kestrel, nullable annotations for ASP.NET Core assemblies,
    and a reduction in container image sizes, including the topics listed in the following
    table:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 5.0于2020年11月发布，重点在于修复错误、使用缓存提高证书认证性能、Kestrel中HTTP/2响应头的HPACK动态压缩、ASP.NET
    Core程序集的可空性注解，以及减少容器镜像大小，包括下表列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| Extension method to allow anonymous access to an endpoint | 16 | Securing
    web services |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 允许匿名访问端点的扩展方法 | 16 | 保护Web服务 |'
- en: '| JSON extension methods for `HttpRequest` and `HttpResponse` | 16 | Getting
    customers as JSON in the controller |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `HttpRequest`和`HttpResponse`的JSON扩展方法 | 16 | 在控制器中获取JSON格式的客户信息 |'
- en: ASP.NET Core 6.0
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 6.0
- en: 'ASP.NET Core 6.0 was released in November 2021 and focused on productivity
    improvements like minimizing code to implement basic websites and services, .NET
    Hot Reload, and new hosting options for Blazor, like hybrid apps using .NET MAUI,
    including the topics listed in the following table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 6.0于2021年11月发布，专注于提高生产力的改进，如最小化实现基本网站和服务的代码、.NET热重载，以及新的Blazor托管选项，如使用.NET
    MAUI的混合应用，包括下表列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| New empty web project template | 14 | Understanding the empty web template
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 新的空Web项目模板 | 14 | 理解空Web模板 |'
- en: '| HTTP logging middleware | 16 | Enabling HTTP logging |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| HTTP日志记录中间件 | 16 | 启用HTTP日志记录 |'
- en: '| Minimal APIs | 16 | Implementing minimal Web APIs |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 最小API | 16 | 实现最小Web API |'
- en: '| Blazor error boundaries | 17 | Defining Blazor error boundaries |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Blazor错误边界 | 17 | 定义Blazor错误边界 |'
- en: '| Blazor WebAssembly AOT | 17 | Enabling Blazor WebAssembly ahead-of-time compilation
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| Blazor WebAssembly AOT | 17 | 启用Blazor WebAssembly预先编译 |'
- en: '| .NET Hot Reload | 17 | Fixing code using .NET Hot Reload |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| .NET热重载 | 17 | 使用.NET热重载修复代码 |'
- en: '| .NET MAUI Blazor apps | 19 | Hosting Blazor components in .NET MAUI apps
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| .NET MAUI Blazor应用 | 19 | 在.NET MAUI应用中托管Blazor组件 |'
- en: Building Windows-only desktop apps
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '| 构建仅限Windows的桌面应用 |'
- en: 'Technologies for building Windows-only desktop apps include:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 构建仅限Windows的桌面应用的技术包括：
- en: '**Windows Forms**, 2002.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Forms**, 2002.'
- en: '**Windows Presentation Foundation** (**WPF**), 2006.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Presentation Foundation** (**WPF**)，2006 年。'
- en: '**Windows Store** apps, 2012.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Store** 应用，2012 年。'
- en: '**Universal Windows Platform** (**UWP**) apps, 2015.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用 Windows 平台** (**UWP**) 应用，2015 年。'
- en: '**Windows App SDK** (formerly **WinUI 3** and **Project Reunion**) apps, 2021.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows App SDK**（曾用名 **WinUI 3** 和 **Project Reunion**）应用，2021 年。'
- en: Understanding legacy Windows application platforms
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解传统 Windows 应用平台
- en: With the Microsoft Windows 1.0 release in 1985, the only way to create Windows
    applications was to use the C language and call functions in three core DLLs named
    kernel, user, and GDI. Once Windows became 32-bit with Windows 95, the DLLs were
    suffixed with 32 and became known as **Win32 API**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 1985 年微软 Windows 1.0 的发布，创建 Windows 应用的唯一方式是使用 C 语言并调用名为 kernel、user 和 GDI
    的三个核心 DLL 中的函数。当 Windows 95 成为 32 位系统后，这些 DLL 被附加了 32 后缀，并被称为 **Win32 API**。
- en: In 1991, Microsoft introduced Visual Basic, which provided developers with a
    visual, drag-and-drop-from-a-toolbox-of-controls way to build the user interface
    for Windows applications. It was immensely popular, and the Visual Basic runtime
    is still distributed as part of Windows 10 today.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 1991 年，微软推出了 Visual Basic，为开发者提供了一种通过工具箱中的控件进行拖放操作的可视化方式来构建 Windows 应用程序的用户界面。它极受欢迎，Visual
    Basic 运行时至今仍是 Windows 10 的一部分。
- en: With the first version of C# and .NET Framework released in 2002, Microsoft
    provided technology for building Windows desktop applications named **Windows
    Forms**. The equivalent at the time for web development was named **Web Forms**,
    hence the complimentary names. The code could be written in either Visual Basic
    or C# languages. Windows Forms had a similar drag-and-drop visual designer, although
    it generated C# or Visual Basic code to define the user interface, which can be
    difficult for humans to understand and edit directly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 2002 年 C# 和 .NET Framework 的首个版本发布，微软提供了名为 **Windows Forms** 的技术来构建 Windows
    桌面应用。当时，Web 开发的对应技术名为 **Web Forms**，因此名称相辅相成。代码可以用 Visual Basic 或 C# 语言编写。Windows
    Forms 拥有类似的拖放式可视化设计器，尽管它生成的是 C# 或 Visual Basic 代码来定义用户界面，这可能对人类来说难以直接理解和编辑。
- en: In 2006, Microsoft released a more powerful technology for building Windows
    desktop applications, named **Windows Presentation Foundation** (**WPF**), as
    a key component of .NET Framework 3.0 alongside **Windows Communication Foundation**
    (**WCF**) and **Windows Workflow** (**WF**).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 2006 年，微软发布了一种更强大的技术，名为 **Windows Presentation Foundation** (**WPF**)，作为 .NET
    Framework 3.0 的关键组件，与 **Windows Communication Foundation** (**WCF**) 和 **Windows
    Workflow** (**WF**) 并列。
- en: Although a WPF app can be created by writing only C# statements, it can also
    use **eXtensible Application Markup Language** (**XAML**) to specify its user
    interface, which is easy for both humans and code to understand. Visual Studio
    for Windows is partially built with WPF.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过仅编写 C# 语句来创建 WPF 应用，但它也可以使用 **可扩展应用程序标记语言** (**XAML**) 来指定用户界面，这既便于人类理解，也便于代码处理。Windows
    版的 Visual Studio 部分基于 WPF 构建。
- en: In 2012, Microsoft released Windows 8 with its Windows Store apps that run in
    a protected sandbox.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 2012 年，微软发布了 Windows 8，其内置的 Windows Store 应用运行在一个受保护的沙箱环境中。
- en: In 2015, Microsoft released Windows 10 with an updated Windows Store app concept
    named **Universal Windows Platform** (**UWP**). UWP apps can be built using C++
    and the DirectX UI, or JavaScript and HTML, or C# using a custom fork of modern
    .NET that is not cross-platform but provides full access to the underlying WinRT
    APIs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 2015 年，微软发布了 Windows 10，并引入了名为 **通用 Windows 平台** (**UWP**) 的更新版 Windows Store
    应用概念。UWP 应用可以使用 C++ 和 DirectX UI、JavaScript 和 HTML 或 C# 结合现代 .NET 的定制分支来构建，该分支虽非跨平台，但能完全访问底层的
    WinRT API。
- en: UWP apps can only execute on the Windows 10 platform, not earlier versions of
    Windows, but UWP apps can run on Xbox and Windows Mixed Reality headsets with
    motion controllers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: UWP 应用仅能在 Windows 10 平台上运行，不支持早期版本的 Windows，但可在 Xbox 及配备运动控制器的 Windows Mixed
    Reality 头显上运行。
- en: Many Windows developers rejected Windows Store and UWP apps because they have
    limited access to the underlying system. Microsoft recently created **Project
    Reunion** and **WinUI 3**, which work together to allow Windows developers to
    bring some of the benefits of modern Windows development to their existing WPF
    apps and allow them to have the same benefits and system integrations that UWP
    apps have. This initiative is now known as **Windows App SDK**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Windows 开发者因 UWP 应用对底层系统的访问受限而拒绝使用 Windows Store。微软最近推出了 **Project Reunion**
    和 **WinUI 3**，两者协同工作，使 Windows 开发者能够将现代 Windows 开发的某些优势引入现有的 WPF 应用，并使其享有与 UWP
    应用相同的益处和系统集成。这一举措现称为 **Windows App SDK**。
- en: Understanding modern .NET support for legacy Windows platforms
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解现代.NET对遗留Windows平台的支持
- en: The on-disk size of the .NET SDKs for Linux and macOS is about 330 MB. The on-disk
    size of the .NET SDK for Windows is about 440 MB. This is because it includes
    the Windows Desktop Runtime, which allows the legacy Windows application platforms
    Windows Forms and WPF to be run on modern .NET.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK在Linux和macOS上的磁盘占用约为330 MB。.NET SDK在Windows上的磁盘占用约为440 MB。这是因为它包含了Windows桌面运行时，该运行时允许遗留的Windows应用程序平台Windows
    Forms和WPF在现代.NET上运行。
- en: There are many enterprise applications built using Windows Forms and WPF that
    need to be maintained or enhanced with new features, but until recently they were
    stuck on .NET Framework, which is now a legacy platform. With modern .NET and
    its Windows Desktop Pack, these apps can now use the full modern capabilities
    of .NET.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 许多使用Windows Forms和WPF构建的企业应用程序需要维护或增强新功能，但直到最近它们还停留在.NET Framework上，这是一个遗留平台。借助现代.NET及其Windows桌面包，这些应用程序现在可以充分利用.NET的现代功能。
- en: Structuring projects
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: How should you structure your projects? So far, we have built small individual
    console apps to illustrate language or library features. In the rest of this book,
    we will build multiple projects using different technologies that work together
    to provide a single solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该如何组织你的项目？到目前为止，我们构建了小型独立的控制台应用程序来演示语言或库功能。在本书的其余部分，我们将使用不同的技术构建多个项目，这些技术协同工作以提供单一解决方案。
- en: With large, complex solutions, it can be difficult to navigate amongst all the
    code. So, the primary reason to structure your projects is to make it easier to
    find components. It is good to have an overall name for your solution or workspace
    that reflects the application or solution.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型复杂的解决方案中，要在所有代码中导航可能会很困难。因此，组织项目的主要原因是使其更容易找到组件。为解决方案或工作区提供一个反映应用程序或解决方案的整体名称是很好的。
- en: We will build multiple projects for a fictional company named **Northwind**.
    We will name the solution or workspace `PracticalApps` and use the name `Northwind`
    as a prefix for all the project names.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为一家名为**Northwind**的虚构公司构建多个项目。我们将把解决方案或工作区命名为`PracticalApps`，并使用`Northwind`作为所有项目名称的前缀。
- en: There are many ways to structure and name projects and solutions, for example,
    using a folder hierarchy as well as a naming convention. If you work in a team,
    make sure you know how your team does it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法来组织和命名项目和解决方案，例如使用文件夹层次结构以及命名约定。如果你在一个团队中工作，请确保你知道你的团队是如何做的。
- en: Structuring projects in a solution or workspace
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在解决方案或工作区中组织项目
- en: 'It is good to have a naming convention for your projects in a solution or workspace
    so that any developer can tell what each one does instantly. A common choice is
    to use the type of project, for example, class library, console app, website,
    and so on, as shown in the following table:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案或工作区中为项目制定命名约定是很好的做法，这样任何开发人员都能立即了解每个项目的作用。常见的选择是使用项目类型，例如类库、控制台应用程序、网站等，如下表所示：
- en: '| Name | Description |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `Northwind.Common` | A class library project for common types like interfaces,
    enums, classes, records, and structs, used across multiple projects. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common` | 一个类库项目，用于跨多个项目使用的通用类型，如接口、枚举、类、记录和结构。 |'
- en: '| `Northwind.Common.EntityModels` | A class library project for common EF Core
    entity models. Entity models are often used on both the server and client side,
    so it is best to separate dependencies on specific database providers. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common.EntityModels` | 一个类库项目，用于通用的EF Core实体模型。实体模型通常在服务器和客户端侧都被使用，因此最好将特定数据库提供程序的依赖关系分开。
    |'
- en: '| `Northwind.Common.DataContext` | A class library project for the EF Core
    database context with dependencies on specific database providers. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common.DataContext` | 一个类库项目，用于依赖特定数据库提供程序的EF Core数据库上下文。 |'
- en: '| `Northwind.Web` | An ASP.NET Core project for a simple website that uses
    a mixture of static HTML files and dynamic Razor Pages. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Web` | 一个ASP.NET Core项目，用于一个简单的网站，该网站混合使用静态HTML文件和动态Razor页面。 |'
- en: '| `Northwind.Razor.Component` | A class library project for Razor Pages used
    in multiple projects. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Razor.Component` | 一个类库项目，用于在多个项目中使用的Razor页面。 |'
- en: '| `Northwind.Mvc` | An ASP.NET Core project for a complex website that uses
    the MVC pattern and can be more easily unit tested. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Mvc` | 一个ASP.NET Core项目，用于使用MVC模式的复杂网站，可以更容易地进行单元测试。 |'
- en: '| `Northwind.WebApi` | An ASP.NET Core project for an HTTP API service. A good
    choice for integrating with websites because they can use any JavaScript library
    or Blazor to interact with the service. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.WebApi` | 一个用于HTTP API服务的ASP.NET Core项目。与网站集成的好选择，因为它们可以使用任何JavaScript库或Blazor与服务交互。'
- en: '| `Northwind.OData` | An ASP.NET Core project for an HTTP API service that
    implements the OData standard to enable a client to control queries. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.OData` | 一个实现OData标准以允许客户端控制查询的HTTP API服务的ASP.NET Core项目。'
- en: '| `Northwind.GraphQL` | An ASP.NET Core project for an HTTP API service that
    implements the GraphQL standard to enable a client to control queries. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.GraphQL` | 一个实现GraphQL标准以允许客户端控制查询的HTTP API服务的ASP.NET Core项目。'
- en: '| `Northwind.gRPC` | An ASP.NET Core project for a gRPC service. A good choice
    for integrating with apps built with any language and platform since gRPC has
    wide support and is highly efficient and performant. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.gRPC` | 一个用于gRPC服务的ASP.NET Core项目。与使用任何语言和平台构建的应用程序集成的好选择，因为gRPC支持广泛且高效且性能优越。'
- en: '| `Northwind.SignalR` | An ASP.NET Core project for real-time communication.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.SignalR` | 一个用于实时通信的ASP.NET Core项目。'
- en: '| `Northwind.AzureFuncs` | An ASP.NET Core project for implementing a serverless
    nanoservice for hosting in Azure Functions. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.AzureFuncs` | 一个用于在Azure Functions中托管的无服务器纳米服务的ASP.NET Core项目。'
- en: '| `Northwind.BlazorServer` | An ASP.NET Core Blazor Server project. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorServer` | 一个ASP.NET Core Blazor服务器项目。'
- en: '| `Northwind.BlazorWasm.Client` | An ASP.NET Core Blazor WebAssembly client-side
    project. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorWasm.Client` | 一个ASP.NET Core Blazor WebAssembly客户端项目。'
- en: '| `Northwind.BlazorWasm.Server` | An ASP.NET Core Blazor WebAssembly server-side
    project. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorWasm.Server` | 一个ASP.NET Core Blazor WebAssembly服务器端项目。'
- en: '| `Northwind.Maui` | A .NET MAUI project for a cross-platform desktop/mobile
    app. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Maui` | 一个用于跨平台桌面/移动应用的.NET MAUI项目。'
- en: '| `Northwind.MauiBlazor` | A .NET MAUI project for hosting Blazor components
    with native integrations with the OS. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.MauiBlazor` | 一个用于托管Blazor组件并具有与操作系统原生集成的.NET MAUI项目。'
- en: Using other project templates
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用其他项目模板
- en: 'When you install the .NET SDK, there are many project templates included:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 安装.NET SDK时，包含许多项目模板：
- en: 'At a command prompt or terminal, enter the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，输入以下命令：
- en: '[PRE0]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will see a list of currently installed templates, including templates for
    Windows desktop development if you are running on Windows, as shown in *Figure
    13.2*:![](img/B17442_14_02.png)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到当前安装的模板列表，如果您在Windows上运行，还包括Windows桌面开发模板，如图*13.2*所示:![](img/B17442_14_02.png)
- en: 'Figure 13.2: A list of dotnet project templates'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.2：dotnet项目模板列表
- en: 'Note the web-related project templates, including ones for creating SPAs using
    Blazor, Angular, and React. But another common JavaScript SPA library is missing:
    Vue.'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意与Web相关的项目模板，包括使用Blazor、Angular和React创建SPA的模板。但另一个常见的JavaScript SPA库缺失了：Vue。
- en: Installing additional template packs
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装额外的模板包
- en: 'Developers can install lots of additional template packs:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以安装许多额外的模板包：
- en: Start a browser and navigate to [http://dotnetnew.azurewebsites.net/](http://dotnetnew.azurewebsites.net/).
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动浏览器并导航至[http://dotnetnew.azurewebsites.net/](http://dotnetnew.azurewebsites.net/)。
- en: Enter `vue` in the textbox and note the list of available templates for Vue.js,
    including one published by Microsoft, as shown in *Figure 13.3*:![](img/B17442_14_03.png)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入`vue`，并注意Vue.js可用模板列表，其中包括微软发布的一个模板，如图*13.3*所示:![](img/B17442_14_03.png)
- en: 'Figure 13.3: A project template for Vue.js by Microsoft'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.3：微软提供的Vue.js项目模板
- en: 'Click on **ASP.NET Core with Vue.js** by Microsoft, and note the instructions
    for installing and using this template, as shown in the following commands:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**微软提供的ASP.NET Core with Vue.js**，并注意安装和使用此模板的说明，如下列命令所示：
- en: '[PRE1]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Click **View other templates in this package**, and note that as well as a project
    template for Vue.js, it also has project templates for Aurelia and Knockout.js.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看此包中的其他模板**，并注意除了Vue.js的项目模板外，它还有Aurelia和Knockout.js的项目模板。
- en: Building an entity data model for the Northwind database
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Northwind数据库构建实体数据模型
- en: Practical applications usually need to work with data in a relational database
    or another data store. In this chapter, we will define an entity data model for
    the Northwind database stored in SQL Server or SQLite. It will be used in most
    of the apps that we create in subsequent chapters.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 实际应用通常需要与关系数据库或其他数据存储进行交互。在本章中，我们将为存储在SQL Server或SQLite中的Northwind数据库定义实体数据模型。它将被用于我们后续章节创建的大多数应用中。
- en: The `Northwind4SQLServer.sql` and `Northwind4SQLite.sql` script files are different.
    The script for SQL Server creates 13 tables as well as related views and stored
    procedures. The script for SQLite is a simplified version that only creates 10
    tables because SQLite does not support as many features. The main projects in
    this book only need those 10 tables so you can complete every task in this book
    with either database.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Northwind4SQLServer.sql`和`Northwind4SQLite.sql`脚本文件有所不同。SQL Server脚本创建了13个表以及相关的视图和存储过程。SQLite脚本是一个简化版本，仅创建10个表，因为SQLite不支持那么多特性。本书的主要项目仅需要这10个表，因此你可以使用任一数据库完成本书中的所有任务。'
- en: Instructions to install SQL Server and SQLite can be found in *Chapter 10*,
    *Working with Data Using Entity Framework Core*. In that chapter, you will also
    find instructions for installing the `dotnet-ef` tool, which you will use to scaffold
    an entity model from an existing database.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 安装SQL Server和SQLite的指南可在*第10章*，*使用Entity Framework Core处理数据*中找到。该章节还包含了安装`dotnet-ef`工具的说明，该工具用于从现有数据库生成实体模型。
- en: '**Good Practice**: You should create a separate class library project for your
    entity data models. This allows easier sharing between backend web servers and
    frontend desktop, mobile, and Blazor WebAssembly clients.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：应为实体数据模型创建单独的类库项目。这使得在后端Web服务器和前端桌面、移动及Blazor WebAssembly客户端之间共享数据更为便捷。'
- en: Creating a class library for entity models using SQLite
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为实体模型创建使用SQLite的类库
- en: You will now define entity data models in a class library so that they can be
    reused in other types of projects including client-side app models. If you are
    not using SQL Server, you will need to create this class library for SQLite. If
    you are using SQL Server, then you can create both a class library for SQLite
    and one for SQL Server and then switch between them as you choose.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将在类库中定义实体数据模型，以便它们能在包括客户端应用模型在内的其他类型项目中复用。如果你未使用SQL Server，则需为SQLite创建此类库。若使用SQL
    Server，则可同时为SQLite和SQL Server创建类库，并根据需要切换使用。
- en: 'We will automatically generate some entity models using the EF Core command-line
    tool:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用EF Core命令行工具自动生成一些实体模型：
- en: Use your preferred code editor to create a new solution/workspace named `PracticalApps`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你偏好的代码编辑器创建一个名为`PracticalApps`的新解决方案/工作区。
- en: 'Add a class library project, as defined in the following list:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个类库项目，如下列表所述：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.EntityModels.Sqlite`'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.EntityModels.Sqlite`
- en: 'In the `Northwind.Common.EntityModels.Sqlite` project, add package references
    for the SQLite database provider and EF Core design-time support, as shown in
    the following markup:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.Sqlite`项目中，添加SQLite数据库提供程序和EF Core设计时支持的包引用，如下所示：
- en: '[PRE2]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Delete the `Class1.cs` file.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Class1.cs`文件。
- en: Build the project.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: 'Create the `Northwind.db` file for SQLite by copying the `Northwind4SQLite.sql`
    file into the `PracticalApps` folder, and then enter the following command at
    a command prompt or terminal:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`Northwind4SQLite.sql`文件复制到`PracticalApps`文件夹，为SQLite创建`Northwind.db`文件，然后在命令提示符或终端中输入以下命令：
- en: '[PRE3]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Be patient because this command might take a while to create the database structure,
    as shown in the following output:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待，因为此命令可能需要一段时间来创建数据库结构，如下所示：
- en: '[PRE4]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Press Ctrl + C on Windows or Cmd + D on macOS to exit SQLite command mode.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上按Ctrl + C或在macOS上按Cmd + D以退出SQLite命令模式。
- en: Open a command prompt or terminal for the `Northwind.Common.EntityModels.Sqlite`
    folder.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或终端，定位到`Northwind.Common.EntityModels.Sqlite`文件夹。
- en: 'At the command line, generate entity class models for all tables, as shown
    in the following commands:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，为所有表生成实体类模型，如下所示：
- en: '[PRE5]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note the following:'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: 'The command to perform: `dbcontext scaffold`'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的命令：`dbcontext scaffold`
- en: The connection strings. `"Filename=../Northwind.db"`
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串：`"Filename=../Northwind.db"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.Sqlite`
- en: 'The namespace: `--namespace Packt.Shared`'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace Packt.Shared`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时使用数据注解和Fluent API：`--data-annotations`
- en: 'Note the build messages and warnings, as shown in the following output:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意构建消息和警告，如下面的输出所示：
- en: '[PRE6]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Improving the class-to-table mapping
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进类到表的映射
- en: The `dotnet-ef` command-line tool generates different code for SQL Server and
    SQLite because they support different levels of functionality.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet-ef`命令行工具为SQL Server和SQLite生成不同的代码，因为它们支持不同级别的功能。'
- en: 'For example, SQL Server text columns can have limits to the number of characters.
    SQLite does not support this. So, `dotnet-ef` will generate validation attributes
    to ensure `string` properties are limited to a specified number of characters
    for SQL Server but not for SQLite, as shown in the following code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，SQL Server文本列可以有字符数量的限制。SQLite不支持这一点。因此，`dotnet-ef`将生成验证属性，以确保`string`属性在SQL
    Server上限制为指定数量的字符，而在SQLite上则不限制，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Neither database provider will mark non-nullable `string` properties as required:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 两种数据库提供程序都不会将非可空`string`属性标记为必填：
- en: '[PRE8]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will make some small changes to improve the entity model mapping and validation
    rules for SQLite:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对SQLite的实体模型映射和验证规则进行一些小改进：
- en: 'Open the `Customer.cs` file and add a regular expression to validate its primary
    key value to only allow uppercase Western characters, as shown highlighted in
    the following code:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Customer.cs`文件，并添加一个正则表达式以验证其主键值，仅允许使用大写西文字符，如下面的代码中突出显示所示：
- en: '[PRE9]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Activate your code editor''s find and replace feature (in Visual Studio 2022,
    navigate to **Edit** | **Find and Replace** | **Quick Replace**), toggle on **Use
    Regular Expressions**, and then type a regular expression in the search box, as
    shown in the following expression:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活代码编辑器的查找和替换功能（在Visual Studio 2022中，导航至**编辑** | **查找和替换** | **快速替换**），切换**使用正则表达式**，然后在搜索框中输入一个正则表达式，如下面的表达式所示：
- en: '[PRE10]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the replace box, type a replacement regular expression, as shown in the
    following expression:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在替换框中，输入一个替换用的正则表达式，如下面的表达式所示：
- en: '[PRE11]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After the newline character, `\n`, I have included four space characters to
    indent correctly on my system, which uses two space characters per indentation
    level. You can insert as many as you wish.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新行字符`\n`之后，我添加了四个空格字符以在我的系统上正确缩进，该系统每级缩进使用两个空格字符。您可以根据需要插入任意数量的空格。
- en: Set the find and replace to search files in the current project.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置查找和替换以搜索当前项目中的文件。
- en: Execute the search and replace to replace all, as shown in *Figure 13.4*:![](img/B17442_14_04.png)
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行搜索和替换以替换所有内容，如图*13.4*所示：![](img/B17442_14_04.png)
- en: 'Figure 13.4: Search and replace all matches using regular expressions in Visual
    Studio 2022'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.4：在Visual Studio 2022中使用正则表达式搜索并替换所有匹配项
- en: 'Change any date/time properties, for example, in `Employee.cs`, to use a nullable
    `DateTime` instead of an array of bytes, as shown in the following code:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何日期/时间属性，例如在`Employee.cs`中，改为使用可空`DateTime`而非字节数组，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use your code editor's find feature to search for `"datetime"` to find all the
    properties that need changing.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用代码编辑器的查找功能搜索`"datetime"`以找到所有需要更改的属性。
- en: 'Change any `money` properties, for example, in `Order.cs`, to use a nullable
    `decimal` instead of an array of bytes, as shown in the following code:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何`money`属性，例如在`Order.cs`中，改为使用可空`decimal`而非字节数组，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use your code editor's find feature to search for `"money"` to find all the
    properties that need changing.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用代码编辑器的查找功能搜索`"money"`以找到所有需要更改的属性。
- en: 'Change any `bit` properties, for example, in `Product.cs`, to use a `bool`
    instead of an array of bytes, as shown in the following code:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何`bit`属性，例如在`Product.cs`中，改为使用`bool`而非字节数组，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use your code editor's find feature to search for `"bit"` to find all the properties
    that need changing.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用代码编辑器的查找功能搜索`"bit"`以找到所有需要更改的属性。
- en: 'In `Category.cs`, make the `CategoryId` property an `int`, as shown highlighted
    in the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，将`CategoryId`属性设为`int`类型，如以下代码中突出显示所示：
- en: '[PRE15]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Category.cs`, make the `CategoryName` property required, as shown highlighted
    in the following code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，将`CategoryName`属性设为必填项，如以下代码中突出显示所示：
- en: '[PRE16]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `Customer.cs`, make the `CompanyName` property required, as shown highlighted
    in the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customer.cs`中，将`CompanyName`属性设为必填项，如以下代码中突出显示所示：
- en: '[PRE17]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In `Employee.cs`, make the `EmployeeId` property an `int` instead of a `long`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，将`EmployeeId`属性改为`int`而非`long`。
- en: In `Employee.cs`, make the `FirstName` and `LastName` properties required.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，使`FirstName`和`LastName`属性成为必填项。
- en: In `Employee.cs`, make the `ReportsTo` property an `int?` instead of a `long?`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，将`ReportsTo`属性改为`int?`而非`long?`。
- en: In `EmployeeTerritory.cs`, make the `EmployeeId` property an `int` instead of
    a `long`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EmployeeTerritory.cs`中，将`EmployeeId`属性改为`int`而非`long`。
- en: In `EmployeeTerritory.cs`, make the `TerritoryId` property required.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EmployeeTerritory.cs`中，使`TerritoryId`属性成为必填项。
- en: In `Order.cs`, make the `OrderId` property an `int` instead of a `long`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`OrderId`属性改为`int`而非`long`。
- en: In `Order.cs`, decorate the `CustomerId` property with a regular expression
    to enforce five uppercase characters.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，用正则表达式装饰`CustomerId`属性，以强制五个大写字符。
- en: In `Order.cs`, make the `EmployeeId` property an `int?` instead of a `long?`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`EmployeeId`属性改为`int?`而非`long?`。
- en: In `Order.cs`, make the `ShipVia` property an `int?` instead of a `long?`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`ShipVia`属性改为`int?`而非`long?`。
- en: In `OrderDetail.cs`, make the `OrderId` property an `int` instead of a `long`.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`OrderId`属性改为`int`而非`long`。
- en: In `OrderDetail.cs`, make the `ProductId` property an `int` instead of a `long`.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`ProductId`属性改为`int`而非`long`。
- en: In `OrderDetail.cs`, make the `Quantity` property a `short` instead of a `long`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`Quantity`属性改为`short`而非`long`。
- en: In `Product.cs`, make the `ProductId` property an `int` instead of a `long`.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`ProductId`属性改为`int`而非`long`。
- en: In `Product.cs`, make the `ProductName` property required.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，使`ProductName`属性成为必填项。
- en: In `Product.cs`, make the `SupplierId` and `CategoryId` properties an `int?`
    instead of a `long?`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`SupplierId`和`CategoryId`属性改为`int?`而非`long?`。
- en: In `Product.cs`, make the `UnitsInStock`, `UnitsOnOrder`, and `ReorderLevel`
    properties a `short?` instead of a `long?`.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`UnitsInStock`、`UnitsOnOrder`和`ReorderLevel`属性改为`short?`而非`long?`。
- en: In `Shipper.cs`, make the `ShipperId` property an `int` instead of a `long`.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shipper.cs`中，将`ShipperId`属性改为`int`而非`long`。
- en: In `Shipper.cs`, make the `CompanyName` property required.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shipper.cs`中，使`CompanyName`属性成为必填项。
- en: In `Supplier.cs`, make the `SupplierId` property an `int` instead of a `long`.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.cs`中，将`SupplierId`属性改为`int`而非`long`。
- en: In `Supplier.cs`, make the `CompanyName` property required.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.cs`中，使`CompanyName`属性成为必填项。
- en: In `Territory.cs`, make the `RegionId` property an `int` instead of a `long`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Territory.cs`中，将`RegionId`属性改为`int`而非`long`。
- en: In `Territory.cs`, make the `TerritoryId` and `TerritoryDescription` properties
    required.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Territory.cs`中，使`TerritoryId`和`TerritoryDescription`属性成为必填项。
- en: Now that we have a class library for the entity classes, we can create a class
    library for the database context.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了实体类的类库，我们就可以为数据库上下文创建一个类库。
- en: Creating a class library for a Northwind database context
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Northwind数据库上下文创建一个类库
- en: 'You will now define a database context class library:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将定义一个数据库上下文类库：
- en: 'Add a class library project to the solution/workspace, as defined in the following
    list:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向解决方案/工作区添加一个类库项目，如以下列表所定义：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.DataContext.Sqlite`'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.DataContext.Sqlite`
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `Northwind.Common.DataContext.Sqlite` as the active
    OmniSharp project.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Northwind.Common.DataContext.Sqlite`作为活动的OmniSharp项目。
- en: 'In the `Northwind.Common.DataContext.Sqlite` project, add a project reference
    to the `Northwind.Common.EntityModels.Sqlite` project and add a package reference
    to the EF Core data provider for SQLite, as shown in the following markup:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.Sqlite`项目中，添加对`Northwind.Common.EntityModels.Sqlite`项目的项目引用，并添加对EF
    Core SQLite数据提供程序的包引用，如下所示：
- en: '[PRE18]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The path to the project reference should not have a line break in your project
    file.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目引用的路径在你的项目文件中不应有换行。
- en: In the `Northwind.Common.DataContext.Sqlite` project, delete the `Class1.cs`
    class file.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.Sqlite`项目中，删除`Class1.cs`类文件。
- en: Build the `Northwind.Common.DataContext.Sqlite` project.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Common.DataContext.Sqlite`项目。
- en: Move the `NorthwindContext.cs` file from the `Northwind.Common.EntityModels.Sqlite`
    project/folder to the `Northwind.Common.DataContext.Sqlite` project/folder.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `NorthwindContext.cs` 文件从 `Northwind.Common.EntityModels.Sqlite` 项目/文件夹移动到
    `Northwind.Common.DataContext.Sqlite` 项目/文件夹。
- en: In Visual Studio **Solution Explorer**, if you drag and drop a file between
    projects it will be copied. If you hold down Shift while dragging and dropping,
    it will be moved. In Visual Studio Code **EXPLORER**, if you drag and drop a file
    between projects it will be moved. If you hold down Ctrl while dragging and dropping,
    it will be copied.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Visual Studio **解决方案资源管理器**中，如果你在项目间拖放文件，它将被复制。如果你在拖放时按住 Shift 键，文件将被移动。在
    Visual Studio Code **资源管理器**中，如果你在项目间拖放文件，它将被移动。如果你在拖放时按住 Ctrl 键，文件将被复制。
- en: In `NorthwindContext.cs`, in the `OnConfiguring` method, remove the compiler
    `#warning` about the connection string.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NorthwindContext.cs` 中，在 `OnConfiguring` 方法中，移除关于连接字符串的编译器 `#warning`。
- en: '**Good Practice**: We will override the default database connection string
    in any projects such as websites that need to work with the Northwind database,
    so the class derived from `DbContext` must have a constructor with a `DbContextOptions`
    parameter for this to work, as shown in the following code:'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：我们将在需要与 Northwind 数据库交互的任何项目（如网站）中覆盖默认数据库连接字符串，因此从 `DbContext` 派生的类必须有一个带有
    `DbContextOptions` 参数的构造函数才能实现这一点，如下列代码所示：'
- en: '[PRE19]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `OnModelCreating` method, remove all Fluent API statements that call
    the `ValueGeneratedNever` method to configure primary key properties like `SupplierId`
    to never generate a value automatically or call the `HasDefaultValueSql` method,
    as shown in the following code:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnModelCreating` 方法中，移除所有调用 `ValueGeneratedNever` 方法的 Fluent API 语句，以配置主键属性如
    `SupplierId` 永不自动生成值，或调用 `HasDefaultValueSql` 方法，如下列代码所示：
- en: '[PRE20]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If we do not remove the configuration like the statements above, then when we
    add new suppliers, the `SupplierId` value would always be 0 and we would only
    be able to add one supplier with that value and then all other attempts would
    throw an exception.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们不移除上述配置语句，那么当我们添加新供应商时，`SupplierId` 值将始终为 0，我们只能添加一个具有该值的供应商，之后所有其他尝试都会抛出异常。
- en: 'For the `Product` entity, tell SQLite that the `UnitPrice` can be converted
    from `decimal` to `double`. The `OnModelCreating` method should now be much simplified,
    as shown in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `Product` 实体，告诉 SQLite `UnitPrice` 可以从 `decimal` 转换为 `double`。`OnModelCreating`
    方法现在应该简化很多，如下列代码所示：
- en: '[PRE21]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a class named `NorthwindContextExtensions.cs` and modify its contents to
    define an extension method that adds the Northwind database context to a collection
    of dependency services, as shown in the following code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `NorthwindContextExtensions.cs` 的类，并修改其内容以定义一个扩展方法，该方法将 Northwind 数据库上下文添加到依赖服务集合中，如下列代码所示：
- en: '[PRE22]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Build the two class libraries and fix any compiler errors.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建两个类库并修复任何编译器错误。
- en: Creating a class library for entity models using SQL Server
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SQL Server 创建实体模型的类库
- en: 'To use SQL Server, you will not need to do anything if you already set up the
    Northwind database in *Chapter 10*, *Working with Data Using Entity Framework
    Core*. But you will now create the entity models using the `dotnet-ef` tool:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 SQL Server，如果您已经在 *第 10 章*，*使用 Entity Framework Core 处理数据* 中设置了 Northwind
    数据库，则无需执行任何操作。但现在您将使用 `dotnet-ef` 工具创建实体模型：
- en: Use your preferred code editor to create a new solution/workspace named `PracticalApps`.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您偏好的代码编辑器创建一个名为 `PracticalApps` 的新解决方案/工作区。
- en: 'Add a class library project, as defined in the following list:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个类库项目，如以下列表所定义：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.EntityModels.SqlServer`'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.EntityModels.SqlServer`
- en: 'In the `Northwind.Common.EntityModels.SqlServer` project, add package references
    for the SQL Server database provider and EF Core design-time support, as shown
    in the following markup:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Common.EntityModels.SqlServer` 项目中，添加 SQL Server 数据库提供程序和 EF Core
    设计时支持的包引用，如下列标记所示：
- en: '[PRE23]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Delete the `Class1.cs` file.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `Class1.cs` 文件。
- en: Build the project.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: Open a command prompt or terminal for the `Northwind.Common.EntityModels.SqlServer`
    folder.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `Northwind.Common.EntityModels.SqlServer` 文件夹打开命令提示符或终端。
- en: 'At the command line, generate entity class models for all tables, as shown
    in the following commands:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，为所有表生成实体类模型，如下列命令所示：
- en: '[PRE24]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Note the following:'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: 'The command to perform: `dbcontext scaffold`'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的命令：`dbcontext scaffold`
- en: The connection strings. `"Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;"`
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串：`"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.SqlServer`
- en: 'The namespace: `--namespace Packt.Shared`'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace Packt.Shared`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时使用数据注解和 Fluent API：`--data-annotations`
- en: 'In `Customer.cs`, add a regular expression to validate its primary key value
    to only allow uppercase Western characters, as shown highlighted in the following
    code:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Customer.cs` 中，添加一个正则表达式以验证其主键值，仅允许大写的西文字符，如下列高亮代码所示：
- en: '[PRE25]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In `Customer.cs`, make the `CustomerId` and `CompanyName` properties required.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Customer.cs` 中，使 `CustomerId` 和 `CompanyName` 属性成为必需。
- en: 'Add a class library project to the solution/workspace, as defined in the following
    list:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向解决方案/工作区中添加一个类库项目，如以下列表所定义：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.DataContext.SqlServer`'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.DataContext.SqlServer`
- en: In Visual Studio Code, select `Northwind.Common.DataContext.SqlServer` as the
    active OmniSharp project.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，选择 `Northwind.Common.DataContext.SqlServer` 作为活动的 OmniSharp
    项目。
- en: 'In the `Northwind.Common.DataContext.SqlServer` project, add a project reference
    to the `Northwind.Common.EntityModels.SqlServer` project and add a package reference
    to the EF Core data provider for SQL Server, as shown in the following markup:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Common.DataContext.SqlServer` 项目中，添加对 `Northwind.Common.EntityModels.SqlServer`
    项目的项目引用，并添加对 EF Core SQL Server 数据提供程序的包引用，如下列标记所示：
- en: '[PRE26]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the `Northwind.Common.DataContext.SqlServer` project, delete the `Class1.cs`
    class file.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Common.DataContext.SqlServer` 项目中，删除 `Class1.cs` 类文件。
- en: Build the `Northwind.Common.DataContext.SqlServer` project.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Common.DataContext.SqlServer` 项目。
- en: Move the `NorthwindContext.cs` file from the `Northwind.Common.EntityModels.SqlServer`
    project/folder to the `Northwind.Common.DataContext.SqlServer` project/folder.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `NorthwindContext.cs` 文件从 `Northwind.Common.EntityModels.SqlServer` 项目/文件夹移动到
    `Northwind.Common.DataContext.SqlServer` 项目/文件夹。
- en: In `NorthwindContext.cs`, remove the compiler warning about the connection string.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NorthwindContext.cs` 中，移除关于连接字符串的编译器警告。
- en: 'Add a class named `NorthwindContextExtensions.cs`, and modify its contents
    to define an extension method that adds the Northwind database context to a collection
    of dependency services, as shown in the following code:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `NorthwindContextExtensions.cs` 的类，并修改其内容以定义一个扩展方法，该方法将 Northwind 数据库上下文添加到依赖服务集合中，如下列代码所示：
- en: '[PRE27]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Build the two class libraries and fix any compiler errors.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建这两个类库并修复任何编译器错误。
- en: '**Good Practice**: We have provided optional arguments for the `AddNorthwindContext`
    method so that we can override the hardcoded SQLite database filename path or
    the SQL Server database connection string. This will allow us more flexibility,
    for example, to load these values from a configuration file.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：我们为 `AddNorthwindContext` 方法提供了可选参数，以便我们可以覆盖硬编码的 SQLite 数据库文件路径或 SQL
    Server 数据库连接字符串。这将使我们拥有更多灵活性，例如，从配置文件加载这些值。'
- en: Practicing and exploring
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践与探索
- en: Explore this chapter's topics with deeper research.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 通过深入研究探索本章主题。
- en: Exercise 13.1 – Test your knowledge
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.1 – 测试你的知识
- en: .NET 6 is cross-platform. Windows Forms and WPF apps can run on .NET 6\. Can
    those apps therefore run on macOS and Linux?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 6 是跨平台的。Windows Forms 和 WPF 应用可以在 .NET 6 上运行。那么这些应用是否能在 macOS 和 Linux 上运行呢？
- en: How does a Windows Forms app define its user interface, and why is this a potential
    problem?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows Forms 应用如何定义其用户界面，以及为什么这可能是一个潜在问题？
- en: How can a WPF or UWP app define its user interface, and why is this good for
    developers?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPF 或 UWP 应用如何定义其用户界面，以及为什么这对开发者有益？
- en: Exercise 13.2 – Explore topics
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.2 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接来了解更多关于本章涵盖主题的详细信息：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net)'
- en: Summary
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have been introduced to some of the app models and workloads
    that you can use to build practical applications using C# and .NET.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你已了解到一些可用于使用C#和.NET构建实用应用的应用模型和工作负载。
- en: You have created two to four class libraries to define an entity data model
    for working with the Northwind database using either SQLite or SQL Server or both.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 你已创建了两到四个类库，用于定义与Northwind数据库交互的实体数据模型，可使用SQLite、SQL Server或两者兼用。
- en: 'In the following six chapters, you will learn the details about how to build
    the following:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的六章中，你将学习如何构建以下内容的详细信息：
- en: Simple websites using static HTML pages and dynamic Razor Pages.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态HTML页面和动态Razor页面的简单网站。
- en: Complex websites using the Model-View-Controller (MVC) design pattern.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用模型-视图-控制器（MVC）设计模式的复杂网站。
- en: Web services that can be called by any platform that can make an HTTP request
    and client websites that call those web services.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可被任何能发起HTTP请求的平台调用的Web服务，以及调用这些Web服务的客户端网站。
- en: Blazor user interface components that can be hosted on a web server, in the
    browser, or on hybrid web-native mobile and desktop apps.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可托管在Web服务器、浏览器或混合Web-原生移动和桌面应用中的Blazor用户界面组件。
- en: Services that implement remote procedure calls using gRPC.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用gRPC实现远程过程调用的服务。
- en: Services that implement real-time communication using SignalR.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SignalR实现实时通信的服务。
- en: Services that provide easy and flexible access to an EF Core model.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供简便灵活访问EF Core模型的服务。
- en: Serverless nano services hosted in Azure Functions.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions中托管的无服务器微服务。
- en: Cross-platform native mobile and desktop apps using .NET MAUI.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET MAUI构建跨平台的原生移动和桌面应用。
