- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Websites Using the Model-View-Controller Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using Microsoft ASP.NET Core MVC, including the startup configuration,
    authentication, authorization, routes, request and response pipeline, models,
    views, and controllers that make up an ASP.NET Core MVC project.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring an ASP.NET Core MVC website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing an ASP.NET Core MVC website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a database and using display templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving scalability using asynchronous tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core Razor Pages are great for simple websites. For more complex websites,
    it would be better to have a more formal structure to manage that complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the **Model-View-Controller** (**MVC**) design pattern is useful.
    It uses technologies like Razor Pages, but allows a cleaner separation between
    technical concerns, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Models**: Classes that represent the data entities and view models used on
    the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views**: Razor files, that is, `.cshtml` files, that render data in view
    models into HTML web pages. Blazor uses the `.razor` file extension, but do not
    confuse them with Razor files!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controllers**: Classes that execute code when an HTTP request arrives at
    the web server. The controller methods usually create a view model that may contain
    entity models and passes it to a view to generate an HTTP response to send back
    to the web browser or other client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to understand using the MVC design pattern for web development
    is to see a working example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use a project template to create an ASP.NET Core MVC website project
    that has a database for authenticating and authorizing users. Visual Studio 2022
    defaults to using SQL Server LocalDB for the accounts database. Visual Studio
    Code (or more accurately the `dotnet` tool) uses SQLite by default and you can
    specify a switch to use SQL Server LocalDB instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a MVC website project with authentication
    accounts stored in a database, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Language: C#'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Mvc`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Options: **Authentication Type: Individual Accounts** / `--auth Individual`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For Visual Studio, leave all other options as their defaults
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Northwind.Mvc` as the active OmniSharp project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line or terminal, use the `help` switch to see other options
    for this project template, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the results, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There are many options, especially related to authentication, as shown in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Switches | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `-au&#124;--auth` | The type of authentication to use:`None` (default): This
    choice also allows you to disable HTTPS.`Individual`: Individual authentication
    that stores registered users and their passwords in a database (SQLite by default).
    We will use this in the project we create for this chapter.`IndividualB2C`: Individual
    authentication with Azure AD B2C.`SingleOrg`: Organizational authentication for
    a single tenant.`MultiOrg`: Organizational authentication for multiple tenants.`Windows`:
    Windows authentication. Mostly useful for intranets. |'
  prefs: []
  type: TYPE_TB
- en: '| `-uld&#124;--use-local-db` | Whether to use SQL Server LocalDB instead of
    SQLite. This option only applies if `--auth Individual` or `--auth IndividualB2C`
    is specified. The value is an optional `bool` with a default of `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-rrc&#124;--razor-runtime-compilation` | Determines if the project is configured
    to use Razor runtime compilation in `Debug` builds. This can improve the performance
    of startup during debugging because it can defer the compilation of Razor views.
    The value is an optional `bool` with a default of `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-f&#124;--framework` | The target framework for the project. Values can
    be: `net6.0` (default), `net5.0`, or `netcoreapp3.1` |'
  prefs: []
  type: TYPE_TB
- en: Creating the authentication database for SQL Server LocalDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you created the MVC project using Visual Studio 2022, or you used `dotnet
    new mvc` with the `-uld` or `--use-local-db` switch, then the database for authentication
    and authorization will be stored in SQL Server LocalDB. But the database does
    not yet exist. Let's create it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'At a command prompt or terminal, in the `Northwind.Mvc` folder, enter the command
    to run database migrations so that the database used to store credentials for
    authentication is created, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you created the MVC project using `dotnet new`, then the database for authentication
    and authorization will be stored in SQLite and the file has already been created
    named `app.db`.
  prefs: []
  type: TYPE_NORMAL
- en: The connection string for the authentication database is named `DefaultConnection`
    and it is stored in the `appsettings.json` file in the root folder for the MVC
    website project.
  prefs: []
  type: TYPE_NORMAL
- en: 'For SQL Server LocalDB (with a truncated connection string), see the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For SQLite, see the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exploring the default ASP.NET Core MVC website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review the behavior of the default ASP.NET Core MVC website project
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, expand the `Properties` folder, open the `launchSettings.json`
    file, and note the random port numbers (yours will be different) configured for
    the project for `HTTPS` and `HTTP`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the port numbers to `5001` for `HTTPS` and `5000` for `HTTP`, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes to the `launchSettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and open **Developer Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:5000/` and note the following, as shown in *Figure
    15.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests for HTTP are automatically redirected to HTTPS on port `5001`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The top navigation menu with links to **Home**, **Privacy**, **Register**, and
    **Login**. If the viewport width is 575 pixels or less, then the navigation collapses
    into a hamburger menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The title of the website, **Northwind.Mvc**, shown in the header and footer.![](img/B17442_16_01.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 15.1: The ASP.NET Core MVC project template website home page'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding visitor registration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, passwords must have at least one non-alphanumeric character, they
    must have at least one digit (0-9), and they must have at least one uppercase
    letter (A-Z). I use `Pa$$w0rd` in scenarios like this when I am just exploring.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC project template follows best practice for **double-opt-in** (**DOI**),
    meaning that after filling in an email and password to register, an email is sent
    to the email address, and the visitor must click a link in that email to confirm
    that they want to register.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have not yet configured an email provider to send that email, so we must
    simulate that step:'
  prefs: []
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Register**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an email and password, and then click the **Register** button. (I used
    `test@example.com` and `Pa$$w0rd`.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link with the text **Click here to confirm your account** and note
    that you are redirected to a **Confirm email** web page that you could customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Login**, enter your email and password (note
    that there is an optional checkbox to remember you, and there are links if the
    visitor has forgotten their password or they want to register as a new visitor),
    and then click the **Log in** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click your email address in the top navigation menu. This will navigate to an
    account management page. Note that you can set a phone number, change your email
    address, change your password, enable two-factor authentication (if you add an
    authenticator app), and download and delete your personal data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing an MVC website project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your code editor, in Visual Studio **Solution Explorer** (toggle on **Show
    All Files**) or in Visual Studio Code **EXPLORER**, review the structure of an
    MVC website project, as shown in *Figure 15.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17442_16_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: The default folder structure of an ASP.NET Core MVC project'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look in more detail at some of these parts later, but for now, note
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Areas`: This folder contains nested folders and a file needed to integrate
    your website project with **ASP.NET Core Identity**, which is used for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`, `obj`: These folders contain temporary files needed during the build
    process and the compiled assemblies for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controllers`: This folder contains C# classes that have methods (known as
    actions) that fetch a model and pass it to a view, for example, `HomeController.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Data`: This folder contains Entity Framework Core migration classes used by
    the ASP.NET Core Identity system to provide data storage for authentication and
    authorization, for example, `ApplicationDbContext.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Models`: This folder contains C# classes that represent all of the data gathered
    together by a controller and passed to a view, for example, `ErrorViewModel.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Properties`: This folder contains a configuration file for IIS or IIS Express
    on Windows and for launching the website during development named `launchSettings.json`.
    This file is only used on the local development machine and is not deployed to
    your production website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Views`: This folder contains the `.cshtml` Razor files that combine HTML and
    C# code to dynamically generate HTML responses. The `_ViewStart` file sets the
    default layout and `_ViewImports` imports common namespaces used in all views
    like tag helpers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Home`: This subfolder contains Razor files for the home and privacy pages.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared`: This subfolder contains Razor files for the shared layout, an error
    page, and two partial views for logging in and validation scripts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wwwroot`: This folder contains static content used by the website, such as
    CSS for styling, libraries of JavaScript, JavaScript for this website project,
    and a `favicon.ico` file. You also put images and other static file resources
    like PDF documents in here. The project template includes Bootstrap and jQuery
    libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.db`: This is the SQLite database that stores registered visitors. (If
    you used SQL Server LocalDB, then it will not be needed.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appsettings.json` and `appsettings.Development.json`: These files contain
    settings that your website can load at runtime, for example, the database connection
    string for the ASP.NET Core Identity system and logging levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.Mvc.csproj`: This file contains project settings like the use of
    the Web .NET SDK, an entry for SQLite to ensure that the `app.db` file is copied
    to the website''s output folder, and a list of NuGet packages that your project
    requires, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.UI`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.EntityFrameworkCore.Sqlite` or `Microsoft.EntityFrameworkCore.SqlServer`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.EntityFrameworkCore.Tools`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Program.cs`: This file defines a hidden `Program` class that contains the
    `Main` entry point. It builds a pipeline for processing incoming HTTP requests
    and hosts the website using default options like configuring the Kestrel web server
    and loading `appsettings`. It adds and configures services that your website needs,
    for example, ASP.NET Core Identity for authentication, SQLite or SQL Server for
    identity data storage, and so on, and routes for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the ASP.NET Core Identity database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `appsettings.json` to find the connection string used for the ASP.NET
    Core Identity database, as shown highlighted for SQL Server LocalDB in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you used SQL Server LocalDB for the identity data store, then you can use
    **Server Explorer** to connect to the database. You can copy and paste the connection
    string from the `appsettings.json` file (but remove the second backslash between
    `(localdb)` and `mssqllocaldb`).
  prefs: []
  type: TYPE_NORMAL
- en: If you installed an SQLite tool such as SQLiteStudio, then you can open the
    SQLite `app.db` database file.
  prefs: []
  type: TYPE_NORMAL
- en: You can then see the tables that the ASP.NET Core Identity system uses to register
    users and roles, including the `AspNetUsers` table used to store the registered
    visitor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: The ASP.NET Core MVC project template follows good practice
    by storing a hash of the password instead of the password itself, which you will
    learn more about in *Chapter 20*, *Protecting Your Data and Applications*.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring an ASP.NET Core MVC website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's walk through the parts that make up a modern ASP.NET Core MVC website.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ASP.NET Core MVC initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Appropriately enough, we will start by exploring the MVC website''s default
    initialization and configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Program.cs` file and note that it uses the top-level program feature
    (so there is a hidden `Program` class with a `Main` method). This file can be
    considered to be divided into four important sections from top to bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET 5 and earlier ASP.NET Core project templates used a `Startup` class to
    separate these parts into separate methods but with .NET 6, Microsoft encourages
    putting everything in a single `Program.cs` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first section imports some namespaces, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember that by default, many other namespaces are imported using the implicit
    usings feature of .NET 6 and later. Build the project and then the globally imported
    namespaces can be found in the following path: `obj\Debug\net6.0\Northwind.Mvc.GlobalUsings.g.cs`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second section creates and configures a web host builder. It registers
    an application database context using SQL Server or SQLite with its database connection
    string loaded from the `appsettings.json` file for its data storage, adds ASP.NET
    Core Identity for authentication and configures it to use the application database,
    and adds support for MVC controllers with views, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `builder` object has two commonly used objects: `Configuration` and `Services`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Configuration` contains merged values from all the places you could set configuration:
    `appsettings.json`, environment variables, command-line arguments, and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Services` is a collection of registered dependency services'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The call to `AddDbContext` is an example of registering a dependency service.
    ASP.NET Core implements the **dependency injection** (**DI**) design pattern so
    that other components like controllers can request needed services through their
    constructors. Developers register those services in this section of `Program.cs`
    (or if using a `Startup` class then in its `ConfigureServices` method.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third section configures the HTTP request pipeline. It configures a relative
    URL path to run database migrations if the website runs in development, or a friendlier
    error page and HSTS for production. HTTPS redirection, static files, routing,
    and ASP.NET Identity are enabled, and an MVC default route and Razor Pages are
    configured, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We learned about most of these methods and features in *Chapter 14*, *Building
    Websites Using ASP.NET Core Razor Pages*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Good Practice**: What does the extension method `UseMigrationsEndPoint` do?
    You could read the official documentation, but it does not help much. For example,
    it does not tell us what relative URL path it defines by default: [https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint).
    Luckily, ASP.NET Core is open source, so we can read the source code and discover
    what it does, at the following link: [https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18).
    Get into the habit of exploring the source code for ASP.NET Core to understand
    how it works.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Apart from the `UseAuthentication` and `UseAuthorization` methods, the most
    important new method in this section of `Program.cs` is `MapControllerRoute`,
    which maps a default route for use by MVC. This route is very flexible because
    it will map to almost any incoming URL, as you will see in the next topic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although we will not create any Razor Pages in this chapter, we need to leave
    the method call that maps Razor Page support because our MVC website uses ASP.NET
    Core Identity for authentication and authorization, and it uses a Razor Class
    Library for its user interface components, like visitor registration and login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The fourth and final section has a thread-blocking method call that runs the
    website and waits for incoming HTTP requests to respond to, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding the default MVC route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The responsibility of a route is to discover the name of a controller class
    to instantiate and an action method to execute with an optional `id` parameter
    to pass into the method that will generate an HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: 'A default route is configured for MVC, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The route pattern has parts in curly brackets `{}` called **segments**, and
    they are like named parameters of a method. The value of these segments can be
    any `string`. Segments in URLs are not case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: The route pattern looks at any URL path requested by the browser and matches
    it to extract the name of a `controller`, the name of an `action`, and an optional
    `id` value (the `?` symbol makes it optional).
  prefs: []
  type: TYPE_NORMAL
- en: If the user hasn't entered these names, it uses defaults of `Home` for the controller
    and `Index` for the action (the `=` assignment sets a default for a named segment).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table contains example URLs and how the default route would work
    out the names of a controller and action:'
  prefs: []
  type: TYPE_NORMAL
- en: '| URL | Controller | Action | ID |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Home | Index |  |'
  prefs: []
  type: TYPE_TB
- en: '| `/Muppet` | Muppet | Index |  |'
  prefs: []
  type: TYPE_TB
- en: '| `/Muppet/Kermit` | Muppet | Kermit |  |'
  prefs: []
  type: TYPE_TB
- en: '| `/Muppet/Kermit/Green` | Muppet | Kermit | Green |'
  prefs: []
  type: TYPE_TB
- en: '| `/Products` | Products | Index |  |'
  prefs: []
  type: TYPE_TB
- en: '| `/Products/Detail` | Products | Detail |  |'
  prefs: []
  type: TYPE_TB
- en: '| `/Products/Detail/3` | Products | Detail | 3 |'
  prefs: []
  type: TYPE_TB
- en: Understanding controllers and actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In MVC, the C stands for *controller*. From the route and an incoming URL,
    ASP.NET Core knows the name of the controller, so it will then look for a class
    that is decorated with the `[Controller]` attribute or derives from a class decorated
    with that attribute, for example, the Microsoft-provided class named `ControllerBase`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the ControllerBase class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see in the XML comment, `ControllerBase` does not support views.
    It is used for creating web services, as you will see in *Chapter 16*, *Building
    and Consuming Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: '`ControllerBase` has many useful properties for working with the current HTTP
    context, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `Request` | Just the HTTP request. For example, headers, query string parameters,
    the body of the request as a stream that you can read from, the content type and
    length, and cookies. |'
  prefs: []
  type: TYPE_TB
- en: '| `Response` | Just the HTTP response. For example, headers, the body of the
    response as a stream that you can write to, the content type and length, status
    code, and cookies. There are also delegates like `OnStarting` and `OnCompleted`
    that you can hook a method up to. |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpContext` | Everything about the current HTTP context including the request
    and response, information about the connection, a collection of features that
    have been enabled on the server with middleware, and a `User` object for authentication
    and authorization. |'
  prefs: []
  type: TYPE_TB
- en: Understanding the Controller class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microsoft provides another class named `Controller` that your classes can inherit
    from if they do need view support, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`Controller` has many useful properties for working with views, as shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewData` | A dictionary that the controller can store key/value pairs in
    that is accessible in a view. The dictionary''s lifetime is only for the current
    request/response. |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewBag` | A dynamic object that wraps the `ViewData` to provide a friendlier
    syntax for setting and getting dictionary values. |'
  prefs: []
  type: TYPE_TB
- en: '| `TempData` | A dictionary that the controller can store key/value pairs in
    that is accessible in a view. The dictionary''s lifetime is for the current request/response
    and the next request/response for the same visitor session. This is useful for
    storing a value during an initial request, responding with a redirect, and then
    reading the stored value in the subsequent request. |'
  prefs: []
  type: TYPE_TB
- en: '`Controller` has many useful methods for working with views, as shown in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `View` | Returns a `ViewResult` after executing a view that renders a full
    response, for example, a dynamically generated web page. The view can be selected
    using a convention or be specified with a string name. A model can be passed to
    the view. |'
  prefs: []
  type: TYPE_TB
- en: '| `PartialView` | Returns a `PartialViewResult` after executing a view that
    is part of a full response, for example, a dynamically generated chunk of HTML.
    The view can be selected using a convention or be specified with a string name.
    A model can be passed to the view. |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewComponent` | Returns a `ViewComponentResult` after executing a component
    that dynamically generates HTML. The component must be selected by specifying
    its type or its name. An object can be passed as an argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `Json` | Returns a `JsonResult` containing a JSON-serialized object. This
    can be useful for implementing a simple Web API as part of an MVC controller that
    primarily returns HTML for a human to view. |'
  prefs: []
  type: TYPE_TB
- en: Understanding the responsibilities of a controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The responsibilities of a controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the services that the controller needs to be in a valid state and to
    function properly in their class constructor(s).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the action name to identify a method to execute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extract parameters from the HTTP request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the parameters to fetch any additional data needed to construct a view model
    and pass it to the appropriate view for the client. For example, if the client
    is a web browser, then a view that renders HTML would be most appropriate. Other
    clients might prefer alternative renderings, like document formats such as a PDF
    file or an Excel file, or data formats, like JSON or XML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the results from the view to the client as an HTTP response with an appropriate
    status code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s review the controller used to generate the home, privacy, and error
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `Controllers` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file named `HomeController.cs`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note, as shown in the following code, that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extra namespaces are imported, which I have added comments for to show which
    types they are needed for.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A private read-only field is declared to store a reference to a logger for the
    `HomeController` that is set in a constructor.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All three action methods call a method named `View` and return the results as
    an `IActionResult` interface to the client.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Error` action method passes a view model into its view with a request
    ID used for tracing. The error response will not be cached:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the visitor navigates to a path of `/` or `/Home`, then it is the equivalent
    of `/Home/Index` because those were the default names for controller and action
    in the default route.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the view search path convention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Index` and `Privacy` methods are identical in implementation, yet they
    return different web pages. This is because of **conventions**. The call to the
    `View` method looks in different paths for the Razor file to generate the web
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s deliberately break one of the page names so that we can see the paths
    searched by default:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Mvc` project, expand the `Views` folder and then the `Home`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `Privacy.cshtml` file to `Privacy2.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome, navigate to `https://localhost:5001/`, click **Privacy**, and
    note the paths that are searched for a view to render the web page (including
    in `Shared` folders for MVC views and Razor Pages), as shown in *Figure 15.3*:![](img/B17442_16_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.3: An exception showing the default search path for views'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `Privacy2.cshtml` file back to `Privacy.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You have now seen the view search path convention, as shown in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specific Razor view: `/Views/{controller}/{action}.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shared Razor view: `/Views/Shared/{action}.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shared Razor Page: `/Pages/Shared/{action}.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have just seen that some errors are caught and written to the console. You
    can write messages to the console in the same way by using the logger.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Controllers` folder, in `HomeController.cs`, in the `Index` method,
    add statements to use the logger to write some messages of various levels to the
    console, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start a web browser and navigate to the home page for the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, note the messages, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you need to add some functionality to multiple controllers and actions,
    you can use or define your own filters that are implemented as an attribute class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filters can be applied at the following levels:'
  prefs: []
  type: TYPE_NORMAL
- en: At the action level by decorating an action method with the attribute. This
    will only affect the one action method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the controller level by decorating the controller class with the attribute.
    This will affect all methods of the controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the global level by adding the attribute type to the `Filters` collection
    of the `MvcOptions` instance that can be used to configure MVC when calling the
    `AddControllersWithViews` method, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a filter to secure an action method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might want to ensure that one particular action method of a controller
    class can only be called by members of certain security roles. You do this by
    decorating the method with the `[Authorize]` attribute, as described in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[Authorize]`: Only allow authenticated (non-anonymous, logged-in) visitors
    to access this action method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Authorize(Roles = "Sales,Marketing")]`: Only allow visitors who are members
    of the specified role(s) to access this action method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: In `HomeController.cs`, import the `Microsoft.AspNetCore.Authorization` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an attribute to the `Privacy` method to only allow access to logged-in
    users who are members of a group/role named `Administrators`, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Privacy** and note that you are redirected to the log in page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your email and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Log in** and note that you are denied access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling role management and creating a role programmatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, role management is not enabled in an ASP.NET Core MVC project,
    so we must first enable it before creating roles, and then we will create a controller
    that will programmatically create an `Administrators` role (if it does not already
    exist) and assign a test user to that role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, in the setup of ASP.NET Core Identity and its database, add
    a call to `AddRoles` to enable role management, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Controllers`, add an empty controller class named `RolesController.cs`
    and modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Two fields for the name of the role and email of the user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor gets and stores the registered user and role manager dependency
    services.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `Administrators` role does not exist, we use the role manager to create
    it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We try to find a test user by its email, create it if it does not exist, and
    then assign the user to the `Administrators` role.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the website uses DOI, we must generate an email confirmation token and
    use it to confirm the new users email address.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Success messages and any errors are written out to the console.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You will be automatically redirected to the home page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Privacy** and note that you are redirected to the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your email and password. (I used `mark@example.com`.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Log in** and note that you are denied access as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Home**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the address bar, manually enter `roles` as a relative URL path, as shown
    in the following link: `https://localhost:5001/roles`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the success messages written to the console, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Logout**, because you must log out and log back in to load your role
    memberships when they are created after you have already logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try accessing the **Privacy** page again, enter the email for the new user that
    was programmatically created, for example, `test@example.com`, and their password,
    and then click **Log in**, and you should now have access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a filter to cache a response
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To improve response times and scalability, you might want to cache the HTTP
    response that is generated by an action method by decorating the method with the
    `[ResponseCache]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'You control where the response is cached and for how long by setting parameters,
    as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Duration`: In seconds. This sets the `max-age` HTTP response header measured
    in seconds. Common choices are one hour (3600 seconds) and one day (86400 seconds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Location`: One of the `ResponseCacheLocation` values, `Any`, `Client`, or
    `None`. This sets the `cache-control` HTTP response header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoStore`: If `true`, this ignores `Duration` and `Location` and sets the cache-control
    HTTP response header to `no-store`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController.cs`, add an attribute to the `Index` method to cache the
    response for 10 seconds on the browser or any proxies between the server and browser,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Views`, in `Home`, open `Index.cshtml`, and add a paragraph to output the
    current time in long format to include seconds, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the time on the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Register**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Home** and note the time on the home page is the same because a cached
    version of the page is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Register**. Wait at least ten seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Home** and note the time has now updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Log in**, enter your email and password, and then click **Log in**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the time on the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Privacy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Home** and note the page is not cached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the console and note the warning message explaining that your caching
    has been overridden because the visitor is logged in and, in this scenario, ASP.NET
    Core uses anti-forgery tokens and they should not be cached, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a filter to define a custom route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might want to define a simplified route for an action method instead of
    using the default route.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to show the privacy page currently requires the following URL
    path, which specifies both the controller and action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We could make the route simpler, as shown in the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController.cs`, add an attribute to the `Privacy` method to define
    a simplified route, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the address bar, enter the following URL path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter your email and password, click **Log in**, and note that the simplified
    path shows the **Privacy** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding entity and view models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In MVC, the M stands for *model*. Models represent the data required to respond
    to a request. There are two types of models commonly used: entity models and view
    models.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Entity models** represent entities in a database like SQL Server or SQLite.
    Based on the request, one or more entities might need to be retrieved from data
    storage. Entity models are defined using classes since they might need to change
    and then be used to update the underlying data store.'
  prefs: []
  type: TYPE_NORMAL
- en: All the data that we want to show in response to a request is the **MVC model**,
    sometimes called a **view model**, because it is a model that is passed into a
    view for rendering into a response format like HTML or JSON. View models should
    be immutable, so they are commonly defined using records.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following HTTP `GET` request might mean that the browser is
    asking for the product details page for product number 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.example.com/products/details/3](http://www.example.com/products/details/3)'
  prefs: []
  type: TYPE_NORMAL
- en: The controller would need to use the ID route value 3 to retrieve the entity
    for that product and pass it to a view that can then turn the model into HTML
    for display in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that when a user comes to our website, we want to show them a carousel
    of categories, a list of products, and a count of the number of visitors we have
    had this month.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will reference the Entity Framework Core entity data model for the Northwind
    database that you created in *Chapter 13*, *Introducing Practical Applications
    of C# and .NET*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, add a project reference to `Northwind.Common.DataContext`
    for either SQLite or SQL Server, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Mvc` project to compile its dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using SQL Server, or might want to switch between SQL Server and
    SQLite, then in `appsettings.json`, add a connection string for the Northwind
    database using SQL Server, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace to work with your entity model types,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before the `builder.Build` method call, add statements to load the appropriate
    connection string and then to register the `Northwind` database context, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a class file to the `Models` folder and name it `HomeIndexViewModel.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Although the `ErrorViewModel` class created by the MVC project
    template does not follow this convention, I recommend that you use the naming
    convention `{Controller}{Action}ViewModel` for your view model classes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the statements to define a record that has three properties for a count
    of the number of visitors, and lists of categories and products, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController.cs`, import the `Packt.Shared` namespace, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a field to store a reference to a `Northwind` instance, and initialize
    it in the constructor, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ASP.NET Core will use constructor parameter injection to pass an instance of
    the `NorthwindContext` database context using the connection string you specified
    in `Program.cs`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the statements in the `Index` action method to create an instance of
    the view model for this method, simulating a visitor count using the `Random`
    class to generate a number between 1 and 1000, and using the `Northwind` database
    to get lists of categories and products, and then pass the model to the view,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember the view search convention: when the `View` method is called in a
    controller''s action method, ASP.NET Core MVC looks in the `Views` folder for
    a subfolder with the same name as the current controller, that is, `Home`. It
    then looks for a file with the same name as the current action, that is, `Index.cshtml`.
    It will also search for views that match the action method name in the `Shared`
    folder and for Razor Pages in the `Pages` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In MVC, the V stands for *view*. The responsibility of a view is to transform
    a model into HTML or other formats.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple **view engines** that could be used to do this. The default
    view engine is called **Razor**, and it uses the `@` symbol to indicate server-side
    code execution. The Razor Pages feature introduced with ASP.NET Core 2.0 uses
    the same view engine and so can use the same Razor syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the home page view to render the lists of categories and products:'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `Views` folder, and then expand the `Home` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Index.cshtml` file and note the block of C# code wrapped in `@{ }`.
    This will execute first and can be used to store data that needs to be passed
    into a shared layout file like the title of the web page, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the static HTML content in the `<div>` element that uses Bootstrap for
    styling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: As well as defining your own styles, base your styles on
    a common library, such as Bootstrap, that implements responsive design.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just as with Razor Pages, there is a file named `_ViewStart.cshtml` that gets
    executed by the `View` method. It is used to set defaults that apply to all views.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, it sets the `Layout` property of all views to a shared layout
    file, as shown in the following markup:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views` folder, open the `_ViewImports.cshtml` file and note that it
    imports some namespaces and then adds the ASP.NET Core tag helpers, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Shared` folder, open the `_Layout.cshtml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the title is being read from the `ViewData` dictionary that was set
    earlier in the `Index.cshtml` view, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the rendering of links to support Bootstrap and a site stylesheet, where
    `~` means the `wwwroot` folder, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the rendering of a navigation bar in the header, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the rendering of a collapsible `<div>` containing a partial view for logging
    in and hyperlinks to allow users to navigate between pages using ASP.NET Core
    tag helpers with attributes like `asp-controller` and `asp-action`, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<a>` elements use tag helper attributes named `asp-controller` and `asp-action`
    to specify the controller name and action name that will execute when the link
    is clicked on. If you want to navigate to a feature in a Razor Class Library,
    like the `employees` component that you created in the previous chapter, then
    you use `asp-area` to specify the feature name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the rendering of the body inside the `<main>` element, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `RenderBody` method injects the contents of a specific Razor view for a
    page like the `Index.cshtml` file at that point in the shared layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the rendering of `<script>` elements at the bottom of the page so that
    it does not slow down the display of the page and that you can add your own script
    blocks into an optional defined section named `scripts`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When `asp-append-version` is specified with a `true` value in any element like
    `<img>` or `<script>` along with a `src` attribute, the Image Tag Helper is invoked
    (this helper is poorly named because it does not only affect images!).
  prefs: []
  type: TYPE_NORMAL
- en: 'It works by automatically appending a query string value named `v` that is
    generated from a hash of the referenced source file, as shown in the following
    example generated output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: If even a single byte within the `site.js` file changes, then its hash value
    will be different, and therefore if a browser or CDN is caching the script file,
    then it will bust the cached copy and replace it with the new version.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing an ASP.NET Core MVC website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've reviewed the structure of a basic MVC website, you will customize
    and extend it. You have already registered an EF Core model for the `Northwind`
    database, so the next task is to output some of that data on the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a custom style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The home page will show a list of the 77 products in the Northwind database.
    To make efficient use of space, we want to show the list in three columns. To
    do this, we need to customize the stylesheet for the website:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `wwwroot\css` folder, open the `site.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the file, add a new style that will apply to an element with
    the `product-columns` ID, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting up the category images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Northwind database includes a table of eight categories, but they do not
    have images, and websites look better with some colorful pictures:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `wwwroot` folder, create a folder named `images`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `images` folder, add eight image files named `category1.jpeg`, `category2.jpeg`,
    and so on, up to `category8.jpeg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can download images from the GitHub repository for this book at the following
    link: [https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories](https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Razor syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we customize the home page view, let''s review an example Razor file
    that has an initial Razor code block that instantiates an order with price and
    quantity and then outputs information about the order on the web page, as shown
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Razor file would result in the following incorrect output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Although Razor markup can include the value of any single property using the
    `@object.property` syntax, you should wrap expressions in parentheses, as shown
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Razor expression results in the following correct output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Defining a typed view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To improve the IntelliSense when writing a view, you can define what type the
    view can expect using an `@model` directive at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Views\Home` folder, open `Index.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the file, add a statement to set the model type to use the `HomeIndexViewModel`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, whenever we type `Model` in this view, your code editor will know the correct
    type for the model and will provide IntelliSense for it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While entering code in a view, remember the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Declare the type for the model, use `@model` (with a lowercase m).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the instance of the model, use `@Model` (with an uppercase M).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's continue customizing the view for the home page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the initial Razor code block, add a statement to declare a `string` variable
    for the current item and under the existing `<div>` element add new markup to
    output categories in a carousel and products as an unordered list, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding Razor markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to mix static HTML elements such as `<ul>` and `<li>` with C# code
    to output the carousel of categories and the list of product names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<div>` element with the `id` attribute of `product-columns` will use the
    custom style that we defined earlier, so all of the content in that element will
    display in three columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<img>` element for each category uses parentheses around a Razor expression
    to ensure that the compiler does not include the `.jpeg` as part of the expression,
    as shown in the following markup: `"~/images/category@(Model.Categories[c].CategoryID).jpeg"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<a>` elements for the product links use tag helpers to generate URL paths.
    Clicks on these hyperlinks will be handled by the `HomeController` and its `ProductDetail`
    action method. This action method does not exist yet, but you will add it later
    in this chapter. The ID of the product is passed as a route segment named `id`,
    as shown in the following URL path for Ipoh Coffee: `https://localhost:5001/Home/ProductDetail/43`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the customized home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see the result of our customized home page:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the home page has a rotating carousel showing categories, a random number
    of visitors, and a list of products in three columns, as shown in *Figure 15.4*:![](img/B17442_16_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.4: The updated Northwind MVC website home page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For now, clicking on any of the categories or product links gives **404 Not
    Found** errors, so let's see how we can implement pages that use the passed parameters
    to see the details of a product or category.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing parameters using a route value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One way to pass a simple parameter is to use the `id` segment defined in the
    default route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `HomeController` class, add an action method named `ProductDetail`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This method uses a feature of ASP.NET Core called **model binding** to automatically
    match the `id` passed in the route to the parameter named `id` in the method.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the method, we check to see whether `id` does not have a value, and if
    so, we call the `BadRequest` method to return a `400` status code with a custom
    message explaining the correct URL path format.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, we can connect to the database and try to retrieve a product using
    the `id` value.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If we find a product, we pass it to a view; otherwise, we call the `NotFound`
    method to return a `404` status code and a custom message explaining that a product
    with that ID was not found in the database.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `Views/Home` folder, add a new file named `ProductDetail.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the home page appears with the list of products, click on one of them,
    for example, the second product, **Chang**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the URL path in the browser's address bar, the page title shown in the
    browser tab, and the product details page, as shown in *Figure 15.5*:![](img/B17442_16_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.5: The product detail page for Chang'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: View **Developer tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the URL in the address box of Chrome to request a product ID that does
    not exist, like 99, and note the 404 Not Found status code and custom error response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding model binders in more detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Model binders are powerful, and the default one does a lot for you. After the
    default route identifies a controller class to instantiate and an action method
    to call, if that method has parameters, then those parameters need to have values
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Model binders do this by looking for parameter values passed in the HTTP request
    as any of the following types of parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Route parameter**, like `id` as we did in the previous section, as shown
    in the following URL path: `/Home/ProductDetail/2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query string parameter**, as shown in the following URL path: `/Home/ProductDetail?id=2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form parameter**, as shown in the following markup:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Model binders can populate almost any type:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple types, like `int`, `string`, `DateTime`, and `bool`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex types defined by `class`, `record`, or `struct`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection types, like arrays and lists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create a somewhat artificial example to illustrate what can be achieved
    using the default model binder:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Models` folder, add a new file named `Thing.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to define a class with two properties for a nullable integer
    named `Id` and a `string` named `Color`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController`, add two new action methods, one to show a page with a
    form and one to display a thing with a parameter using your new model type, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Views\Home` folder, add a new file named `ModelBinding.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Views/Home`, open `Index.cshtml`, and in the first `<div>`, add a new paragraph
    with a link to the model binding page, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the unhandled exception about an ambiguous match, as shown in *Figure 15.6*:![](img/B17442_16_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.6: An unhandled ambiguous action method mismatch exception'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disambiguating action methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the C# compiler can differentiate between the two methods by noting
    that the signatures are different, from the routing of an HTTP request's point
    of view, both methods are potential matches. We need an HTTP-specific way to disambiguate
    the action methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could do this by creating different names for the actions or by specifying
    that one method should be used for a specific HTTP verb, like `GET`, `POST`, or
    `DELETE`. That is how we will solve the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController`, decorate the second `ModelBinding` action method to indicate
    that it should be used for processing HTTP `POST` requests, that is, when a form
    is submitted, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The other `ModelBinding` action method will implicitly be used for all other
    types of HTTP request, like `GET`, `PUT`, `DELETE`, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the value for the `Id` property is set
    from the query string parameter and the value for the color property is set from
    the form parameter, as shown in *Figure 15.7*:![](img/B17442_16_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.7: The Model Binding Demo page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing a route parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will set the property using a route parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the action for the form to pass the value `2` as a route parameter,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the value for the `Id` property is set
    from the route parameter and the value for the `Color` property is set from the
    form parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing a form parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will set the property using a form parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the action for the form to pass the value 1 as a form parameter, as
    shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the values for the `Id` and `Color` properties
    are both set from the form parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: If you have multiple parameters with the same name, then
    remember that form parameters have the highest priority and query string parameters
    have the lowest priority for automatic model binding.'
  prefs: []
  type: TYPE_NORMAL
- en: Validating the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of model binding can cause errors, for example, data type conversions
    or validation errors if the model has been decorated with validation rules. What
    data has been bound and any binding or validation errors are stored in `ControllerBase.ModelState`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore what we can do with model state by applying some validation
    rules to the bound model and then showing invalid data messages in the view:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Models` folder, open `Thing.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `System.ComponentModel.DataAnnotations` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Decorate the `Id` property with a validation attribute to limit the range of
    allowed numbers to 1 to 10, and one to ensure that the visitor supplies a color,
    and add a new `Email` property with a regular expression for validation, as shown
    highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Models` folder, add a new file named `HomeModelBindingViewModel.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a record with properties to store the bound model,
    a flag to indicate that there are errors, and a sequence of error messages, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController`, in the `ModelBinding` method that handles HTTP `POST`,
    comment out the previous statement that passed the thing to the view, and instead
    add statements to create an instance of the view model. Validate the model and
    store an array of error messages, and then pass the view model to the view, as
    shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Views\Home`, open `ModelBinding.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the model type declaration to use the view model class, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `<div>` to show any model validation errors, and change the output of
    the thing''s properties because the view model has changed, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note that `1`, `Red`, and `test@example.com`
    are valid values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an `Id` of `13`, clear the color textbox, delete the `@` from the email
    address, click the **Submit** button, and note the error messages, as shown in
    *Figure 15.8*:![](img/B17442_16_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.8: The Model Binding Demo page with field validations'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: What regular expression does Microsoft use for the implementation
    of the `EmailAddress` validation attribute? Find out at the following link: [https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54](https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding view helper methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While creating a view for ASP.NET Core MVC, you can use the `Html` object and
    its methods to generate markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful methods include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActionLink`: Use this to generate an anchor `<a>` element that contains a
    URL path to the specified controller and action. For example, `Html.ActionLink(linkText:
    "Binding", actionName: "ModelBinding", controllerName: "Home")` would generate
    `<a href="/home/modelbinding">Binding</a>`. You can achieve the same result using
    the anchor tag helper: `<a asp-action="ModelBinding" asp-controller="Home">Binding</a>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AntiForgeryToken`: Use this inside a `<form>` to insert a `<hidden>` element
    containing an anti-forgery token that will be validated when the form is submitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Display` and `DisplayFor`: Use this to generate HTML markup for the expression
    relative to the current model using a display template. There are built-in display
    templates for .NET types and custom templates can be created in the `DisplayTemplates`
    folder. The folder name is case-sensitive on case-sensitive filesystems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Editor` and `EditorFor`: Use this to generate HTML markup for the expression
    relative to the current model using an editor template. There are built-in editor
    templates for .NET types that use `<label>` and `<input>` elements, and custom
    templates can be created in the `EditorTemplates` folder. The folder name is case-sensitive
    on case-sensitive filesystems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditorForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Encode`: Use this to safely encode an object or string into HTML. For example,
    the string value `"<script>"` would be encoded as `"&lt;script&gt;"`. This is
    not normally necessary since the Razor `@` symbol encodes string values by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Raw`: Use this to render a string value *without* encoding as HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PartialAsync` and `RenderPartialAsync`: Use these to generate HTML markup
    for a partial view. You can optionally pass a model and view data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: In `Views/Home`, open `ModelBinding.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the rendering of the `Email` property to use `DisplayFor`, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the email address is a clickable hyperlink instead of just text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Models/Thing.cs`, comment out the `[EmailAddress]` attribute above the `Email`
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Binding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the email address is just text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Models/Thing.cs`, uncomment the `[EmailAddress]` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the combination of decorating the `Email` property with the `[EmailAddress]`
    validation attribute and rendering it using `DisplayFor` that notifies ASP.NET
    Core to treat the value as an email address and therefore render it as a clickable
    link.
  prefs: []
  type: TYPE_NORMAL
- en: Querying a database and using display templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a new action method that can have a query string parameter passed
    to it and use that to query the Northwind database for products that cost more
    than a specified price.
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous examples, we defined a view model that contained properties for
    every value that needed to be rendered in the view. In this example, there will
    be two values: a list of products and the price the visitor entered. To avoid
    having to define a class or record for the view model, we will pass the list of
    products as the model and store the maximum price in the `ViewData` collection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: In `HomeController`, import the `Microsoft.EntityFrameworkCore` namespace. We
    need this to add the `Include` extension method so that we can include related
    entities, as you learned in *Chapter 10*, *Working with Data Using Entity Framework
    Core*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new action method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Views/Home` folder, add a new file named `ProductsThatCostMoreThan.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Views/Home` folder, open `Index.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following form element below the visitor count and above the **Products**
    heading and its listing of products. This will provide a form for the user to
    enter a price. The user can then click **Submit** to call the action method that
    shows only products that cost more than the entered price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, enter a price in the form, for example, `50`, and then click
    on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the table of the products that cost more than the price that you entered,
    as shown in *Figure 15.9*:![](img/B17442_16_09.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.9: A filtered list of products that cost more than £50'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improving scalability using asynchronous tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building a desktop or mobile app, multiple tasks (and their underlying
    threads) can be used to improve responsiveness, because while one thread is busy
    with the task, another can handle interactions with the user.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks and their threads can be useful on the server side too, especially with
    websites that work with files, or request data from a store or a web service that
    could take a while to respond. But they are detrimental to complex calculations
    that are CPU-bound, so leave these to be processed synchronously as normal.
  prefs: []
  type: TYPE_NORMAL
- en: When an HTTP request arrives at the web server, a thread from its pool is allocated
    to handle the request. But if that thread must wait for a resource, then it is
    blocked from handling any more incoming requests. If a website receives more simultaneous
    requests than it has threads in its pool, then some of those requests will respond
    with a server timeout error, **503 Service Unavailable**.
  prefs: []
  type: TYPE_NORMAL
- en: The threads that are locked are not doing useful work. They *could* handle one
    of those other requests but only if we implement asynchronous code in our websites.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a thread is waiting for a resource it needs, it can return to the thread
    pool and handle a different incoming request, improving the scalability of the
    website, that is, increasing the number of simultaneous requests it can handle.
  prefs: []
  type: TYPE_NORMAL
- en: Why not just have a larger thread pool? In modern operating systems, every thread
    in the pool has a 1 MB stack. An asynchronous method uses a smaller amount of
    memory. It also removes the need to create new threads in the pool, which takes
    time. The rate at which new threads are added to the pool is typically one every
    two seconds, which is a loooooong time compared to switching between asynchronous
    threads.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Make your controller action methods asynchronous.'
  prefs: []
  type: TYPE_NORMAL
- en: Making controller action methods asynchronous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is easy to make an existing action method asynchronous:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `Index` action method to be asynchronous, to return a task, and
    to await the calls to asynchronous methods to get the categories and products,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `ProductDetail` action method in a similar way, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website and note that the functionality of the website is the same,
    but trust that it will now scale better.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What do the files with the special names `_ViewStart` and `_ViewImports` do
    when created in the `Views` folder?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the names of the three segments defined in the default ASP.NET Core
    MVC route, what do they represent, and which are optional?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the default model binder do, and what data types can it handle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a shared layout file like `_Layout.cshtml`, how do you output the content
    of the current view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a shared layout file like `_Layout.cshtml`, how do you output a section that
    the current view can supply content for, and how does the view supply the contents
    for that section?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When calling the `View` method inside a controller's action method, what paths
    are searched for the view by convention?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you instruct the visitor's browser to cache the response for 24 hours?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might you enable Razor Pages even if you are not creating any yourself?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does ASP.NET Core MVC identify classes that can act as controllers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what ways does ASP.NET Core MVC make it easier to test a website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 15.2 – Practice implementing MVC by implementing a category detail
    page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Northwind.Mvc` project has a home page that shows categories, but when
    the `View` button is clicked, the website returns a `404 Not Found` error, for
    example, for the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:5001/category/1`'
  prefs: []
  type: TYPE_NORMAL
- en: Extend the `Northwind.Mvc` project by adding the ability to show a detail page
    for a category.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.3 – Practice improving scalability by understanding and implementing
    async action methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few years ago, Stephen Cleary wrote an excellent article for MSDN Magazine
    explaining the scalability benefits of implementing async action methods for ASP.NET.
    The same principles apply to ASP.NET Core, but even more so, because unlike the
    old ASP.NET as described in the article, ASP.NET Core supports asynchronous filters
    and other components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the article at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/october/async-programming-introduction-to-async-await-on-asp-net](https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/october/async-programming-introduction-to-async-await-on-asp-net)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.4 – Practice unit testing MVC controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers are where the business logic of your website runs, so it is important
    to test the correctness of that logic using unit tests, as you learned in *Chapter
    4*, *Writing, Debugging, and Testing Functions*.
  prefs: []
  type: TYPE_NORMAL
- en: Write some unit tests for `HomeController`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: You can read more about how to unit test controllers at
    the following link: [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.5 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-15---building-websites-using-the-model-view-controller-pattern](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-15---building-websites-using-the-model-view-controller-pattern)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build large, complex websites in a way that
    is easy to unit test by registering and injecting dependency services like database
    contexts and loggers and is easier to manage with teams of programmers using ASP.NET
    Core MVC. You learned about configuration, authentication, routes, models, views,
    and controllers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build and consume services that use
    HTTP as the communication layer, aka web services.
  prefs: []
  type: TYPE_NORMAL
