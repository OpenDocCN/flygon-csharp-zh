- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Building Websites Using the Model-View-Controller Pattern
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型-视图-控制器模式构建网站
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using Microsoft ASP.NET Core MVC, including the startup configuration,
    authentication, authorization, routes, request and response pipeline, models,
    views, and controllers that make up an ASP.NET Core MVC project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍使用Microsoft ASP.NET Core MVC在服务器端构建具有现代HTTP架构的网站，包括启动配置、身份验证、授权、路由、请求和响应管道、模型、视图和构成ASP.NET
    Core MVC项目的控制器。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up an ASP.NET Core MVC website
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置ASP.NET Core MVC网站
- en: Exploring an ASP.NET Core MVC website
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索ASP.NET Core MVC网站
- en: Customizing an ASP.NET Core MVC website
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义ASP.NET Core MVC网站
- en: Querying a database and using display templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询数据库并使用显示模板
- en: Improving scalability using asynchronous tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用异步任务提高可扩展性
- en: Setting up an ASP.NET Core MVC website
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置ASP.NET Core MVC网站
- en: ASP.NET Core Razor Pages are great for simple websites. For more complex websites,
    it would be better to have a more formal structure to manage that complexity.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Razor Pages非常适合简单的网站。对于更复杂的网站，最好有一个更正式的结构来管理这种复杂性。
- en: 'This is where the **Model-View-Controller** (**MVC**) design pattern is useful.
    It uses technologies like Razor Pages, but allows a cleaner separation between
    technical concerns, as shown in the following list:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**模型-视图-控制器**（**MVC**）设计模式发挥作用的地方。它使用Razor Pages等技术，但允许技术关注点之间有更清晰的分离，如下所示：
- en: '**Models**: Classes that represent the data entities and view models used on
    the website.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：表示网站上使用的数据实体和视图模型的类。'
- en: '**Views**: Razor files, that is, `.cshtml` files, that render data in view
    models into HTML web pages. Blazor uses the `.razor` file extension, but do not
    confuse them with Razor files!'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：Razor文件，即`.cshtml`文件，将视图模型中的数据渲染成HTML网页。Blazor使用`.razor`文件扩展名，但不要将其与Razor文件混淆！'
- en: '**Controllers**: Classes that execute code when an HTTP request arrives at
    the web server. The controller methods usually create a view model that may contain
    entity models and passes it to a view to generate an HTTP response to send back
    to the web browser or other client.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：HTTP请求到达Web服务器时执行代码的类。控制器方法通常创建一个可能包含实体模型的视图模型，并将其传递给视图以生成HTTP响应，发回给Web浏览器或其他客户端。'
- en: The best way to understand using the MVC design pattern for web development
    is to see a working example.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解使用MVC设计模式进行Web开发的最佳方式是查看一个实际示例。
- en: Creating an ASP.NET Core MVC website
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET Core MVC网站
- en: You will use a project template to create an ASP.NET Core MVC website project
    that has a database for authenticating and authorizing users. Visual Studio 2022
    defaults to using SQL Server LocalDB for the accounts database. Visual Studio
    Code (or more accurately the `dotnet` tool) uses SQLite by default and you can
    specify a switch to use SQL Server LocalDB instead.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用项目模板创建一个具有用于身份验证和授权用户的数据库的ASP.NET Core MVC网站项目。Visual Studio 2022默认使用SQL
    Server LocalDB作为账户数据库。Visual Studio Code（或更准确地说，`dotnet`工具）默认使用SQLite，您可以通过指定开关改用SQL
    Server LocalDB。
- en: 'Let''s see it in action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的实际效果：
- en: 'Use your preferred code editor to add a MVC website project with authentication
    accounts stored in a database, as defined in the following list:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个具有存储在数据库中的身份验证账户的MVC网站项目，如下表所示：
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web App（模型-视图-控制器）** / `mvc`
- en: 'Language: C#'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 语言：C#
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Mvc`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Mvc`
- en: 'Options: **Authentication Type: Individual Accounts** / `--auth Individual`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选项：**身份验证类型：个人账户** / `--auth Individual`
- en: For Visual Studio, leave all other options as their defaults
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Visual Studio，将所有其他选项保留为其默认值
- en: In Visual Studio Code, select `Northwind.Mvc` as the active OmniSharp project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Northwind.Mvc`作为活动OmniSharp项目。
- en: Build the `Northwind.Mvc` project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Mvc`项目。
- en: 'At the command line or terminal, use the `help` switch to see other options
    for this project template, as shown in the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行或终端中，使用`help`开关查看此项目模板的其他选项，如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note the results, as shown in the following partial output:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意结果，如下所示的部分输出：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are many options, especially related to authentication, as shown in the
    following table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项，特别是与身份验证相关的选项，如下表所示：
- en: '| Switches | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 开关 | 描述 |'
- en: '| `-au&#124;--auth` | The type of authentication to use:`None` (default): This
    choice also allows you to disable HTTPS.`Individual`: Individual authentication
    that stores registered users and their passwords in a database (SQLite by default).
    We will use this in the project we create for this chapter.`IndividualB2C`: Individual
    authentication with Azure AD B2C.`SingleOrg`: Organizational authentication for
    a single tenant.`MultiOrg`: Organizational authentication for multiple tenants.`Windows`:
    Windows authentication. Mostly useful for intranets. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `-au&#124;--auth` | 使用的认证类型：`None`（默认）：此选择还允许你禁用HTTPS。`Individual`：个人认证，将注册用户及其密码存储在数据库中（默认使用SQLite）。我们将在本章创建的项目中使用此选项。`IndividualB2C`：使用Azure
    AD B2C的个人认证。`SingleOrg`：单租户的组织认证。`MultiOrg`：多租户的组织认证。`Windows`：Windows认证。主要用于内网。'
- en: '| `-uld&#124;--use-local-db` | Whether to use SQL Server LocalDB instead of
    SQLite. This option only applies if `--auth Individual` or `--auth IndividualB2C`
    is specified. The value is an optional `bool` with a default of `false`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `-uld&#124;--use-local-db` | 是否使用SQL Server LocalDB代替SQLite。此选项仅在指定`--auth
    Individual`或`--auth IndividualB2C`时适用。值是一个可选的`bool`，默认值为`false`。'
- en: '| `-rrc&#124;--razor-runtime-compilation` | Determines if the project is configured
    to use Razor runtime compilation in `Debug` builds. This can improve the performance
    of startup during debugging because it can defer the compilation of Razor views.
    The value is an optional `bool` with a default of `false`. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `-rrc&#124;--razor-runtime-compilation` | 确定项目是否配置为在`Debug`构建中使用Razor运行时编译。这可以提高调试时启动的性能，因为它可以延迟Razor视图的编译。值是一个可选的`bool`，默认值为`false`。'
- en: '| `-f&#124;--framework` | The target framework for the project. Values can
    be: `net6.0` (default), `net5.0`, or `netcoreapp3.1` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `-f&#124;--framework` | 项目的目标框架。值可以是：`net6.0`（默认）、`net5.0`或`netcoreapp3.1`
    |'
- en: Creating the authentication database for SQL Server LocalDB
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为SQL Server LocalDB创建认证数据库
- en: If you created the MVC project using Visual Studio 2022, or you used `dotnet
    new mvc` with the `-uld` or `--use-local-db` switch, then the database for authentication
    and authorization will be stored in SQL Server LocalDB. But the database does
    not yet exist. Let's create it now.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Visual Studio 2022创建了MVC项目，或者你使用`dotnet new mvc`并带有`-uld`或`--use-local-db`开关，那么用于认证和授权的数据库将存储在SQL
    Server LocalDB中。但该数据库尚未存在。现在让我们创建它。
- en: 'At a command prompt or terminal, in the `Northwind.Mvc` folder, enter the command
    to run database migrations so that the database used to store credentials for
    authentication is created, as shown in the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，在`Northwind.Mvc`文件夹下，输入运行数据库迁移的命令，以便创建用于存储认证凭据的数据库，如下所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you created the MVC project using `dotnet new`, then the database for authentication
    and authorization will be stored in SQLite and the file has already been created
    named `app.db`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`dotnet new`创建了MVC项目，那么用于认证和授权的数据库将存储在SQLite中，且已创建名为`app.db`的文件。
- en: The connection string for the authentication database is named `DefaultConnection`
    and it is stored in the `appsettings.json` file in the root folder for the MVC
    website project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 认证数据库的连接字符串名为`DefaultConnection`，它存储在MVC网站项目根目录下的`appsettings.json`文件中。
- en: 'For SQL Server LocalDB (with a truncated connection string), see the following
    markup:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL Server LocalDB（使用截断的连接字符串），请参见以下标记：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For SQLite, see the following markup:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLite，请参见以下标记：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exploring the default ASP.NET Core MVC website
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索默认的ASP.NET Core MVC网站
- en: 'Let''s review the behavior of the default ASP.NET Core MVC website project
    template:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下默认ASP.NET Core MVC网站项目模板的行为：
- en: 'In the `Northwind.Mvc` project, expand the `Properties` folder, open the `launchSettings.json`
    file, and note the random port numbers (yours will be different) configured for
    the project for `HTTPS` and `HTTP`, as shown in the following markup:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，展开`Properties`文件夹，打开`launchSettings.json`文件，并注意为项目配置的随机端口号（你的将不同），用于`HTTPS`和`HTTP`，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Change the port numbers to `5001` for `HTTPS` and `5000` for `HTTP`, as shown
    in the following markup:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将端口号更改为`5001`用于`HTTPS`，`5000`用于`HTTP`，如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the changes to the `launchSettings.json` file.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存对`launchSettings.json`文件的更改。
- en: Start the website.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Start Chrome and open **Developer Tools**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome并打开**开发者工具**。
- en: 'Navigate to `http://localhost:5000/` and note the following, as shown in *Figure
    15.1*:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`http://localhost:5000/`并注意以下内容，如图*15.1*所示：
- en: Requests for HTTP are automatically redirected to HTTPS on port `5001`.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP请求会自动重定向到端口`5001`上的HTTPS。
- en: The top navigation menu with links to **Home**, **Privacy**, **Register**, and
    **Login**. If the viewport width is 575 pixels or less, then the navigation collapses
    into a hamburger menu.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部导航菜单，包含**首页**、**隐私**、**注册**和**登录**的链接。如果视口宽度为575像素或更小，则导航会折叠成一个汉堡菜单。
- en: The title of the website, **Northwind.Mvc**, shown in the header and footer.![](img/B17442_16_01.png)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站标题**Northwind.Mvc**，显示在页眉和页脚中。![](img/B17442_16_01.png)
- en: 'Figure 15.1: The ASP.NET Core MVC project template website home page'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：ASP.NET Core MVC项目模板网站首页
- en: Understanding visitor registration
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解访问者注册
- en: By default, passwords must have at least one non-alphanumeric character, they
    must have at least one digit (0-9), and they must have at least one uppercase
    letter (A-Z). I use `Pa$$w0rd` in scenarios like this when I am just exploring.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，密码必须至少包含一个非字母数字字符，至少包含一个数字（0-9），以及至少包含一个大写字母（A-Z）。在这种探索场景中，我使用`Pa$$w0rd`。
- en: The MVC project template follows best practice for **double-opt-in** (**DOI**),
    meaning that after filling in an email and password to register, an email is sent
    to the email address, and the visitor must click a link in that email to confirm
    that they want to register.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MVC项目模板遵循**双重选择加入**（**DOI**）的最佳实践，这意味着在填写电子邮件和密码进行注册后，会向该电子邮件地址发送一封电子邮件，访问者必须点击该电子邮件中的链接以确认他们想要注册。
- en: 'We have not yet configured an email provider to send that email, so we must
    simulate that step:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未配置电子邮件提供商来发送该电子邮件，因此我们必须模拟这一步骤：
- en: In the top navigation menu, click **Register**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部导航菜单中，点击**注册**。
- en: Enter an email and password, and then click the **Register** button. (I used
    `test@example.com` and `Pa$$w0rd`.)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入电子邮件和密码，然后点击**注册**按钮。（我使用了`test@example.com`和`Pa$$w0rd`。）
- en: Click the link with the text **Click here to confirm your account** and note
    that you are redirected to a **Confirm email** web page that you could customize.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文本为**点击此处确认您的账户**的链接，并注意您将被重定向到一个可以自定义的**确认电子邮件**网页。
- en: In the top navigation menu, click **Login**, enter your email and password (note
    that there is an optional checkbox to remember you, and there are links if the
    visitor has forgotten their password or they want to register as a new visitor),
    and then click the **Log in** button.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部导航菜单中，点击**登录**，输入您的电子邮件和密码（注意有一个可选的复选框用于记住您，以及如果访问者忘记密码或想要注册为新访问者时的链接），然后点击**登录**按钮。
- en: Click your email address in the top navigation menu. This will navigate to an
    account management page. Note that you can set a phone number, change your email
    address, change your password, enable two-factor authentication (if you add an
    authenticator app), and download and delete your personal data.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部导航菜单中点击您的电子邮件地址。这将导航到账户管理页面。请注意，您可以设置电话号码，更改您的电子邮件地址，更改您的密码，启用两因素认证（如果您添加了认证器应用），以及下载和删除您的个人数据。
- en: Close Chrome and shut down the web server.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭网络服务器。
- en: Reviewing an MVC website project structure
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查MVC网站项目结构
- en: 'In your code editor, in Visual Studio **Solution Explorer** (toggle on **Show
    All Files**) or in Visual Studio Code **EXPLORER**, review the structure of an
    MVC website project, as shown in *Figure 15.2*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中，在Visual Studio **解决方案资源管理器**（切换显示**所有文件**）或在Visual Studio Code **资源管理器**中，审查MVC网站项目的结构，如图15.2所示：
- en: '![](img/B17442_16_02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17442_16_02.png)'
- en: 'Figure 15.2: The default folder structure of an ASP.NET Core MVC project'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：ASP.NET Core MVC项目的默认文件夹结构
- en: 'We will look in more detail at some of these parts later, but for now, note
    the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将对其中一些部分进行更详细的探讨，但目前请注意以下几点：
- en: '`Areas`: This folder contains nested folders and a file needed to integrate
    your website project with **ASP.NET Core Identity**, which is used for authentication.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`区域`：此文件夹包含用于将您的网站项目与**ASP.NET Core Identity**（用于身份验证）集成的嵌套文件夹和文件。'
- en: '`bin`, `obj`: These folders contain temporary files needed during the build
    process and the compiled assemblies for the project.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`、`obj`：这些文件夹包含构建过程中所需的临时文件和项目的已编译程序集。'
- en: '`Controllers`: This folder contains C# classes that have methods (known as
    actions) that fetch a model and pass it to a view, for example, `HomeController.cs`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制器`：此文件夹包含具有方法（称为动作）的C#类，这些方法获取模型并将其传递给视图，例如，`HomeController.cs`。'
- en: '`Data`: This folder contains Entity Framework Core migration classes used by
    the ASP.NET Core Identity system to provide data storage for authentication and
    authorization, for example, `ApplicationDbContext.cs`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data`：此文件夹包含Entity Framework Core迁移类，这些类由ASP.NET Core Identity系统用于提供身份验证和授权的数据存储，例如`ApplicationDbContext.cs`。'
- en: '`Models`: This folder contains C# classes that represent all of the data gathered
    together by a controller and passed to a view, for example, `ErrorViewModel.cs`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models`：此文件夹包含表示由控制器收集并传递给视图的所有数据的C#类，例如`ErrorViewModel.cs`。'
- en: '`Properties`: This folder contains a configuration file for IIS or IIS Express
    on Windows and for launching the website during development named `launchSettings.json`.
    This file is only used on the local development machine and is not deployed to
    your production website.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties`：此文件夹包含Windows上IIS或IIS Express的配置文件，以及在开发期间启动网站的名为`launchSettings.json`的文件。此文件仅用于本地开发机器，不会部署到生产网站。'
- en: '`Views`: This folder contains the `.cshtml` Razor files that combine HTML and
    C# code to dynamically generate HTML responses. The `_ViewStart` file sets the
    default layout and `_ViewImports` imports common namespaces used in all views
    like tag helpers:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views`：此文件夹包含结合HTML和C#代码以动态生成HTML响应的`.cshtml` Razor文件。`_ViewStart`文件设置默认布局，`_ViewImports`导入所有视图中使用的公共命名空间，如标签助手：'
- en: '`Home`: This subfolder contains Razor files for the home and privacy pages.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Home`：此子文件夹包含主页和隐私页面的Razor文件。'
- en: '`Shared`: This subfolder contains Razor files for the shared layout, an error
    page, and two partial views for logging in and validation scripts.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shared`：此子文件夹包含用于共享布局、错误页面以及登录和验证脚本的两个部分视图的Razor文件。'
- en: '`wwwroot`: This folder contains static content used by the website, such as
    CSS for styling, libraries of JavaScript, JavaScript for this website project,
    and a `favicon.ico` file. You also put images and other static file resources
    like PDF documents in here. The project template includes Bootstrap and jQuery
    libraries.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wwwroot`：此文件夹包含网站使用的静态内容，如用于样式的CSS、JavaScript库、此网站项目的JavaScript以及`favicon.ico`文件。您还可以在此处放置图像和其他静态文件资源，如PDF文档。项目模板包括Bootstrap和jQuery库。'
- en: '`app.db`: This is the SQLite database that stores registered visitors. (If
    you used SQL Server LocalDB, then it will not be needed.)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.db`：这是存储注册访问者的SQLite数据库。（如果您使用SQL Server LocalDB，则不需要它。）'
- en: '`appsettings.json` and `appsettings.Development.json`: These files contain
    settings that your website can load at runtime, for example, the database connection
    string for the ASP.NET Core Identity system and logging levels.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appsettings.json` 和 `appsettings.Development.json`：这些文件包含网站运行时可加载的设置，例如ASP.NET
    Core Identity系统的数据库连接字符串和日志级别。'
- en: '`Northwind.Mvc.csproj`: This file contains project settings like the use of
    the Web .NET SDK, an entry for SQLite to ensure that the `app.db` file is copied
    to the website''s output folder, and a list of NuGet packages that your project
    requires, including:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind.Mvc.csproj`：此文件包含项目设置，如使用Web .NET SDK、确保`app.db`文件被复制到网站输出目录的SQLite入口，以及项目所需的一列NuGet包，包括：'
- en: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
- en: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
- en: '`Microsoft.AspNetCore.Identity.UI`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Identity.UI`'
- en: '`Microsoft.EntityFrameworkCore.Sqlite` or `Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Sqlite` 或 `Microsoft.EntityFrameworkCore.SqlServer`'
- en: '`Microsoft.EntityFrameworkCore.Tools`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Tools`'
- en: '`Program.cs`: This file defines a hidden `Program` class that contains the
    `Main` entry point. It builds a pipeline for processing incoming HTTP requests
    and hosts the website using default options like configuring the Kestrel web server
    and loading `appsettings`. It adds and configures services that your website needs,
    for example, ASP.NET Core Identity for authentication, SQLite or SQL Server for
    identity data storage, and so on, and routes for your application.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program.cs`：此文件定义了一个隐藏的`Program`类，其中包含`Main`入口点。它构建了一个处理传入HTTP请求的管道，并使用默认选项（如配置Kestrel
    Web服务器和加载`appsettings`）托管网站。它添加并配置了网站所需的服务，例如用于身份验证的ASP.NET Core Identity、用于身份数据存储的SQLite或SQL
    Server等，以及应用程序的路由。'
- en: Reviewing the ASP.NET Core Identity database
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查ASP.NET Core Identity数据库
- en: 'Open `appsettings.json` to find the connection string used for the ASP.NET
    Core Identity database, as shown highlighted for SQL Server LocalDB in the following
    markup:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`appsettings.json`以找到用于ASP.NET Core Identity数据库的连接字符串，如下面的标记中突出显示的SQL Server
    LocalDB所示：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you used SQL Server LocalDB for the identity data store, then you can use
    **Server Explorer** to connect to the database. You can copy and paste the connection
    string from the `appsettings.json` file (but remove the second backslash between
    `(localdb)` and `mssqllocaldb`).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用SQL Server LocalDB作为身份数据存储，那么你可以使用**服务器资源管理器**连接到数据库。你可以从`appsettings.json`文件复制并粘贴连接字符串（但需移除`(localdb)`和`mssqllocaldb`之间的第二个反斜杠）。
- en: If you installed an SQLite tool such as SQLiteStudio, then you can open the
    SQLite `app.db` database file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了SQLite工具，如SQLiteStudio，那么你可以打开SQLite的`app.db`数据库文件。
- en: You can then see the tables that the ASP.NET Core Identity system uses to register
    users and roles, including the `AspNetUsers` table used to store the registered
    visitor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，你可以看到ASP.NET Core Identity系统用于注册用户和角色的表格，包括用于存储注册访问者的`AspNetUsers`表。
- en: '**Good Practice**: The ASP.NET Core MVC project template follows good practice
    by storing a hash of the password instead of the password itself, which you will
    learn more about in *Chapter 20*, *Protecting Your Data and Applications*.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：ASP.NET Core MVC项目模板通过存储密码的哈希值而不是密码本身来遵循最佳实践，你将在*第20章*，*保护你的数据和应用程序*中了解更多。'
- en: Exploring an ASP.NET Core MVC website
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索一个ASP.NET Core MVC网站
- en: Let's walk through the parts that make up a modern ASP.NET Core MVC website.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解构成现代ASP.NET Core MVC网站的各个部分。
- en: Understanding ASP.NET Core MVC initialization
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解ASP.NET Core MVC初始化
- en: 'Appropriately enough, we will start by exploring the MVC website''s default
    initialization and configuration:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 恰如其分地，我们将从探索MVC网站的默认初始化和配置开始：
- en: Open the `Program.cs` file and note that it uses the top-level program feature
    (so there is a hidden `Program` class with a `Main` method). This file can be
    considered to be divided into four important sections from top to bottom.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`文件，并注意到它使用了顶级程序特性（因此有一个隐藏的`Program`类和一个`Main`方法）。这个文件可以被视为从上到下分为四个重要部分。
- en: .NET 5 and earlier ASP.NET Core project templates used a `Startup` class to
    separate these parts into separate methods but with .NET 6, Microsoft encourages
    putting everything in a single `Program.cs` file.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .NET 5及更早版本的ASP.NET Core项目模板使用`Startup`类将这些部分分离到不同的方法中，但到了.NET 6，微软鼓励将所有内容放在一个`Program.cs`文件中。
- en: 'The first section imports some namespaces, as shown in the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一部分导入了一些命名空间，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Remember that by default, many other namespaces are imported using the implicit
    usings feature of .NET 6 and later. Build the project and then the globally imported
    namespaces can be found in the following path: `obj\Debug\net6.0\Northwind.Mvc.GlobalUsings.g.cs`.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，默认情况下，许多其他命名空间是通过.NET 6及更高版本的隐式使用功能导入的。构建项目后，全局导入的命名空间可以在以下路径找到：`obj\Debug\net6.0\Northwind.Mvc.GlobalUsings.g.cs`。
- en: 'The second section creates and configures a web host builder. It registers
    an application database context using SQL Server or SQLite with its database connection
    string loaded from the `appsettings.json` file for its data storage, adds ASP.NET
    Core Identity for authentication and configures it to use the application database,
    and adds support for MVC controllers with views, as shown in the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二部分创建并配置了一个Web主机构建器。它使用SQL Server或SQLite注册了一个应用程序数据库上下文，其数据库连接字符串从`appsettings.json`文件加载用于数据存储，添加了ASP.NET
    Core Identity用于身份验证，并配置它使用应用程序数据库，并添加了对带有视图的MVC控制器的支持，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `builder` object has two commonly used objects: `Configuration` and `Services`:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`构建器`对象有两个常用对象：`配置`和`服务`。'
- en: '`Configuration` contains merged values from all the places you could set configuration:
    `appsettings.json`, environment variables, command-line arguments, and so on'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`配置`包含了所有可能设置配置的地方的合并值：`appsettings.json`、环境变量、命令行参数等。'
- en: '`Services` is a collection of registered dependency services'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务`是一个注册依赖服务的集合'
- en: The call to `AddDbContext` is an example of registering a dependency service.
    ASP.NET Core implements the **dependency injection** (**DI**) design pattern so
    that other components like controllers can request needed services through their
    constructors. Developers register those services in this section of `Program.cs`
    (or if using a `Startup` class then in its `ConfigureServices` method.)
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用`AddDbContext`是注册依赖服务的一个示例。ASP.NET Core 实现了**依赖注入**(**DI**)设计模式，使得其他组件如控制器可以通过其构造函数请求所需服务。开发者在这一部分`Program.cs`（或使用`Startup`类时在其`ConfigureServices`方法中）注册这些服务。
- en: 'The third section configures the HTTP request pipeline. It configures a relative
    URL path to run database migrations if the website runs in development, or a friendlier
    error page and HSTS for production. HTTPS redirection, static files, routing,
    and ASP.NET Identity are enabled, and an MVC default route and Razor Pages are
    configured, as shown in the following code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三部分配置了HTTP请求管道。它配置了一个相对URL路径，在网站运行于开发环境时执行数据库迁移，或在生产环境中提供更友好的错误页面和HSTS。HTTPS重定向、静态文件、路由、ASP.NET
    Identity被启用，MVC默认路由和Razor页面被配置，如下所示：
- en: '[PRE10]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We learned about most of these methods and features in *Chapter 14*, *Building
    Websites Using ASP.NET Core Razor Pages*.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在*第14章*，*使用ASP.NET Core Razor Pages构建网站*中学习了这些方法和功能的大部分。
- en: '**Good Practice**: What does the extension method `UseMigrationsEndPoint` do?
    You could read the official documentation, but it does not help much. For example,
    it does not tell us what relative URL path it defines by default: [https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint).
    Luckily, ASP.NET Core is open source, so we can read the source code and discover
    what it does, at the following link: [https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18).
    Get into the habit of exploring the source code for ASP.NET Core to understand
    how it works.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最佳实践**：扩展方法`UseMigrationsEndPoint`的作用是什么？你可以阅读官方文档，但帮助不大。例如，它没有告诉我们默认定义了什么相对URL路径：[https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.migrationsendpointextensions.usemigrationsendpoint)。幸运的是，ASP.NET
    Core是开源的，因此我们可以阅读源代码并发现其作用，链接如下：[https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointOptions.cs#L18)。养成探索ASP.NET
    Core源代码的习惯，以理解其工作原理。'
- en: Apart from the `UseAuthentication` and `UseAuthorization` methods, the most
    important new method in this section of `Program.cs` is `MapControllerRoute`,
    which maps a default route for use by MVC. This route is very flexible because
    it will map to almost any incoming URL, as you will see in the next topic.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了`UseAuthentication`和`UseAuthorization`方法外，`Program.cs`这一部分最重要的方法是`MapControllerRoute`，它为MVC映射了一个默认路由。此路由非常灵活，因为它几乎可以映射到任何传入的URL，如下一主题所示。
- en: Although we will not create any Razor Pages in this chapter, we need to leave
    the method call that maps Razor Page support because our MVC website uses ASP.NET
    Core Identity for authentication and authorization, and it uses a Razor Class
    Library for its user interface components, like visitor registration and login.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管本章我们不会创建任何Razor页面，但我们仍需保留映射Razor页面支持的方法调用，因为我们的MVC网站使用ASP.NET Core Identity进行认证和授权，并使用Razor类库为其用户界面组件，如访客注册和登录。
- en: 'The fourth and final section has a thread-blocking method call that runs the
    website and waits for incoming HTTP requests to respond to, as shown in the following
    code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四个也是最后一个部分包含一个线程阻塞的方法调用，它运行网站并等待传入的HTTP请求以进行响应，如下所示：
- en: '[PRE11]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Understanding the default MVC route
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解MVC的默认路由
- en: The responsibility of a route is to discover the name of a controller class
    to instantiate and an action method to execute with an optional `id` parameter
    to pass into the method that will generate an HTTP response.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的职责是发现要实例化的控制器类名称和要执行的动作方法，以及一个可选的`id`参数，该参数将传递给生成HTTP响应的方法。
- en: 'A default route is configured for MVC, as shown in the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: MVC的默认路由配置如下所示：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The route pattern has parts in curly brackets `{}` called **segments**, and
    they are like named parameters of a method. The value of these segments can be
    any `string`. Segments in URLs are not case-sensitive.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 路由模式在花括号`{}`中的部分称为**段**，它们类似于方法的命名参数。这些段的值可以是任何`字符串`。URL中的段不区分大小写。
- en: The route pattern looks at any URL path requested by the browser and matches
    it to extract the name of a `controller`, the name of an `action`, and an optional
    `id` value (the `?` symbol makes it optional).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 路由模式查看浏览器请求的任何URL路径，并匹配它以提取`控制器`的名称、`动作`的名称和可选的`id`值（`?`符号使其可选）。
- en: If the user hasn't entered these names, it uses defaults of `Home` for the controller
    and `Index` for the action (the `=` assignment sets a default for a named segment).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未输入这些名称，它将使用默认值`Home`作为控制器，`Index`作为操作（`=`赋值为命名段设置默认值）。
- en: 'The following table contains example URLs and how the default route would work
    out the names of a controller and action:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下表包含示例URL以及默认路由如何确定控制器和动作的名称：
- en: '| URL | Controller | Action | ID |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| URL | 控制器 | 动作 | ID |'
- en: '| `/` | Home | Index |  |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `/` | Home | Index |  |'
- en: '| `/Muppet` | Muppet | Index |  |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `/Muppet` | Muppet | Index |  |'
- en: '| `/Muppet/Kermit` | Muppet | Kermit |  |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `/Muppet/Kermit` | Muppet | Kermit |  |'
- en: '| `/Muppet/Kermit/Green` | Muppet | Kermit | Green |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `/Muppet/Kermit/Green` | Muppet | Kermit | Green |'
- en: '| `/Products` | Products | Index |  |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `/Products` | Products | Index |  |'
- en: '| `/Products/Detail` | Products | Detail |  |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `/Products/Detail` | Products | Detail |  |'
- en: '| `/Products/Detail/3` | Products | Detail | 3 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `/Products/Detail/3` | Products | Detail | 3 |'
- en: Understanding controllers and actions
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解控制器和动作
- en: 'In MVC, the C stands for *controller*. From the route and an incoming URL,
    ASP.NET Core knows the name of the controller, so it will then look for a class
    that is decorated with the `[Controller]` attribute or derives from a class decorated
    with that attribute, for example, the Microsoft-provided class named `ControllerBase`,
    as shown in the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC中，C代表*控制器*。从路由和传入的URL，ASP.NET Core知道控制器的名称，因此它将查找一个类，该类装饰有`[Controller]`属性或派生自装饰有该属性的类，例如，Microsoft提供的名为`ControllerBase`的类，如下代码所示：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Understanding the ControllerBase class
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解ControllerBase类
- en: As you can see in the XML comment, `ControllerBase` does not support views.
    It is used for creating web services, as you will see in *Chapter 16*, *Building
    and Consuming Web Services*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如XML注释所示，`ControllerBase`不支持视图。它用于创建Web服务，正如您将在*第16章*，*构建和消费Web服务*中所见。
- en: '`ControllerBase` has many useful properties for working with the current HTTP
    context, as shown in the following table:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControllerBase`拥有许多有用的属性，用于处理当前HTTP上下文，如下表所示：'
- en: '| Property | Description |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| `Request` | Just the HTTP request. For example, headers, query string parameters,
    the body of the request as a stream that you can read from, the content type and
    length, and cookies. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `Request` | 仅HTTP请求。例如，头部、查询字符串参数、请求主体作为可读取的流、内容类型和长度，以及Cookie。 |'
- en: '| `Response` | Just the HTTP response. For example, headers, the body of the
    response as a stream that you can write to, the content type and length, status
    code, and cookies. There are also delegates like `OnStarting` and `OnCompleted`
    that you can hook a method up to. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `Response` | 仅HTTP响应。例如，头部、响应主体作为可写入的流、内容类型和长度、状态码和Cookie。还有像`OnStarting`和`OnCompleted`这样的委托，您可以将方法挂接到它们上。
    |'
- en: '| `HttpContext` | Everything about the current HTTP context including the request
    and response, information about the connection, a collection of features that
    have been enabled on the server with middleware, and a `User` object for authentication
    and authorization. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `HttpContext` | 当前HTTP上下文的所有信息，包括请求和响应、连接信息、服务器上通过中间件启用的功能集合，以及用于认证和授权的`用户`对象。
    |'
- en: Understanding the Controller class
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Controller类
- en: 'Microsoft provides another class named `Controller` that your classes can inherit
    from if they do need view support, as shown in the following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft提供了另一个名为`Controller`的类，如果您的类确实需要视图支持，它们可以从该类继承，如下代码所示：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Controller` has many useful properties for working with views, as shown in
    the following table:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Controller`拥有许多有用的属性，用于处理视图，如下表所示：'
- en: '| Property | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| `ViewData` | A dictionary that the controller can store key/value pairs in
    that is accessible in a view. The dictionary''s lifetime is only for the current
    request/response. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `ViewData` | 控制器可以在其中存储键/值对的字典，该字典在视图中可访问。该字典的生命周期仅限于当前请求/响应。 |'
- en: '| `ViewBag` | A dynamic object that wraps the `ViewData` to provide a friendlier
    syntax for setting and getting dictionary values. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `ViewBag` | 一个动态对象，它封装了`ViewData`，以提供更友好的语法来设置和获取字典值。 |'
- en: '| `TempData` | A dictionary that the controller can store key/value pairs in
    that is accessible in a view. The dictionary''s lifetime is for the current request/response
    and the next request/response for the same visitor session. This is useful for
    storing a value during an initial request, responding with a redirect, and then
    reading the stored value in the subsequent request. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `TempData` | 控制器可以在其中存储键/值对的字典，该字典在视图中可访问。该字典的生命周期为当前请求/响应以及同一访问者会话的下一个请求/响应。这对于在初始请求期间存储值、响应重定向并在后续请求中读取存储的值非常有用。
    |'
- en: '`Controller` has many useful methods for working with views, as shown in the
    following table:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`Controller` 有许多与视图工作相关的有用方法，如下表所示：'
- en: '| Property | Description |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| `View` | Returns a `ViewResult` after executing a view that renders a full
    response, for example, a dynamically generated web page. The view can be selected
    using a convention or be specified with a string name. A model can be passed to
    the view. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `视图` | 执行一个视图后返回`ViewResult`，该视图渲染完整的响应，例如，一个动态生成的网页。视图可以通过约定或指定字符串名称来选择。可以将模型传递给视图。
    |'
- en: '| `PartialView` | Returns a `PartialViewResult` after executing a view that
    is part of a full response, for example, a dynamically generated chunk of HTML.
    The view can be selected using a convention or be specified with a string name.
    A model can be passed to the view. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `PartialView` | 执行视图后返回`PartialViewResult`，该视图是完整响应的一部分，例如，动态生成的HTML块。视图可以通过约定或指定字符串名称来选择。可以将模型传递给视图。
    |'
- en: '| `ViewComponent` | Returns a `ViewComponentResult` after executing a component
    that dynamically generates HTML. The component must be selected by specifying
    its type or its name. An object can be passed as an argument. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `ViewComponent` | 执行组件后返回`ViewComponentResult`，该组件动态生成HTML。组件必须通过指定其类型或名称来选择。可以传递一个对象作为参数。
    |'
- en: '| `Json` | Returns a `JsonResult` containing a JSON-serialized object. This
    can be useful for implementing a simple Web API as part of an MVC controller that
    primarily returns HTML for a human to view. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `Json` | 返回包含JSON序列化对象的`JsonResult`。这对于实现MVC控制器的一部分简单Web API非常有用，该控制器主要返回供人类查看的HTML。
    |'
- en: Understanding the responsibilities of a controller
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解控制器的职责
- en: 'The responsibilities of a controller are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的职责如下：
- en: Identify the services that the controller needs to be in a valid state and to
    function properly in their class constructor(s).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别控制器需要在类构造函数中处于有效状态并正常运行的服务。
- en: Use the action name to identify a method to execute.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动作名称来识别要执行的方法。
- en: Extract parameters from the HTTP request.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从HTTP请求中提取参数。
- en: Use the parameters to fetch any additional data needed to construct a view model
    and pass it to the appropriate view for the client. For example, if the client
    is a web browser, then a view that renders HTML would be most appropriate. Other
    clients might prefer alternative renderings, like document formats such as a PDF
    file or an Excel file, or data formats, like JSON or XML.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数获取构建视图模型所需的任何额外数据，并将其传递给客户端的适当视图。例如，如果客户端是Web浏览器，则渲染HTML的视图最为合适。其他客户端可能更喜欢替代渲染方式，如PDF文件或Excel文件等文档格式，或JSON或XML等数据格式。
- en: Return the results from the view to the client as an HTTP response with an appropriate
    status code.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图的结果作为具有适当状态码的HTTP响应返回给客户端。
- en: 'Let''s review the controller used to generate the home, privacy, and error
    pages:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾用于生成主页、隐私和错误页面的控制器：
- en: Expand the `Controllers` folder
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`Controllers`文件夹
- en: Open the file named `HomeController.cs`
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开名为`HomeController.cs`的文件
- en: 'Note, as shown in the following code, that:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，如下列代码所示：
- en: Extra namespaces are imported, which I have added comments for to show which
    types they are needed for.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入了额外的命名空间，我已添加注释以显示它们所需的类型。
- en: A private read-only field is declared to store a reference to a logger for the
    `HomeController` that is set in a constructor.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个私有只读字段，用于存储在构造函数中设置的`HomeController`的日志记录器引用。
- en: All three action methods call a method named `View` and return the results as
    an `IActionResult` interface to the client.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有三个动作方法都调用名为`View`的方法，并将结果作为`IActionResult`接口返回给客户端。
- en: 'The `Error` action method passes a view model into its view with a request
    ID used for tracing. The error response will not be cached:'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Error`动作方法将其视图模型与用于跟踪的请求ID一起传递到其视图中。错误响应将不会被缓存：'
- en: '[PRE15]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If the visitor navigates to a path of `/` or `/Home`, then it is the equivalent
    of `/Home/Index` because those were the default names for controller and action
    in the default route.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果访问者导航到路径`/`或`/Home`，则相当于`/Home/Index`，因为这些是默认路由中控制器和动作的默认名称。
- en: Understanding the view search path convention
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解视图搜索路径约定
- en: The `Index` and `Privacy` methods are identical in implementation, yet they
    return different web pages. This is because of **conventions**. The call to the
    `View` method looks in different paths for the Razor file to generate the web
    page.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index`和`Privacy`方法在实现上相同，但它们返回不同的网页。这是因为**约定**。对`View`方法的调用在不同的路径中查找Razor文件以生成网页。'
- en: 'Let''s deliberately break one of the page names so that we can see the paths
    searched by default:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们故意破坏一个页面名称，以便我们可以看到默认搜索的路径：
- en: In the `Northwind.Mvc` project, expand the `Views` folder and then the `Home`
    folder.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，展开`Views`文件夹，然后展开`Home`文件夹。
- en: Rename the `Privacy.cshtml` file to `Privacy2.cshtml`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Privacy.cshtml`文件重命名为`Privacy2.cshtml`。
- en: Start the website.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Start Chrome, navigate to `https://localhost:5001/`, click **Privacy**, and
    note the paths that are searched for a view to render the web page (including
    in `Shared` folders for MVC views and Razor Pages), as shown in *Figure 15.3*:![](img/B17442_16_03.png)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome，导航到`https://localhost:5001/`，点击**隐私**，并注意搜索视图以渲染网页的路径（包括MVC视图和Razor页面的`Shared`文件夹），如*图15.3*所示：![](img/B17442_16_03.png)
- en: 'Figure 15.3: An exception showing the default search path for views'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.3：显示视图默认搜索路径的异常
- en: Close Chrome and shut down the web server.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Rename the `Privacy2.cshtml` file back to `Privacy.cshtml`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Privacy2.cshtml`文件重命名为`Privacy.cshtml`。
- en: 'You have now seen the view search path convention, as shown in the following
    list:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经看到了视图搜索路径约定，如下列列表所示：
- en: 'Specific Razor view: `/Views/{controller}/{action}.cshtml`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的Razor视图：`/Views/{controller}/{action}.cshtml`
- en: 'Shared Razor view: `/Views/Shared/{action}.cshtml`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享Razor视图：`/Views/Shared/{action}.cshtml`
- en: 'Shared Razor Page: `/Pages/Shared/{action}.cshtml`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享Razor页面：`/Pages/Shared/{action}.cshtml`
- en: Understanding logging
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解日志记录
- en: You have just seen that some errors are caught and written to the console. You
    can write messages to the console in the same way by using the logger.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到，一些错误被捕获并写入控制台。您可以使用记录器以相同的方式向控制台写入消息。
- en: 'In the `Controllers` folder, in `HomeController.cs`, in the `Index` method,
    add statements to use the logger to write some messages of various levels to the
    console, as shown in the following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中的`HomeController.cs`文件里，在`Index`方法中，添加语句以使用记录器向控制台写入不同级别的消息，如下列代码所示：
- en: '[PRE16]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`网站项目。
- en: Start a web browser and navigate to the home page for the website.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web浏览器并导航到网站的主页。
- en: 'At the command prompt or terminal, note the messages, as shown in the following
    output:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意消息，如下列输出所示：
- en: '[PRE17]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Close Chrome and shut down the web server.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Understanding filters
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解过滤器
- en: When you need to add some functionality to multiple controllers and actions,
    you can use or define your own filters that are implemented as an attribute class.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要向多个控制器和动作添加某些功能时，您可以使用或定义自己的过滤器，这些过滤器作为属性类实现。
- en: 'Filters can be applied at the following levels:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器可以应用于以下级别：
- en: At the action level by decorating an action method with the attribute. This
    will only affect the one action method.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在动作方法上装饰属性，在动作级别进行设置。这只会影响该动作方法。
- en: At the controller level by decorating the controller class with the attribute.
    This will affect all methods of the controller.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在控制器类上装饰属性，在控制器级别进行设置。这将影响控制器的所有方法。
- en: 'At the global level by adding the attribute type to the `Filters` collection
    of the `MvcOptions` instance that can be used to configure MVC when calling the
    `AddControllersWithViews` method, as shown in the following code:'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将属性类型添加到`MvcOptions`实例的`Filters`集合中，在全局级别进行设置，该实例可用于在调用`AddControllersWithViews`方法时配置MVC，如下列代码所示：
- en: '[PRE18]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using a filter to secure an action method
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过滤器来保护动作方法
- en: 'You might want to ensure that one particular action method of a controller
    class can only be called by members of certain security roles. You do this by
    decorating the method with the `[Authorize]` attribute, as described in the following
    list:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望确保控制器类中的某个特定动作方法只能由特定安全角色的成员调用。你可以通过在方法上装饰`[Authorize]`属性来实现这一点，如下列表所述：
- en: '`[Authorize]`: Only allow authenticated (non-anonymous, logged-in) visitors
    to access this action method.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Authorize]`：仅允许经过身份验证（非匿名，已登录）的访问者访问此动作方法。'
- en: '`[Authorize(Roles = "Sales,Marketing")]`: Only allow visitors who are members
    of the specified role(s) to access this action method.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Authorize(Roles = "Sales,Marketing")]`：仅允许指定角色中的访问者访问此动作方法。'
- en: 'Let''s see an example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子：
- en: In `HomeController.cs`, import the `Microsoft.AspNetCore.Authorization` namespace.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，导入`Microsoft.AspNetCore.Authorization`命名空间。
- en: 'Add an attribute to the `Privacy` method to only allow access to logged-in
    users who are members of a group/role named `Administrators`, as shown highlighted
    in the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`Privacy`方法添加一个属性，仅允许名为`Administrators`的组/角色中的已登录用户访问，如以下高亮代码所示：
- en: '[PRE19]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Start the website.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Click **Privacy** and note that you are redirected to the log in page.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**隐私**，注意你将被重定向到登录页面。
- en: Enter your email and password.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的电子邮件和密码。
- en: Click **Log in** and note that you are denied access.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**，注意你被拒绝访问。
- en: Close Chrome and shut down the web server.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Enabling role management and creating a role programmatically
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用角色管理和编程创建角色
- en: 'By default, role management is not enabled in an ASP.NET Core MVC project,
    so we must first enable it before creating roles, and then we will create a controller
    that will programmatically create an `Administrators` role (if it does not already
    exist) and assign a test user to that role:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，角色管理在ASP.NET Core MVC项目中未启用，因此我们必须首先启用它，然后创建一个控制器，该控制器将编程创建一个`Administrators`角色（如果不存在）并将测试用户分配给该角色：
- en: 'In `Program.cs`, in the setup of ASP.NET Core Identity and its database, add
    a call to `AddRoles` to enable role management, as shown highlighted in the following
    code:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在ASP.NET Core Identity及其数据库的设置中，添加对`AddRoles`的调用以启用角色管理，如下高亮代码所示：
- en: '[PRE20]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `Controllers`, add an empty controller class named `RolesController.cs`
    and modify its contents, as shown in the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`中，添加一个名为`RolesController.cs`的空控制器类并修改其内容，如下代码所示：
- en: '[PRE21]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note the following:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: Two fields for the name of the role and email of the user.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色名称和用户电子邮件的两个字段。
- en: The constructor gets and stores the registered user and role manager dependency
    services.
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数获取并存储已注册用户和角色管理依赖服务。
- en: If the `Administrators` role does not exist, we use the role manager to create
    it.
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`Administrators`角色不存在，我们使用角色管理器创建它。
- en: We try to find a test user by its email, create it if it does not exist, and
    then assign the user to the `Administrators` role.
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们尝试通过其电子邮件查找测试用户，如果不存在则创建它，然后将用户分配给`Administrators`角色。
- en: Since the website uses DOI, we must generate an email confirmation token and
    use it to confirm the new users email address.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于网站使用DOI，我们必须生成一个电子邮件确认令牌，并使用它来确认新用户的电子邮件地址。
- en: Success messages and any errors are written out to the console.
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功消息和任何错误都会输出到控制台。
- en: You will be automatically redirected to the home page.
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将自动重定向到主页。
- en: Start the website.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Click **Privacy** and note that you are redirected to the login page.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**隐私**，注意你将被重定向到登录页面。
- en: Enter your email and password. (I used `mark@example.com`.)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的电子邮件和密码。（我使用了`mark@example.com`。）
- en: Click **Log in** and note that you are denied access as before.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**，注意你像之前一样被拒绝访问。
- en: Click **Home**.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**。
- en: 'In the address bar, manually enter `roles` as a relative URL path, as shown
    in the following link: `https://localhost:5001/roles`.'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地址栏中，手动输入`roles`作为相对URL路径，如下链接所示：`https://localhost:5001/roles`。
- en: 'View the success messages written to the console, as shown in the following
    output:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出到控制台的成功消息，如下所示：
- en: '[PRE22]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Click **Logout**, because you must log out and log back in to load your role
    memberships when they are created after you have already logged in.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注销**，因为你必须注销并重新登录以加载角色成员资格，这些成员资格是在你已经登录后创建的。
- en: Try accessing the **Privacy** page again, enter the email for the new user that
    was programmatically created, for example, `test@example.com`, and their password,
    and then click **Log in**, and you should now have access.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试访问**隐私**页面，输入新用户程序化创建的电子邮件，例如`test@example.com`，以及他们的密码，然后点击**登录**，您现在应该可以访问了。
- en: Close Chrome and shut down the web server.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Using a filter to cache a response
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过滤器缓存响应
- en: To improve response times and scalability, you might want to cache the HTTP
    response that is generated by an action method by decorating the method with the
    `[ResponseCache]` attribute.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高响应时间和可扩展性，您可能希望缓存由操作方法生成的HTTP响应，通过使用`[ResponseCache]`属性装饰该方法。
- en: 'You control where the response is cached and for how long by setting parameters,
    as shown in the following list:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过设置参数来控制响应的缓存位置和时长，如下面的列表所示：
- en: '`Duration`: In seconds. This sets the `max-age` HTTP response header measured
    in seconds. Common choices are one hour (3600 seconds) and one day (86400 seconds).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`时长`：以秒为单位。这设置了以秒为单位的`max-age` HTTP 响应头。常见的选择是一个小时（3600秒）和一天（86400秒）。'
- en: '`Location`: One of the `ResponseCacheLocation` values, `Any`, `Client`, or
    `None`. This sets the `cache-control` HTTP response header.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`位置`：`ResponseCacheLocation`值之一，`任何`，`客户端`或`无`。这设置了`缓存控制`HTTP响应头。'
- en: '`NoStore`: If `true`, this ignores `Duration` and `Location` and sets the cache-control
    HTTP response header to `no-store`.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoStore`：如果`true`，这将忽略`时长`和`位置`，并将缓存控制HTTP响应头设置为`no-store`。'
- en: 'Let''s see an example:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: 'In `HomeController.cs`, add an attribute to the `Index` method to cache the
    response for 10 seconds on the browser or any proxies between the server and browser,
    as shown highlighted in the following code:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，向`Index`方法添加一个属性，以在浏览器或服务器和浏览器之间的任何代理上缓存响应10秒，如下面的代码中突出显示的那样：
- en: '[PRE23]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `Views`, in `Home`, open `Index.cshtml`, and add a paragraph to output the
    current time in long format to include seconds, as shown in the following markup:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`视图`中，在`主页`中，打开`Index.cshtml`，并添加一个段落以长格式输出当前时间，包括秒，如下面的标记所示：
- en: '[PRE24]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Start the website.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Note the time on the home page.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意主页上的时间。
- en: Click **Register**.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**。
- en: Click **Home** and note the time on the home page is the same because a cached
    version of the page is used.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**并注意主页上的时间相同，因为使用了页面的缓存版本。
- en: Click **Register**. Wait at least ten seconds.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**。至少等待十秒钟。
- en: Click **Home** and note the time has now updated.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**并注意时间现已更新。
- en: Click **Log in**, enter your email and password, and then click **Log in**.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**，输入您的电子邮件和密码，然后点击**登录**。
- en: Note the time on the home page.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意主页上的时间。
- en: Click **Privacy**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**隐私**。
- en: Click **Home** and note the page is not cached.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**并注意页面未被缓存。
- en: 'View the console and note the warning message explaining that your caching
    has been overridden because the visitor is logged in and, in this scenario, ASP.NET
    Core uses anti-forgery tokens and they should not be cached, as shown in the following
    output:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看控制台并注意警告消息，该消息解释说您的缓存已被覆盖，因为访问者已登录，在这种情况下，ASP.NET Core使用防伪令牌，它们不应被缓存，如下面的输出所示：
- en: '[PRE25]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Close Chrome and shut down the web server.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Using a filter to define a custom route
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过滤器定义自定义路由
- en: You might want to define a simplified route for an action method instead of
    using the default route.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望为操作方法定义简化路由，而不是使用默认路由。
- en: 'For example, to show the privacy page currently requires the following URL
    path, which specifies both the controller and action:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要显示隐私页面，当前需要以下URL路径，该路径指定了控制器和操作：
- en: '[PRE26]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We could make the route simpler, as shown in the following link:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使路由更简单，如下面的链接所示：
- en: '[PRE27]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s see how to do that:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点：
- en: 'In `HomeController.cs`, add an attribute to the `Privacy` method to define
    a simplified route, as shown highlighted in the following code:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，向`隐私`方法添加一个属性，以定义简化路由，如下面的代码中突出显示的那样：
- en: '[PRE28]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Start the website.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: 'In the address bar, enter the following URL path:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地址栏中，输入以下URL路径：
- en: '[PRE29]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Enter your email and password, click **Log in**, and note that the simplified
    path shows the **Privacy** page.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的电子邮件和密码，点击**登录**，并注意简化路径显示了**隐私**页面。
- en: Close Chrome and shut down the web server.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Understanding entity and view models
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解实体和视图模型
- en: 'In MVC, the M stands for *model*. Models represent the data required to respond
    to a request. There are two types of models commonly used: entity models and view
    models.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: MVC中的M代表*模型*。模型代表响应请求所需的数据。常用的模型类型有两种：实体模型和视图模型。
- en: '**Entity models** represent entities in a database like SQL Server or SQLite.
    Based on the request, one or more entities might need to be retrieved from data
    storage. Entity models are defined using classes since they might need to change
    and then be used to update the underlying data store.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体模型**代表数据库中的实体，如SQL Server或SQLite。根据请求，可能需要从数据存储中检索一个或多个实体。实体模型使用类定义，因为它们可能需要更改，然后用于更新底层数据存储。'
- en: All the data that we want to show in response to a request is the **MVC model**,
    sometimes called a **view model**, because it is a model that is passed into a
    view for rendering into a response format like HTML or JSON. View models should
    be immutable, so they are commonly defined using records.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在响应请求时展示的所有数据就是**MVC模型**，有时称为**视图模型**，因为它是一个传递给视图以渲染成HTML或JSON等响应格式的模型。视图模型应该是不可变的，因此通常使用记录来定义。
- en: 'For example, the following HTTP `GET` request might mean that the browser is
    asking for the product details page for product number 3:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下HTTP `GET`请求可能意味着浏览器正在请求产品编号为3的产品详情页：
- en: '[http://www.example.com/products/details/3](http://www.example.com/products/details/3)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.example.com/products/details/3](http://www.example.com/products/details/3)'
- en: The controller would need to use the ID route value 3 to retrieve the entity
    for that product and pass it to a view that can then turn the model into HTML
    for display in a browser.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器需要使用ID路由值3来检索该产品的实体，并将其传递给一个视图，该视图随后将模型转换为HTML，以便在浏览器中显示。
- en: Imagine that when a user comes to our website, we want to show them a carousel
    of categories, a list of products, and a count of the number of visitors we have
    had this month.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 设想当用户访问我们的网站时，我们希望向他们展示一个类别轮播、产品列表以及本月我们接待的访问者数量计数。
- en: 'We will reference the Entity Framework Core entity data model for the Northwind
    database that you created in *Chapter 13*, *Introducing Practical Applications
    of C# and .NET*:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用您在*第13章*，*介绍C#和.NET的实际应用*中创建的Northwind数据库的Entity Framework Core实体数据模型：
- en: 'In the `Northwind.Mvc` project, add a project reference to `Northwind.Common.DataContext`
    for either SQLite or SQL Server, as shown in the following markup:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，添加对`Northwind.Common.DataContext`的项目引用，无论是SQLite还是SQL Server，如下列标记所示：
- en: '[PRE30]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Build the `Northwind.Mvc` project to compile its dependencies.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Mvc`项目以编译其依赖项。
- en: 'If you are using SQL Server, or might want to switch between SQL Server and
    SQLite, then in `appsettings.json`, add a connection string for the Northwind
    database using SQL Server, as shown highlighted in the following markup:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用SQL Server，或者可能想要在SQL Server和SQLite之间切换，那么在`appsettings.json`中，添加一个使用SQL
    Server的Northwind数据库的连接字符串，如下列标记中突出显示的那样：
- en: '[PRE31]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In `Program.cs`, import the namespace to work with your entity model types,
    as shown in the following code:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理实体模型类型的命名空间，如下列代码所示：
- en: '[PRE32]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Before the `builder.Build` method call, add statements to load the appropriate
    connection string and then to register the `Northwind` database context, as shown
    in the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`builder.Build`方法调用之前，添加语句以加载适当的连接字符串，然后注册`Northwind`数据库上下文，如下列代码所示：
- en: '[PRE33]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Add a class file to the `Models` folder and name it `HomeIndexViewModel.cs`.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Models`文件夹添加一个类文件，并将其命名为`HomeIndexViewModel.cs`。
- en: '**Good Practice**: Although the `ErrorViewModel` class created by the MVC project
    template does not follow this convention, I recommend that you use the naming
    convention `{Controller}{Action}ViewModel` for your view model classes.'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最佳实践**：尽管MVC项目模板创建的`ErrorViewModel`类并未遵循此约定，但我建议您为视图模型类采用命名约定`{Controller}{Action}ViewModel`。'
- en: 'Modify the statements to define a record that has three properties for a count
    of the number of visitors, and lists of categories and products, as shown in the
    following code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改语句以定义一个记录，该记录具有三个属性，分别用于访问者数量计数以及类别和产品列表，如下列代码所示：
- en: '[PRE34]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In `HomeController.cs`, import the `Packt.Shared` namespace, as shown in the
    following code:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，导入`Packt.Shared`命名空间，如下列代码所示：
- en: '[PRE35]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add a field to store a reference to a `Northwind` instance, and initialize
    it in the constructor, as shown highlighted in the following code:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个字段以存储对`Northwind`实例的引用，并在构造函数中初始化它，如下列代码中突出显示的那样：
- en: '[PRE36]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: ASP.NET Core will use constructor parameter injection to pass an instance of
    the `NorthwindContext` database context using the connection string you specified
    in `Program.cs`.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASP.NET Core将使用构造函数参数注入来传递在`Program.cs`中指定的连接字符串的`NorthwindContext`数据库上下文实例。
- en: 'Modify the statements in the `Index` action method to create an instance of
    the view model for this method, simulating a visitor count using the `Random`
    class to generate a number between 1 and 1000, and using the `Northwind` database
    to get lists of categories and products, and then pass the model to the view,
    as shown highlighted in the following code:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Index`操作方法中的语句，以创建此方法的视图模型实例，使用`Random`类模拟访客计数，生成1到1000之间的数字，并使用`Northwind`数据库获取类别和产品列表，然后将模型传递给视图，如下面的代码中突出显示所示：
- en: '[PRE37]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Remember the view search convention: when the `View` method is called in a
    controller''s action method, ASP.NET Core MVC looks in the `Views` folder for
    a subfolder with the same name as the current controller, that is, `Home`. It
    then looks for a file with the same name as the current action, that is, `Index.cshtml`.
    It will also search for views that match the action method name in the `Shared`
    folder and for Razor Pages in the `Pages` folder.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 记住视图搜索约定：当在控制器的操作方法中调用`View`方法时，ASP.NET Core MVC会在`Views`文件夹中查找与当前控制器同名的子文件夹，即`Home`。然后查找与当前操作同名的文件，即`Index.cshtml`。它还会在`Shared`文件夹中搜索与操作方法名匹配的视图，以及在`Pages`文件夹中搜索Razor页面。
- en: Understanding views
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解视图
- en: In MVC, the V stands for *view*. The responsibility of a view is to transform
    a model into HTML or other formats.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: MVC中的V代表*视图*。视图的责任是将模型转换为HTML或其他格式。
- en: There are multiple **view engines** that could be used to do this. The default
    view engine is called **Razor**, and it uses the `@` symbol to indicate server-side
    code execution. The Razor Pages feature introduced with ASP.NET Core 2.0 uses
    the same view engine and so can use the same Razor syntax.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种**视图引擎**可用于此目的。默认视图引擎称为**Razor**，它使用`@`符号指示服务器端代码执行。随ASP.NET Core 2.0引入的Razor
    Pages功能使用相同的视图引擎，因此可以使用相同的Razor语法。
- en: 'Let''s modify the home page view to render the lists of categories and products:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改主页视图以渲染类别和产品列表：
- en: Expand the `Views` folder, and then expand the `Home` folder.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`Views`文件夹，然后展开`Home`文件夹。
- en: 'Open the `Index.cshtml` file and note the block of C# code wrapped in `@{ }`.
    This will execute first and can be used to store data that needs to be passed
    into a shared layout file like the title of the web page, as shown in the following
    code:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Index.cshtml`文件，并注意包裹在`@{ }`中的C#代码块。这会首先执行，并可用于存储需要传递到共享布局文件的数据，例如网页标题，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note the static HTML content in the `<div>` element that uses Bootstrap for
    styling.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意使用Bootstrap进行样式化的`<div>`元素中的静态HTML内容。
- en: '**Good Practice**: As well as defining your own styles, base your styles on
    a common library, such as Bootstrap, that implements responsive design.'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：除了定义自己的样式外，还应基于实现响应式设计的通用库（如Bootstrap）来构建样式。'
- en: Just as with Razor Pages, there is a file named `_ViewStart.cshtml` that gets
    executed by the `View` method. It is used to set defaults that apply to all views.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与Razor页面一样，有一个名为`_ViewStart.cshtml`的文件，由`View`方法执行。它用于设置适用于所有视图的默认值。
- en: 'For example, it sets the `Layout` property of all views to a shared layout
    file, as shown in the following markup:'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，它将所有视图的`Layout`属性设置为共享布局文件，如下面的标记所示：
- en: '[PRE39]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `Views` folder, open the `_ViewImports.cshtml` file and note that it
    imports some namespaces and then adds the ASP.NET Core tag helpers, as shown in
    the following code:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中，打开`_ViewImports.cshtml`文件，并注意它导入了一些命名空间，然后添加了ASP.NET Core标签助手，如下面的代码所示：
- en: '[PRE40]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the `Shared` folder, open the `_Layout.cshtml` file.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shared`文件夹中，打开`_Layout.cshtml`文件。
- en: 'Note that the title is being read from the `ViewData` dictionary that was set
    earlier in the `Index.cshtml` view, as shown in the following markup:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意标题是从`ViewData`字典中读取的，该字典是在`Index.cshtml`视图中较早设置的，如下面的标记所示：
- en: '[PRE41]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Note the rendering of links to support Bootstrap and a site stylesheet, where
    `~` means the `wwwroot` folder, as shown in the following markup:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意支持Bootstrap和站点样式表的链接渲染，其中`~`表示`wwwroot`文件夹，如下面的标记所示：
- en: '[PRE42]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Note the rendering of a navigation bar in the header, as shown in the following
    markup:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意头部导航栏的渲染，如下面的标记所示：
- en: '[PRE43]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Note the rendering of a collapsible `<div>` containing a partial view for logging
    in and hyperlinks to allow users to navigate between pages using ASP.NET Core
    tag helpers with attributes like `asp-controller` and `asp-action`, as shown in
    the following markup:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意渲染一个可折叠的`<div>`，其中包含用于登录的部分视图和超链接，允许用户使用带有`asp-controller`和`asp-action`等属性的ASP.NET
    Core标签助手在页面间导航，如下面的标记所示：
- en: '[PRE44]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `<a>` elements use tag helper attributes named `asp-controller` and `asp-action`
    to specify the controller name and action name that will execute when the link
    is clicked on. If you want to navigate to a feature in a Razor Class Library,
    like the `employees` component that you created in the previous chapter, then
    you use `asp-area` to specify the feature name.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<a>`元素使用名为`asp-controller`和`asp-action`的标签助手属性来指定链接被点击时将执行的控制器名称和动作名称。如果你想导航到一个Razor类库中的功能，比如你在前一章创建的`employees`组件，那么你可以使用`asp-area`来指定功能名称。'
- en: 'Note the rendering of the body inside the `<main>` element, as shown in the
    following markup:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意`<main>`元素内主体的渲染，如下面的标记所示：
- en: '[PRE45]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `RenderBody` method injects the contents of a specific Razor view for a
    page like the `Index.cshtml` file at that point in the shared layout.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RenderBody`方法注入特定Razor视图的内容，例如在共享布局中该点的`Index.cshtml`文件。'
- en: 'Note the rendering of `<script>` elements at the bottom of the page so that
    it does not slow down the display of the page and that you can add your own script
    blocks into an optional defined section named `scripts`, as shown in the following
    markup:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在页面底部渲染`<script>`元素，这样不会减慢页面显示速度，并且你可以在一个可选定义的名为`scripts`的部分中添加自己的脚本块，如下面的标记所示：
- en: '[PRE46]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When `asp-append-version` is specified with a `true` value in any element like
    `<img>` or `<script>` along with a `src` attribute, the Image Tag Helper is invoked
    (this helper is poorly named because it does not only affect images!).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 当在任何元素（如`<img>`或`<script>`）中与`src`属性一起指定`asp-append-version`并设置为`true`时，将调用Image
    Tag Helper（此助手的名称不佳，因为它不仅影响图像！）。
- en: 'It works by automatically appending a query string value named `v` that is
    generated from a hash of the referenced source file, as shown in the following
    example generated output:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是自动附加一个名为`v`的查询字符串值，该值是从引用的源文件的哈希生成的，如下面的示例生成输出所示：
- en: '[PRE47]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If even a single byte within the `site.js` file changes, then its hash value
    will be different, and therefore if a browser or CDN is caching the script file,
    then it will bust the cached copy and replace it with the new version.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`site.js`文件中的任何一个字节发生变化，其哈希值就会不同，因此如果浏览器或CDN正在缓存该脚本文件，则会清除缓存的副本并替换为新版本。
- en: Customizing an ASP.NET Core MVC website
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制ASP.NET Core MVC网站
- en: Now that you've reviewed the structure of a basic MVC website, you will customize
    and extend it. You have already registered an EF Core model for the `Northwind`
    database, so the next task is to output some of that data on the home page.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经审查了一个基本MVC网站的结构，你将对其进行定制和扩展。你已经为`Northwind`数据库注册了一个EF Core模型，接下来的任务是在首页输出一些该数据。
- en: Defining a custom style
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义自定义样式
- en: 'The home page will show a list of the 77 products in the Northwind database.
    To make efficient use of space, we want to show the list in three columns. To
    do this, we need to customize the stylesheet for the website:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 首页将展示Northwind数据库中的77种产品列表。为了高效利用空间，我们希望以三列形式显示该列表。为此，我们需要为网站定制样式表：
- en: In the `wwwroot\css` folder, open the `site.css` file.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot\css`文件夹中，打开`site.css`文件。
- en: 'At the bottom of the file, add a new style that will apply to an element with
    the `product-columns` ID, as shown in the following code:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部，添加一个新的样式，该样式将应用于具有`product-columns` ID的元素，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Setting up the category images
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置类别图像
- en: 'The Northwind database includes a table of eight categories, but they do not
    have images, and websites look better with some colorful pictures:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind数据库包含一个有八个类别的表，但它们没有图像，而网站配上一些色彩丰富的图片会更好看：
- en: In the `wwwroot` folder, create a folder named `images`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中，创建一个名为`images`的文件夹。
- en: In the `images` folder, add eight image files named `category1.jpeg`, `category2.jpeg`,
    and so on, up to `category8.jpeg`.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`images`文件夹中，添加八个名为`category1.jpeg`、`category2.jpeg`，以此类推，直到`category8.jpeg`的图像文件。
- en: 'You can download images from the GitHub repository for this book at the following
    link: [https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories](https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书GitHub仓库的以下链接下载图片：[https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories](https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories)
- en: Understanding Razor syntax
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Razor语法
- en: 'Before we customize the home page view, let''s review an example Razor file
    that has an initial Razor code block that instantiates an order with price and
    quantity and then outputs information about the order on the web page, as shown
    in the following markup:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们自定义主页视图之前，让我们回顾一个具有初始Razor代码块的示例Razor文件，该代码块实例化了一个具有价格和数量的订单，然后在网页上输出订单信息，如下面的标记所示：
- en: '[PRE49]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The preceding Razor file would result in the following incorrect output:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Razor文件将产生以下错误的输出：
- en: '[PRE50]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Although Razor markup can include the value of any single property using the
    `@object.property` syntax, you should wrap expressions in parentheses, as shown
    in the following markup:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Razor标记可以使用`@object.property`语法包含任何单一属性的值，但您应该用括号将表达式括起来，如下面的标记所示：
- en: '[PRE51]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The preceding Razor expression results in the following correct output:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Razor表达式将产生以下正确的输出：
- en: '[PRE52]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Defining a typed view
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义类型化视图
- en: 'To improve the IntelliSense when writing a view, you can define what type the
    view can expect using an `@model` directive at the top:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高编写视图时的IntelliSense，您可以使用顶部的`@model`指令定义视图可以预期的类型：
- en: In the `Views\Home` folder, open `Index.cshtml`.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views\Home`文件夹中，打开`Index.cshtml`。
- en: 'At the top of the file, add a statement to set the model type to use the `HomeIndexViewModel`,
    as shown in the following code:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部，添加一个语句，将模型类型设置为使用`HomeIndexViewModel`，如下面的代码所示：
- en: '[PRE53]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now, whenever we type `Model` in this view, your code editor will know the correct
    type for the model and will provide IntelliSense for it.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，每当我们在本视图中键入`Model`时，您的代码编辑器将知道模型的正确类型，并为其提供IntelliSense。
- en: 'While entering code in a view, remember the following:'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在视图中输入代码时，请记住以下事项：
- en: Declare the type for the model, use `@model` (with a lowercase m).
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明模型的类型，使用`@model`（小写m）。
- en: Interact with the instance of the model, use `@Model` (with an uppercase M).
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与模型实例交互，使用`@Model`（大写M）。
- en: Let's continue customizing the view for the home page.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们继续自定义主页视图。
- en: 'In the initial Razor code block, add a statement to declare a `string` variable
    for the current item and under the existing `<div>` element add new markup to
    output categories in a carousel and products as an unordered list, as shown in
    the following markup:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始的Razor代码块中，添加一个声明当前项的`string`变量的语句，并在现有的`<div>`元素下添加新的标记，以轮播形式输出类别，并以无序列表形式输出产品，如下面的标记所示：
- en: '[PRE54]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'While reviewing the preceding Razor markup, note the following:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查前面的Razor标记时，请注意以下几点：
- en: It is easy to mix static HTML elements such as `<ul>` and `<li>` with C# code
    to output the carousel of categories and the list of product names.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易将静态HTML元素（如`<ul>`和`<li>`）与C#代码混合，以输出类别轮播和产品名称列表。
- en: The `<div>` element with the `id` attribute of `product-columns` will use the
    custom style that we defined earlier, so all of the content in that element will
    display in three columns.
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有`id`属性为`product-columns`的`<div>`元素将使用我们之前定义的自定义样式，因此该元素中的所有内容将以三列显示。
- en: 'The `<img>` element for each category uses parentheses around a Razor expression
    to ensure that the compiler does not include the `.jpeg` as part of the expression,
    as shown in the following markup: `"~/images/category@(Model.Categories[c].CategoryID).jpeg"`'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别的`<img>`元素使用括号包围Razor表达式，以确保编译器不会将`.jpeg`作为表达式的一部分，如下面的标记所示：`"~/images/category@(Model.Categories[c].CategoryID).jpeg"`
- en: 'The `<a>` elements for the product links use tag helpers to generate URL paths.
    Clicks on these hyperlinks will be handled by the `HomeController` and its `ProductDetail`
    action method. This action method does not exist yet, but you will add it later
    in this chapter. The ID of the product is passed as a route segment named `id`,
    as shown in the following URL path for Ipoh Coffee: `https://localhost:5001/Home/ProductDetail/43`.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品链接的`<a>`元素使用标签助手生成URL路径。点击这些超链接将由`HomeController`及其`ProductDetail`动作方法处理。此动作方法目前尚不存在，但您将在本章稍后添加。产品ID作为名为`id`的路由段传递，如下面的Ipoh
    Coffee的URL路径所示：`https://localhost:5001/Home/ProductDetail/43`。
- en: Reviewing the customized home page
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查自定义主页
- en: 'Let''s see the result of our customized home page:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看自定义首页的结果：
- en: Start the `Northwind.Mvc` website project.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`网站项目。
- en: Note the home page has a rotating carousel showing categories, a random number
    of visitors, and a list of products in three columns, as shown in *Figure 15.4*:![](img/B17442_16_04.png)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意首页有一个旋转的轮播显示类别，随机数量的访客，以及三列中的产品列表，如*图15.4*所示：![](img/B17442_16_04.png)
- en: 'Figure 15.4: The updated Northwind MVC website home page'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.4：更新后的Northwind MVC网站首页
- en: For now, clicking on any of the categories or product links gives **404 Not
    Found** errors, so let's see how we can implement pages that use the passed parameters
    to see the details of a product or category.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，点击任何类别或产品链接都会给出**404 Not Found**错误，因此让我们看看如何实现使用传递的参数来查看产品或类别详细信息的页面。
- en: Close Chrome and shut down the web server.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Passing parameters using a route value
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路由值传递参数
- en: 'One way to pass a simple parameter is to use the `id` segment defined in the
    default route:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 传递简单参数的一种方法是使用默认路由中定义的`id`段：
- en: 'In the `HomeController` class, add an action method named `ProductDetail`,
    as shown in the following code:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController`类中，添加一个名为`ProductDetail`的操作方法，如下面的代码所示：
- en: '[PRE55]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Note the following:'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: This method uses a feature of ASP.NET Core called **model binding** to automatically
    match the `id` passed in the route to the parameter named `id` in the method.
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法利用ASP.NET Core的一个特性，称为**模型绑定**，自动将路由中传递的`id`与方法中名为`id`的参数匹配。
- en: Inside the method, we check to see whether `id` does not have a value, and if
    so, we call the `BadRequest` method to return a `400` status code with a custom
    message explaining the correct URL path format.
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在方法内部，我们检查`id`是否没有值，如果是，我们调用`BadRequest`方法返回`400`状态码和一条自定义消息，解释正确的URL路径格式。
- en: Otherwise, we can connect to the database and try to retrieve a product using
    the `id` value.
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，我们可以连接到数据库并尝试使用`id`值检索产品。
- en: If we find a product, we pass it to a view; otherwise, we call the `NotFound`
    method to return a `404` status code and a custom message explaining that a product
    with that ID was not found in the database.
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们找到产品，我们将其传递给视图；否则，我们调用`NotFound`方法返回`404`状态码和一条自定义消息，解释数据库中未找到该ID的产品。
- en: Inside the `Views/Home` folder, add a new file named `ProductDetail.cshtml`.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，添加一个名为`ProductDetail.cshtml`的新文件。
- en: 'Modify the contents, as shown in the following markup:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改内容，如下面的标记所示：
- en: '[PRE56]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Start the `Northwind.Mvc` project.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`项目。
- en: When the home page appears with the list of products, click on one of them,
    for example, the second product, **Chang**.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当首页显示产品列表时，点击其中一个，例如，第二个产品，**张**。
- en: Note the URL path in the browser's address bar, the page title shown in the
    browser tab, and the product details page, as shown in *Figure 15.5*:![](img/B17442_16_05.png)
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意浏览器地址栏中的URL路径，浏览器标签中显示的页面标题，以及产品详情页，如*图15.5*所示：![](img/B17442_16_05.png)
- en: 'Figure 15.5: The product detail page for Chang'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.5：张的产品详情页
- en: View **Developer tools**.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看**开发者工具**。
- en: Edit the URL in the address box of Chrome to request a product ID that does
    not exist, like 99, and note the 404 Not Found status code and custom error response.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome的地址栏中编辑URL，请求一个不存在的产品ID，例如99，并注意404 Not Found状态码和自定义错误响应。
- en: Understanding model binders in more detail
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更详细地理解模型绑定器
- en: Model binders are powerful, and the default one does a lot for you. After the
    default route identifies a controller class to instantiate and an action method
    to call, if that method has parameters, then those parameters need to have values
    set.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 模型绑定器功能强大，默认的绑定器为您做了很多工作。默认路由确定要实例化的控制器类和要调用的操作方法后，如果该方法有参数，则这些参数需要设置值。
- en: 'Model binders do this by looking for parameter values passed in the HTTP request
    as any of the following types of parameters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 模型绑定器通过查找HTTP请求中传递的参数值来实现这一点，这些参数值可以是以下任何类型的参数：
- en: '**Route parameter**, like `id` as we did in the previous section, as shown
    in the following URL path: `/Home/ProductDetail/2`'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由参数**，如我们在上一节中使用的`id`，如以下URL路径所示：`/Home/ProductDetail/2`'
- en: '**Query string parameter**, as shown in the following URL path: `/Home/ProductDetail?id=2`'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询字符串参数**，如下面的URL路径所示：`/Home/ProductDetail?id=2`'
- en: '**Form parameter**, as shown in the following markup:'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单参数**，如下面的标记所示：'
- en: '[PRE57]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Model binders can populate almost any type:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 模型绑定器可以填充几乎任何类型：
- en: Simple types, like `int`, `string`, `DateTime`, and `bool`.
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单类型，如`int`、`string`、`DateTime`和`bool`。
- en: Complex types defined by `class`, `record`, or `struct`.
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection types, like arrays and lists.
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create a somewhat artificial example to illustrate what can be achieved
    using the default model binder:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: In the `Models` folder, add a new file named `Thing.cs`.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to define a class with two properties for a nullable integer
    named `Id` and a `string` named `Color`, as shown in the following code:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In `HomeController`, add two new action methods, one to show a page with a
    form and one to display a thing with a parameter using your new model type, as
    shown in the following code:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the `Views\Home` folder, add a new file named `ModelBinding.cshtml`.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following markup:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In `Views/Home`, open `Index.cshtml`, and in the first `<div>`, add a new paragraph
    with a link to the model binding page, as shown in the following markup:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Start the website.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the unhandled exception about an ambiguous match, as shown in *Figure 15.6*:![](img/B17442_16_06.png)
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.6: An unhandled ambiguous action method mismatch exception'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disambiguating action methods
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the C# compiler can differentiate between the two methods by noting
    that the signatures are different, from the routing of an HTTP request's point
    of view, both methods are potential matches. We need an HTTP-specific way to disambiguate
    the action methods.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'We could do this by creating different names for the actions or by specifying
    that one method should be used for a specific HTTP verb, like `GET`, `POST`, or
    `DELETE`. That is how we will solve the problem:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController`, decorate the second `ModelBinding` action method to indicate
    that it should be used for processing HTTP `POST` requests, that is, when a form
    is submitted, as shown highlighted in the following code:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The other `ModelBinding` action method will implicitly be used for all other
    types of HTTP request, like `GET`, `PUT`, `DELETE`, and so on.
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the website.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the value for the `Id` property is set
    from the query string parameter and the value for the color property is set from
    the form parameter, as shown in *Figure 15.7*:![](img/B17442_16_07.png)
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.7: The Model Binding Demo page'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing a route parameter
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will set the property using a route parameter:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the action for the form to pass the value `2` as a route parameter,
    as shown highlighted in the following markup:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Start the website.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the value for the `Id` property is set
    from the route parameter and the value for the `Color` property is set from the
    form parameter.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing a form parameter
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will set the property using a form parameter:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the action for the form to pass the value 1 as a form parameter, as
    shown highlighted in the following markup:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Start the website.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note the values for the `Id` and `Color` properties
    are both set from the form parameters.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: If you have multiple parameters with the same name, then
    remember that form parameters have the highest priority and query string parameters
    have the lowest priority for automatic model binding.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Validating the model
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of model binding can cause errors, for example, data type conversions
    or validation errors if the model has been decorated with validation rules. What
    data has been bound and any binding or validation errors are stored in `ControllerBase.ModelState`.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore what we can do with model state by applying some validation
    rules to the bound model and then showing invalid data messages in the view:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: In the `Models` folder, open `Thing.cs`.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `System.ComponentModel.DataAnnotations` namespace.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Decorate the `Id` property with a validation attribute to limit the range of
    allowed numbers to 1 to 10, and one to ensure that the visitor supplies a color,
    and add a new `Email` property with a regular expression for validation, as shown
    highlighted in the following code:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In the `Models` folder, add a new file named `HomeModelBindingViewModel.cs`.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a record with properties to store the bound model,
    a flag to indicate that there are errors, and a sequence of error messages, as
    shown in the following code:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In `HomeController`, in the `ModelBinding` method that handles HTTP `POST`,
    comment out the previous statement that passed the thing to the view, and instead
    add statements to create an instance of the view model. Validate the model and
    store an array of error messages, and then pass the view model to the view, as
    shown highlighted in the following code:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In `Views\Home`, open `ModelBinding.cshtml`.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the model type declaration to use the view model class, as shown in
    the following markup:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Add a `<div>` to show any model validation errors, and change the output of
    the thing''s properties because the view model has changed, as shown highlighted
    in the following markup:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Start the website.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Binding**.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button and note that `1`, `Red`, and `test@example.com`
    are valid values.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an `Id` of `13`, clear the color textbox, delete the `@` from the email
    address, click the **Submit** button, and note the error messages, as shown in
    *Figure 15.8*:![](img/B17442_16_08.png)
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.8: The Model Binding Demo page with field validations'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: What regular expression does Microsoft use for the implementation
    of the `EmailAddress` validation attribute? Find out at the following link: [https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54](https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54)'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Understanding view helper methods
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While creating a view for ASP.NET Core MVC, you can use the `Html` object and
    its methods to generate markup.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful methods include the following:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '`ActionLink`: Use this to generate an anchor `<a>` element that contains a
    URL path to the specified controller and action. For example, `Html.ActionLink(linkText:
    "Binding", actionName: "ModelBinding", controllerName: "Home")` would generate
    `<a href="/home/modelbinding">Binding</a>`. You can achieve the same result using
    the anchor tag helper: `<a asp-action="ModelBinding" asp-controller="Home">Binding</a>`.'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AntiForgeryToken`: Use this inside a `<form>` to insert a `<hidden>` element
    containing an anti-forgery token that will be validated when the form is submitted.'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Display` and `DisplayFor`: Use this to generate HTML markup for the expression
    relative to the current model using a display template. There are built-in display
    templates for .NET types and custom templates can be created in the `DisplayTemplates`
    folder. The folder name is case-sensitive on case-sensitive filesystems.'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Editor` and `EditorFor`: Use this to generate HTML markup for the expression
    relative to the current model using an editor template. There are built-in editor
    templates for .NET types that use `<label>` and `<input>` elements, and custom
    templates can be created in the `EditorTemplates` folder. The folder name is case-sensitive
    on case-sensitive filesystems.'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditorForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Encode`: Use this to safely encode an object or string into HTML. For example,
    the string value `"<script>"` would be encoded as `"&lt;script&gt;"`. This is
    not normally necessary since the Razor `@` symbol encodes string values by default.'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Raw`: Use this to render a string value *without* encoding as HTML.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PartialAsync` and `RenderPartialAsync`: Use these to generate HTML markup
    for a partial view. You can optionally pass a model and view data.'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: In `Views/Home`, open `ModelBinding.cshtml`.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the rendering of the `Email` property to use `DisplayFor`, as shown
    in the following markup:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Start the website.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Binding**.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Submit**.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the email address is a clickable hyperlink instead of just text.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Models/Thing.cs`, comment out the `[EmailAddress]` attribute above the `Email`
    property.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the website.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Binding**.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Submit**.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the email address is just text.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Models/Thing.cs`, uncomment the `[EmailAddress]` attribute.
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the combination of decorating the `Email` property with the `[EmailAddress]`
    validation attribute and rendering it using `DisplayFor` that notifies ASP.NET
    Core to treat the value as an email address and therefore render it as a clickable
    link.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Querying a database and using display templates
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a new action method that can have a query string parameter passed
    to it and use that to query the Northwind database for products that cost more
    than a specified price.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous examples, we defined a view model that contained properties for
    every value that needed to be rendered in the view. In this example, there will
    be two values: a list of products and the price the visitor entered. To avoid
    having to define a class or record for the view model, we will pass the list of
    products as the model and store the maximum price in the `ViewData` collection.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement this feature:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: In `HomeController`, import the `Microsoft.EntityFrameworkCore` namespace. We
    need this to add the `Include` extension method so that we can include related
    entities, as you learned in *Chapter 10*, *Working with Data Using Entity Framework
    Core*.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new action method, as shown in the following code:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the `Views/Home` folder, add a new file named `ProductsThatCostMoreThan.cshtml`.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents, as shown in the following code:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the `Views/Home` folder, open `Index.cshtml`.
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following form element below the visitor count and above the **Products**
    heading and its listing of products. This will provide a form for the user to
    enter a price. The user can then click **Submit** to call the action method that
    shows only products that cost more than the entered price:'
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Start the website.
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, enter a price in the form, for example, `50`, and then click
    on **Submit**.
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the table of the products that cost more than the price that you entered,
    as shown in *Figure 15.9*:![](img/B17442_16_09.png)
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.9: A filtered list of products that cost more than £50'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improving scalability using asynchronous tasks
  id: totrans-540
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building a desktop or mobile app, multiple tasks (and their underlying
    threads) can be used to improve responsiveness, because while one thread is busy
    with the task, another can handle interactions with the user.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: Tasks and their threads can be useful on the server side too, especially with
    websites that work with files, or request data from a store or a web service that
    could take a while to respond. But they are detrimental to complex calculations
    that are CPU-bound, so leave these to be processed synchronously as normal.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: When an HTTP request arrives at the web server, a thread from its pool is allocated
    to handle the request. But if that thread must wait for a resource, then it is
    blocked from handling any more incoming requests. If a website receives more simultaneous
    requests than it has threads in its pool, then some of those requests will respond
    with a server timeout error, **503 Service Unavailable**.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: The threads that are locked are not doing useful work. They *could* handle one
    of those other requests but only if we implement asynchronous code in our websites.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a thread is waiting for a resource it needs, it can return to the thread
    pool and handle a different incoming request, improving the scalability of the
    website, that is, increasing the number of simultaneous requests it can handle.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: Why not just have a larger thread pool? In modern operating systems, every thread
    in the pool has a 1 MB stack. An asynchronous method uses a smaller amount of
    memory. It also removes the need to create new threads in the pool, which takes
    time. The rate at which new threads are added to the pool is typically one every
    two seconds, which is a loooooong time compared to switching between asynchronous
    threads.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Make your controller action methods asynchronous.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: Making controller action methods asynchronous
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is easy to make an existing action method asynchronous:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `Index` action method to be asynchronous, to return a task, and
    to await the calls to asynchronous methods to get the categories and products,
    as shown highlighted in the following code:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Modify the `ProductDetail` action method in a similar way, as shown highlighted
    in the following code:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Start the website and note that the functionality of the website is the same,
    but trust that it will now scale better.
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  id: totrans-556
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.1 – Test your knowledge
  id: totrans-558
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: What do the files with the special names `_ViewStart` and `_ViewImports` do
    when created in the `Views` folder?
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the names of the three segments defined in the default ASP.NET Core
    MVC route, what do they represent, and which are optional?
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the default model binder do, and what data types can it handle?
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a shared layout file like `_Layout.cshtml`, how do you output the content
    of the current view?
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a shared layout file like `_Layout.cshtml`, how do you output a section that
    the current view can supply content for, and how does the view supply the contents
    for that section?
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When calling the `View` method inside a controller's action method, what paths
    are searched for the view by convention?
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you instruct the visitor's browser to cache the response for 24 hours?
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might you enable Razor Pages even if you are not creating any yourself?
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does ASP.NET Core MVC identify classes that can act as controllers?
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what ways does ASP.NET Core MVC make it easier to test a website?
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 15.2 – Practice implementing MVC by implementing a category detail
    page
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Northwind.Mvc` project has a home page that shows categories, but when
    the `View` button is clicked, the website returns a `404 Not Found` error, for
    example, for the following URL:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:5001/category/1`'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: Extend the `Northwind.Mvc` project by adding the ability to show a detail page
    for a category.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.3 – Practice improving scalability by understanding and implementing
    async action methods
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few years ago, Stephen Cleary wrote an excellent article for MSDN Magazine
    explaining the scalability benefits of implementing async action methods for ASP.NET.
    The same principles apply to ASP.NET Core, but even more so, because unlike the
    old ASP.NET as described in the article, ASP.NET Core supports asynchronous filters
    and other components.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the article at the following link:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/october/async-programming-introduction-to-async-await-on-asp-net](https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/october/async-programming-introduction-to-async-await-on-asp-net)'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.4 – Practice unit testing MVC controllers
  id: totrans-578
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers are where the business logic of your website runs, so it is important
    to test the correctness of that logic using unit tests, as you learned in *Chapter
    4*, *Writing, Debugging, and Testing Functions*.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: Write some unit tests for `HomeController`.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: You can read more about how to unit test controllers at
    the following link: [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing)'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.5 – Explore topics
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-15---building-websites-using-the-model-view-controller-pattern](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-15---building-websites-using-the-model-view-controller-pattern)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-585
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build large, complex websites in a way that
    is easy to unit test by registering and injecting dependency services like database
    contexts and loggers and is easier to manage with teams of programmers using ASP.NET
    Core MVC. You learned about configuration, authentication, routes, models, views,
    and controllers.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build and consume services that use
    HTTP as the communication layer, aka web services.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
