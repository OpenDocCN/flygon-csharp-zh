["```cs\n    <ItemGroup> \n      <ProjectReference\n        Include=\"..\\MonitoringLib\\MonitoringLib.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.Diagnostics; // Stopwatch\n    using static System.Console;\n    using static System.Diagnostics.Process; // GetCurrentProcess()\n    namespace Packt.Shared;\n    public static class Recorder\n    {\n      private static Stopwatch timer = new();\n      private static long bytesPhysicalBefore = 0;\n      private static long bytesVirtualBefore = 0;\n      public static void Start()\n      {\n        // force two garbage collections to release memory that is\n        // no longer referenced but has not been released yet\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n        // store the current physical and virtual memory use \n        bytesPhysicalBefore = GetCurrentProcess().WorkingSet64; \n        bytesVirtualBefore = GetCurrentProcess().VirtualMemorySize64; \n        timer.Restart();\n      }\n      public static void Stop()\n      {\n        timer.Stop();\n        long bytesPhysicalAfter =\n          GetCurrentProcess().WorkingSet64;\n        long bytesVirtualAfter =\n          GetCurrentProcess().VirtualMemorySize64;\n        WriteLine(\"{0:N0} physical bytes used.\",\n          bytesPhysicalAfter - bytesPhysicalBefore);\n        WriteLine(\"{0:N0} virtual bytes used.\",\n          bytesVirtualAfter - bytesVirtualBefore);\n        WriteLine(\"{0} time span ellapsed.\", timer.Elapsed);\n        WriteLine(\"{0:N0} total milliseconds ellapsed.\",\n          timer.ElapsedMilliseconds);\n      }\n    } \n    ```", "```cs\n    using Packt.Shared; // Recorder\n    using static System.Console;\n    WriteLine(\"Processing. Please wait...\");\n    Recorder.Start();\n    // simulate a process that requires some memory resources...\n    int[] largeArrayOfInts = Enumerable.Range(\n      start: 1, count: 10_000).ToArray();\n    // ...and takes some time to complete\n    Thread.Sleep(new Random().Next(5, 10) * 1000);\n    Recorder.Stop(); \n    ```", "```cs\n    Processing. Please wait...\n    655,360 physical bytes used.\n    536,576 virtual bytes used.\n    00:00:09.0038702 time span ellapsed.\n    9,003 total milliseconds ellapsed. \n    ```", "```cs\nProcessing. Please wait...\n294,912 physical bytes used.\n10,485,760 virtual bytes used.\n00:00:06.0074221 time span ellapsed.\n6,007 total milliseconds ellapsed. \n```", "```cs\n    int[] numbers = Enumerable.Range(\n      start: 1, count: 50_000).ToArray();\n    WriteLine(\"Using string with +\");\n    Recorder.Start();\n    string s = string.Empty; // i.e. \"\"\n    for (int i = 0; i < numbers.Length; i++)\n    {\n      s += numbers[i] + \", \";\n    }\n    Recorder.Stop();\n    WriteLine(\"Using StringBuilder\");\n    Recorder.Start();\n    System.Text.StringBuilder builder = new();\n    for (int i = 0; i < numbers.Length; i++)\n    {\n      builder.Append(numbers[i]);\n      builder.Append(\", \");\n    }\n    Recorder.Stop(); \n    ```", "```cs\n    Using string with +\n    14,883,072 physical bytes used.\n    3,609,728 virtual bytes used.\n    00:00:01.6220879 time span ellapsed.\n    1,622 total milliseconds ellapsed.\n    Using StringBuilder\n    12,288 physical bytes used.\n    0 virtual bytes used.\n    00:00:00.0006038 time span ellapsed.\n    0 total milliseconds ellapsed. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n    </ItemGroup> \n    ```", "```cs\n    using BenchmarkDotNet.Running; \n    ```", "```cs\n    using BenchmarkDotNet.Attributes; // [Benchmark]\n    public class StringBenchmarks\n    {\n      int[] numbers;\n      public StringBenchmarks()\n      {\n        numbers = Enumerable.Range(\n          start: 1, count: 20).ToArray();\n      }\n      [Benchmark(Baseline = true)]\n      public string StringConcatenationTest()\n      {\n        string s = string.Empty; // e.g. \"\"\n        for (int i = 0; i < numbers.Length; i++)\n        {\n          s += numbers[i] + \", \";\n        }\n        return s;\n      }\n      [Benchmark]\n      public string StringBuilderTest()\n      {\n        System.Text.StringBuilder builder = new();\n        for (int i = 0; i < numbers.Length; i++)\n        {\n          builder.Append(numbers[i]);\n          builder.Append(\", \");\n        }\n        return builder.ToString();\n      }\n    } \n    ```", "```cs\n    BenchmarkRunner.Run<StringBenchmarks>(); \n    ```", "```cs\n    // ***** BenchmarkRunner: Finish  *****\n    // * Export *\n      BenchmarkDotNet.Artifacts\\results\\StringBenchmarks-report.csv\n      BenchmarkDotNet.Artifacts\\results\\StringBenchmarks-report-github.md\n      BenchmarkDotNet.Artifacts\\results\\StringBenchmarks-report.html\n    // * Detailed results *\n    StringBenchmarks.StringConcatenationTest: DefaultJob\n    Runtime = .NET 6.0.0 (6.0.21.37719), X64 RyuJIT; GC = Concurrent Workstation\n    Mean = 412.990 ns, StdErr = 2.353 ns (0.57%), N = 46, StdDev = 15.957 ns\n    Min = 373.636 ns, Q1 = 413.341 ns, Median = 417.665 ns, Q3 = 420.775 ns, Max = 434.504 ns\n    IQR = 7.433 ns, LowerFence = 402.191 ns, UpperFence = 431.925 ns\n    ConfidenceInterval = [404.708 ns; 421.273 ns] (CI 99.9%), Margin = 8.282 ns (2.01% of Mean)\n    Skewness = -1.51, Kurtosis = 4.09, MValue = 2\n    -------------------- Histogram --------------------\n    [370.520 ns ; 382.211 ns) | @@@@@@\n    [382.211 ns ; 394.583 ns) | @\n    [394.583 ns ; 411.300 ns) | @@\n    [411.300 ns ; 422.990 ns) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    [422.990 ns ; 436.095 ns) | @@@@@\n    ---------------------------------------------------\n    StringBenchmarks.StringBuilderTest: DefaultJob\n    Runtime = .NET 6.0.0 (6.0.21.37719), X64 RyuJIT; GC = Concurrent Workstation\n    Mean = 275.082 ns, StdErr = 0.558 ns (0.20%), N = 15, StdDev = 2.163 ns\n    Min = 271.059 ns, Q1 = 274.495 ns, Median = 275.403 ns, Q3 = 276.553 ns, Max = 278.030 ns\n    IQR = 2.058 ns, LowerFence = 271.409 ns, UpperFence = 279.639 ns\n    ConfidenceInterval = [272.770 ns; 277.394 ns] (CI 99.9%), Margin = 2.312 ns (0.84% of Mean)\n    Skewness = -0.69, Kurtosis = 2.2, MValue = 2\n    -------------------- Histogram --------------------\n    [269.908 ns ; 278.682 ns) | @@@@@@@@@@@@@@@\n    ---------------------------------------------------\n    // * Summary *\n    BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1165 (21H1/May2021Update)\n    11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n    .NET SDK=6.0.100\n      [Host]     : .NET 6.0.0 (6.0.21.37719), X64 RyuJIT\n      DefaultJob : .NET 6.0.0 (6.0.21.37719), X64 RyuJIT\n    |                  Method |     Mean |   Error |   StdDev | Ratio | RatioSD |\n    |------------------------ |---------:|--------:|---------:|------:|--------:|\n    | StringConcatenationTest | 413.0 ns | 8.28 ns | 15.96 ns |  1.00 |    0.00 |\n    |       StringBuilderTest | 275.1 ns | 2.31 ns |  2.16 ns |  0.69 |    0.04 |\n    // * Hints *\n    Outliers\n      StringBenchmarks.StringConcatenationTest: Default -> 7 outliers were removed, 14 outliers were detected (376.78 ns..391.88 ns, 440.79 ns..506.41 ns)\n      StringBenchmarks.StringBuilderTest: Default       -> 2 outliers were detected (274.68 ns, 274.69 ns)\n    // * Legends *\n      Mean    : Arithmetic mean of all measurements\n      Error   : Half of 99.9% confidence interval\n      StdDev  : Standard deviation of all measurements\n      Ratio   : Mean of the ratio distribution ([Current]/[Baseline])\n      RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])\n      1 ns    : 1 Nanosecond (0.000000001 sec)\n    // ***** BenchmarkRunner: End *****\n    // ** Remained 0 benchmark(s) to run **\n    Run time: 00:01:13 (73.35 sec), executed benchmarks: 2\n    Global total time: 00:01:29 (89.71 sec), executed benchmarks: 2\n    // * Artifacts cleanup * \n    ```", "```cs\n    using System.Diagnostics; // Stopwatch\n    using static System.Console; \n    ```", "```cs\n    static void OutputThreadInfo()\n    {\n      Thread t = Thread.CurrentThread;\n      WriteLine(\n        \"Thread Id: {0}, Priority: {1}, Background: {2}, Name: {3}\",\n        t.ManagedThreadId, t.Priority,\n        t.IsBackground, t.Name ?? \"null\");\n    } \n    ```", "```cs\n    static void MethodA()\n    {\n      WriteLine(\"Starting Method A...\");\n      OutputThreadInfo();\n      Thread.Sleep(3000); // simulate three seconds of work\n      WriteLine(\"Finished Method A.\");\n    }\n    static void MethodB()\n    {\n      WriteLine(\"Starting Method B...\");\n      OutputThreadInfo();\n      Thread.Sleep(2000); // simulate two seconds of work\n      WriteLine(\"Finished Method B.\");\n    }\n    static void MethodC()\n    {\n      WriteLine(\"Starting Method C...\");\n      OutputThreadInfo();\n      Thread.Sleep(1000); // simulate one second of work\n      WriteLine(\"Finished Method C.\");\n    } \n    ```", "```cs\n    OutputThreadInfo();\n    Stopwatch timer = Stopwatch.StartNew();\n    WriteLine(\"Running methods synchronously on one thread.\"); \n    MethodA();\n    MethodB();\n    MethodC();\n    WriteLine($\"{timer.ElapsedMilliseconds:#,##0}ms elapsed.\"); \n    ```", "```cs\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Running methods synchronously on one thread.\n    Starting Method A...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method A.\n    Starting Method B...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method B.\n    Starting Method C...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method C.\n    6,017ms elapsed. \n    ```", "```cs\n    OutputThreadInfo();\n    Stopwatch timer = Stopwatch.StartNew();\n    **/***\n    WriteLine(\"Running methods synchronously on one thread.\");\n    MethodA();\n    MethodB();\n    MethodC();\n    ***/**\n    **WriteLine(****\"Running methods asynchronously on multiple threads.\"****);** \n    **Task taskA =** **new****(MethodA);**\n    **taskA.Start();**\n    **Task taskB = Task.Factory.StartNew(MethodB);** \n    **Task taskC = Task.Run(MethodC);**\n    WriteLine($\"{timer.ElapsedMilliseconds:#,##0}ms elapsed.\"); \n    ```", "```cs\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Running methods asynchronously on multiple threads.\n    Starting Method A...\n    Thread Id: 4, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Starting Method C...\n    Thread Id: 7, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Starting Method B...\n    Thread Id: 6, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    6ms elapsed. \n    ```", "```cs\n    Task[] tasks = { taskA, taskB, taskC };\n    Task.WaitAll(tasks); \n    ```", "```cs\n    Id: 1, Priority: Normal, Background: False, Name: null\n    Running methods asynchronously on multiple threads.\n    Starting Method A...\n    Id: 6, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Starting Method B...\n    Id: 7, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Starting Method C...\n    Id: 4, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Finished Method C.\n    Finished Method B.\n    Finished Method A.\n    3,013ms elapsed. \n    ```", "```cs\n    static decimal CallWebService()\n    {\n      WriteLine(\"Starting call to web service...\");\n      OutputThreadInfo();\n      Thread.Sleep((new Random()).Next(2000, 4000));\n      WriteLine(\"Finished call to web service.\");\n      return 89.99M;\n    }\n    static string CallStoredProcedure(decimal amount)\n    {\n      WriteLine(\"Starting call to stored procedure...\");\n      OutputThreadInfo();\n      Thread.Sleep((new Random()).Next(2000, 4000));\n      WriteLine(\"Finished call to stored procedure.\");\n      return $\"12 products cost more than {amount:C}.\";\n    } \n    ```", "```cs\n    WriteLine(\"Passing the result of one task as an input into another.\"); \n    Task<string> taskServiceThenSProc = Task.Factory\n      .StartNew(CallWebService) // returns Task<decimal>\n      .ContinueWith(previousTask => // returns Task<string>\n        CallStoredProcedure(previousTask.Result));\n    WriteLine($\"Result: {taskServiceThenSProc.Result}\"); \n    ```", "```cs\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Passing the result of one task as an input into another.\n    Starting call to web service...\n    Thread Id: 4, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Finished call to web service.\n    Starting call to stored procedure...\n    Thread Id: 6, Priority: Normal, Background: True, Name: .NET ThreadPool Worker\n    Finished call to stored procedure.\n    Result: 12 products cost more than £89.99.\n    5,463ms elapsed. \n    ```", "```cs\n    static void OuterMethod()\n    {\n      WriteLine(\"Outer method starting...\");\n      Task innerTask = Task.Factory.StartNew(InnerMethod);\n      WriteLine(\"Outer method finished.\");\n    }\n    static void InnerMethod()\n    {\n      WriteLine(\"Inner method starting...\");\n      Thread.Sleep(2000);\n      WriteLine(\"Inner method finished.\");\n    } \n    ```", "```cs\n    Task outerTask = Task.Factory.StartNew(OuterMethod);\n    outerTask.Wait();\n    WriteLine(\"Console app is stopping.\"); \n    ```", "```cs\n    Outer method starting...\n    Inner method starting...\n    Outer method finished.\n    Console app is stopping. \n    ```", "```cs\n    Task innerTask = Task.Factory.StartNew(InnerMethod,\n      **TaskCreationOptions.AttachedToParent**); \n    ```", "```cs\n    Outer method starting...\n    Inner method starting...\n    Outer method finished.\n    Inner method finished.\n    Console app is stopping. \n    ```", "```cs\nusing System.Text.RegularExpressions;\nnamespace Packt.Shared;\npublic static class StringExtensions\n{\n  public static Task<bool> IsValidXmlTagAsync(this string input)\n  {\n    if (input == null)\n    {\n      return Task.FromException<bool>(\n        new ArgumentNullException(\"Missing input parameter\"));\n    }\n    if (input.Length == 0)\n    {\n      return Task.FromException<bool>(\n        new ArgumentException(\"input parameter is empty.\"));\n    }\n    return Task.FromResult(Regex.IsMatch(input,\n      @\"^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$\"));\n  }\n  // other methods\n} \n```", "```cs\npublic Task DeleteCustomerAsync()\n{\n  // ...\n  return Task.CompletedTask;\n} \n```", "```cs\n    static void MethodA()\n    {\n      for (int i = 0; i < 5; i++)\n      {\n        Thread.Sleep(SharedObjects.Random.Next(2000));\n        SharedObjects.Message += \"A\";\n        Write(\".\");\n      }\n    }\n    static void MethodB()\n    {\n      for (int i = 0; i < 5; i++)\n      {\n        Thread.Sleep(SharedObjects.Random.Next(2000));\n        SharedObjects.Message += \"B\";\n        Write(\".\");\n      }\n    }\n    static class SharedObjects\n    {\n      public static Random Random = new();\n      public static string? Message; // a shared resource\n    } \n    ```", "```cs\n    WriteLine(\"Please wait for the tasks to complete.\");\n    Stopwatch watch = Stopwatch.StartNew();\n    Task a = Task.Factory.StartNew(MethodA);\n    Task b = Task.Factory.StartNew(MethodB);\n\n    Task.WaitAll(new Task[] { a, b });\n    WriteLine();\n    WriteLine($\"Results: {SharedObjects.Message}.\");\n    WriteLine($\"{watch.ElapsedMilliseconds:N0} elapsed milliseconds.\"); \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BABABAABBA.\n    5,753 elapsed milliseconds. \n    ```", "```cs\n    public static object Conch = new(); \n    ```", "```cs\n    **lock** **(SharedObjects.Conch)**\n    **{**\n      for (int i = 0; i < 5; i++)\n      {\n        Thread.Sleep(SharedObjects.Random.Next(2000));\n        SharedObjects.Message += \"A\";\n        Write(\".\");\n      }\n    **}** \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BBBBBAAAAA.\n    10,345 elapsed milliseconds. \n    ```", "```cs\nlock (SharedObjects.Conch)\n{\n  // work with shared resource\n} \n```", "```cs\ntry\n{\n  Monitor.Enter(SharedObjects.Conch);\n  // work with shared resource\n}\nfinally\n{\n  Monitor.Exit(SharedObjects.Conch);\n} \n```", "```cs\n    **try**\n    **{**\n    **if** **(Monitor.TryEnter(SharedObjects.Conch, TimeSpan.FromSeconds(****15****)))**\n      {\n        for (int i = 0; i < 5; i++)\n        {\n          Thread.Sleep(SharedObjects.Random.Next(2000));\n          SharedObjects.Message += \"A\";\n          Write(\".\");\n        }\n      }\n    **else**\n     **{**\n     **WriteLine(****\"Method A timed out when entering a monitor on conch.\"****);**\n     **}**\n    **}**\n    **finally**\n    **{**\n     **Monitor.Exit(SharedObjects.Conch);**\n    **}** \n    ```", "```cs\n// event delegate field\npublic event EventHandler Shout;\n// conch\nprivate object eventLock = new();\n// method\npublic void Poke()\n{\n  lock (eventLock) // bad idea\n  {\n    // if something is listening...\n    if (Shout != null)\n    {\n      // ...then call the delegate to raise the event\n      Shout(this, EventArgs.Empty);\n    }\n  }\n} \n```", "```cs\nint x = 3;\nx++; // is this an atomic CPU operation? \n```", "```cs\n    public static int Counter; // another shared resource \n    ```", "```cs\n    Interlocked.Increment(ref SharedObjects.Counter); \n    ```", "```cs\n    WriteLine($\"{SharedObjects.Counter} string modifications.\"); \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BBBBBAAAAA.\n    13,531 elapsed milliseconds.\n    **10 string modifications.** \n    ```", "```cs\n    using static System.Console; \n    ```", "```cs\n    HttpClient client = new();\n    HttpResponseMessage response =\n      await client.GetAsync(\"http://www.apple.com/\");\n    WriteLine(\"Apple's home page has {0:N0} bytes.\",\n      response.Content.Headers.ContentLength); \n    ```", "```cs\n    Program.cs(14,9): error CS4033: The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'. [/Users/markjprice/Code/ Chapter12/AsyncConsole/AsyncConsole.csproj] \n    ```", "```cs\n    Apple's home page has 40,252 bytes. \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>WinExe</OutputType>\n        <TargetFramework>net6.0-windows</TargetFramework>\n        <Nullable>enable</Nullable>\n        <UseWPF>true</UseWPF>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Include=****\"Microsoft.Data.SqlClient\"** **Version=****\"3.0.0\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    <Grid>\n    **<****StackPanel****>**\n    **<****Button****Name****=****\"GetEmployeesSyncButton\"**\n    **Click****=****\"GetEmployeesSyncButton_Click\"****>**\n     **Get Employees Synchronously****</****Button****>**\n    **<****Button****Name****=****\"GetEmployeesAsyncButton\"**\n    **Click****=****\"GetEmployeesAsyncButton_Click\"****>**\n     **Get Employees Asynchronously****</****Button****>**\n    **<****TextBox****HorizontalAlignment****=****\"Stretch\"****Text****=****\"Type in here\"** **/>**\n    **<****ListBox****Name****=****\"EmployeesListBox\"****Height****=****\"400\"** **/>**\n    **</****StackPanel****>**\n    </Grid> \n    ```", "```cs\n    private const string connectionString = \n      \"Data Source=.;\" +\n      \"Initial Catalog=Northwind;\" +\n      \"Integrated Security=true;\" +\n      \"MultipleActiveResultSets=true;\";\n    private const string sql =\n      \"WAITFOR DELAY '00:00:05';\" +\n      \"SELECT EmployeeId, FirstName, LastName FROM Employees\";\n    private void GetEmployeesSyncButton_Click(object sender, RoutedEventArgs e)\n    {\n      Stopwatch timer = Stopwatch.StartNew();\n      using (SqlConnection connection = new(connectionString))\n      {\n        connection.Open();\n        SqlCommand command = new(sql, connection);\n        SqlDataReader reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n          string employee = string.Format(\"{0}: {1} {2}\",\n            reader.GetInt32(0), reader.GetString(1), reader.GetString(2));\n          EmployeesListBox.Items.Add(employee);\n        }\n        reader.Close();\n        connection.Close();\n      }\n      EmployeesListBox.Items.Add($\"Sync: {timer.ElapsedMilliseconds:N0}ms\");\n    }\n    private async void GetEmployeesAsyncButton_Click(\n      object sender, RoutedEventArgs e)\n    {\n      Stopwatch timer = Stopwatch.StartNew();\n      using (SqlConnection connection = new(connectionString))\n      {\n        await connection.OpenAsync();\n        SqlCommand command = new(sql, connection);\n        SqlDataReader reader = await command.ExecuteReaderAsync();\n        while (await reader.ReadAsync())\n        {\n          string employee = string.Format(\"{0}: {1} {2}\",\n            await reader.GetFieldValueAsync<int>(0), \n            await reader.GetFieldValueAsync<string>(1), \n            await reader.GetFieldValueAsync<string>(2));\n          EmployeesListBox.Items.Add(employee);\n        }\n        await reader.CloseAsync();\n        await connection.CloseAsync();\n      }\n      EmployeesListBox.Items.Add($\"Async: {timer.ElapsedMilliseconds:N0}ms\");\n    } \n    ```", "```cs\n    using static System.Console; // WriteLine() \n    ```", "```cs\n    async static IAsyncEnumerable<int> GetNumbersAsync()\n    {\n      Random r = new();\n      // simulate work\n      await Task.Delay(r.Next(1500, 3000));\n      yield return r.Next(0, 1001);\n      await Task.Delay(r.Next(1500, 3000));\n      yield return r.Next(0, 1001);\n      await Task.Delay(r.Next(1500, 3000));\n      yield return r.Next(0, 1001);\n    } \n    ```", "```cs\n    await foreach (int number in GetNumbersAsync())\n    {\n      WriteLine($\"Number: {number}\");\n    } \n    ```", "```cs\n    Number: 509\n    Number: 813\n    Number: 307 \n    ```"]