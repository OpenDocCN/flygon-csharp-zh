["```cs\n    dotnet new --list \n    ```", "```cs\n    dotnet new --install \"Microsoft.AspNetCore.SpaTemplates\"\n    dotnet new vue \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" \n        Version=\"6.0.0\" />\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.Design\" \n        Version=\"6.0.0\">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>  \n    </ItemGroup> \n    ```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n    ```", "```cs\n    -- Loading resources from Northwind4SQLite.sql \n    SQLite version 3.35.5 2021-04-19 14:49:49\n    Enter \".help\" for usage hints.\n    sqlite> \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Filename=../Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --namespace Packt.Shared --data-annotations \n    ```", "```cs\n    Build started...\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263. \n    ```", "```cs\n// SQLite database provider-generated code\n[Column(TypeName = \"nvarchar (15)\")] \npublic string CategoryName { get; set; } = null!;\n// SQL Server database provider-generated code \n[StringLength(15)]\npublic string CategoryName { get; set; } = null!; \n```", "```cs\n// no runtime validation of non-nullable property\npublic string CategoryName { get; set; } = null!;\n// nullable property\npublic string? Description { get; set; }\n// decorate with attribute to perform runtime validation\n[Required]\npublic string CategoryName { get; set; } = null!; \n```", "```cs\n    [Key]\n    [Column(TypeName = \"nchar (5)\")]\n    **[****RegularExpression(****\"[A-Z]{5}\"****)****]**\n    public string CustomerId { get; set; } \n    ```", "```cs\n    \\[Column\\(TypeName = \"(nchar|nvarchar) \\((.*)\\)\"\\)\\] \n    ```", "```cs\n    $&\\n    [StringLength($2)] \n    ```", "```cs\n    // before\n    [Column(TypeName = \"datetime\")] \n    public byte[] BirthDate { get; set; }\n    // after\n    [Column(TypeName = \"datetime\")]\n    public DateTime? BirthDate { get; set; } \n    ```", "```cs\n    // before\n    [Column(TypeName =  \"money\")] \n    public byte[] Freight { get; set; }\n    // after\n    [Column(TypeName = \"money\")]\n    public decimal? Freight { get; set; } \n    ```", "```cs\n    // before\n    [Column(TypeName = \"bit\")]\n    public byte[] Discontinued { get; set; } = null!;\n    // after\n    [Column(TypeName = \"bit\")]\n    public bool Discontinued { get; set; } \n    ```", "```cs\n    [Key]\n    public **int** CategoryId { get; set; } \n    ```", "```cs\n    **[****Required****]**\n    [Column(TypeName = \"nvarchar (15)\")]\n    [StringLength(15)]\n    public string CategoryName { get; set; } \n    ```", "```cs\n    **[****Required****]**\n    [Column(TypeName = \"nvarchar (40)\")]\n    [StringLength(40)]\n    public string CompanyName { get; set; } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.SQLite\" \n        Version=\"6.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\Northwind.Common.EntityModels.Sqlite\\Northwind.Common\n    .EntityModels.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    public NorthwindContext(DbContextOptions<NorthwindContext> options)\n      : base(options)\n    {\n    } \n    ```", "```cs\n    modelBuilder.Entity<Supplier>(entity =>\n    {\n      entity.Property(e => e.SupplierId).ValueGeneratedNever();\n    }); \n    ```", "```cs\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<OrderDetail>(entity =>\n      {\n        entity.HasKey(e => new { e.OrderId, e.ProductId });\n        entity.HasOne(d => d.Order)\n          .WithMany(p => p.OrderDetails)\n          .HasForeignKey(d => d.OrderId)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n        entity.HasOne(d => d.Product)\n          .WithMany(p => p.OrderDetails)\n          .HasForeignKey(d => d.ProductId)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n      });\n      modelBuilder.Entity<Product>()\n        .Property(product => product.UnitPrice)\n        .HasConversion<double>();\n      OnModelCreatingPartial(modelBuilder);\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // UseSqlite\n    using Microsoft.Extensions.DependencyInjection; // IServiceCollection\n    namespace Packt.Shared;\n    public static class NorthwindContextExtensions\n    {\n      /// <summary>\n      /// Adds NorthwindContext to the specified IServiceCollection. Uses the Sqlite database provider.\n      /// </summary>\n      /// <param name=\"services\"></param>\n      /// <param name=\"relativePath\">Set to override the default of \"..\"</param>\n      /// <returns>An IServiceCollection that can be used to add more services.</returns>\n      public static IServiceCollection AddNorthwindContext(\n        this IServiceCollection services, string relativePath = \"..\")\n      {\n        string databasePath = Path.Combine(relativePath, \"Northwind.db\");\n        services.AddDbContext<NorthwindContext>(options =>\n          options.UseSqlite($\"Data Source={databasePath}\")\n        );\n        return services;\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" \n        Version=\"6.0.0\" />\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.Design\" \n        Version=\"6.0.0\">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>  \n    </ItemGroup> \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;\" Microsoft.EntityFrameworkCore.SqlServer --namespace Packt.Shared --data-annotations \n    ```", "```cs\n    [Key]\n    [StringLength(5)]\n    **[****RegularExpression(****\"[A-Z]{5}\"****)****]** \n    public string CustomerId { get; set; } = null!; \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" \n        Version=\"6.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\Northwind.Common.EntityModels.SqlServer\\Northwind.Common\n    .EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // UseSqlServer\n    using Microsoft.Extensions.DependencyInjection; // IServiceCollection\n    namespace Packt.Shared;\n    public static class NorthwindContextExtensions\n    {\n      /// <summary>\n      /// Adds NorthwindContext to the specified IServiceCollection. Uses the SqlServer database provider.\n      /// </summary>\n      /// <param name=\"services\"></param>\n      /// <param name=\"connectionString\">Set to override the default.</param>\n      /// <returns>An IServiceCollection that can be used to add more services.</returns>\n      public static IServiceCollection AddNorthwindContext(\n        this IServiceCollection services, string connectionString = \n          \"Data Source=.;Initial Catalog=Northwind;\"\n          + \"Integrated Security=true;MultipleActiveResultsets=true;\")\n      {\n        services.AddDbContext<NorthwindContext>(options =>\n          options.UseSqlServer(connectionString));\n        return services;\n      }\n    } \n    ```"]