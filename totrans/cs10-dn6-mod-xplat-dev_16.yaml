- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Building and Consuming Web Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和消费Web服务
- en: This chapter is about learning how to build web services (aka HTTP or REST services)
    using the ASP.NET Core Web API and consuming web services using HTTP clients that
    could be any other type of .NET app, including a website or a mobile or desktop
    app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于学习如何使用ASP.NET Core Web API构建Web服务（即HTTP或REST服务）以及使用HTTP客户端消费Web服务，这些客户端可以是任何类型的.NET应用，包括网站、移动或桌面应用。
- en: This chapter requires knowledge and skills that you learned in *Chapter 10*,
    *Working with Data Using Entity Framework Core*, and *Chapters* *13* to *15*,
    about practical applications of C# and .NET and building websites using ASP.NET
    Core.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您具备在*第10章*，*使用Entity Framework Core处理数据*，以及*第13章*至*第15章*中关于C#和.NET的实际应用以及使用ASP.NET
    Core构建网站的知识和技能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Building web services using ASP.NET Core Web API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core Web API构建Web服务
- en: Documenting and testing web services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档化和测试Web服务
- en: Consuming web services using HTTP clients
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP客户端消费Web服务
- en: Implementing advanced features for web services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Web服务实现高级功能
- en: Building web services using minimal APIs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最小API构建Web服务
- en: Building web services using ASP.NET Core Web API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core Web API构建Web服务
- en: Before we build a modern web service, we need to cover some background to set
    the context for this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建现代Web服务之前，需要先介绍一些背景知识，为本章设定上下文。
- en: Understanding web service acronyms
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Web服务缩略语
- en: Although HTTP was designed originally to request and respond with HTML and other
    resources for humans to look at, it is also good for building services.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管HTTP最初设计用于请求和响应HTML及其他供人类查看的资源，但它也非常适合构建服务。
- en: 'Roy Fielding stated in his doctoral dissertation, describing the **Representational
    State Transfer** (**REST**) architectural style, that the HTTP standard would
    be good for building services because it defines the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伊·菲尔丁在其博士论文中描述**表述性状态转移**(**REST**)架构风格时指出，HTTP标准适合构建服务，因为它定义了以下内容：
- en: URIs to uniquely identify resources, like `https://localhost:5001/api/products/23`.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一标识资源的URI，如`https://localhost:5001/api/products/23`。
- en: Methods to perform common tasks on those resources, like `GET`, `POST`, `PUT`,
    and `DELETE`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对这些资源执行常见任务的方法，如`GET`、`POST`、`PUT`和`DELETE`。
- en: 'The ability to negotiate the media type of content exchanged in requests and
    responses, such as XML and JSON. Content negotiation happens when the client specifies
    a request header like `Accept: application/xml,*/*;q=0.8`. The default response
    format used by the ASP.NET Core Web API is JSON, which means one of the response
    headers would be `Content-Type: application/json; charset=utf-8`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '请求和响应中交换的内容媒体类型协商能力，如XML和JSON。内容协商发生在客户端指定类似`Accept: application/xml,*/*;q=0.8`的请求头时。ASP.NET
    Core Web API默认的响应格式是JSON，这意味着其中一个响应头会是`Content-Type: application/json; charset=utf-8`。'
- en: '**Web services** use the HTTP communication standard, so they are sometimes
    called HTTP or RESTful services. HTTP or RESTful services are what this chapter
    is about.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web服务**采用HTTP通信标准，因此有时被称为HTTP或RESTful服务。本章讨论的就是HTTP或RESTful服务。'
- en: Web services can also mean **Simple Object Access Protocol** (**SOAP**) services
    that implement some of the **WS-* standards**. These standards enable clients
    and services implemented on different systems to communicate with each other.
    The WS-* standards were originally defined by IBM with input from other companies
    like Microsoft.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务也可指实现部分**WS-*标准**的**简单对象访问协议**(**SOAP**)服务。这些标准使不同系统上实现的客户端和服务能相互通信。WS-*标准最初由IBM定义，微软等其他公司也参与了制定。
- en: Understanding Windows Communication Foundation (WCF)
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Windows Communication Foundation (WCF)
- en: .NET Framework 3.0 and later includes a **remote procedure call** (**RPC**)
    technology named **Windows Communication Foundation** (**WCF**). RPC technologies
    enable code on one system to execute code on another over a network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework 3.0及更高版本包含名为**Windows Communication Foundation**(**WCF**)的**远程过程调用**(**RPC**)技术。RPC技术使一个系统上的代码能通过网络在另一系统上执行代码。
- en: WCF makes it easy for developers to create services, including SOAP services
    that implement WS-* standards. It later also supported building Web/HTTP/REST-style
    services, but it was rather over-engineered if that was all you needed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WCF使开发者能轻松创建服务，包括实现WS-*标准的SOAP服务。后来它也支持构建Web/HTTP/REST风格的服务，但如果仅需要这些，它显得过于复杂。
- en: 'If you have existing WCF services and you would like to port them to modern
    .NET, then there is an open-source project that had its first **General Availability**
    (**GA**) release in February 2021\. You can read about it at the following link:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有现有的WCF服务并希望将它们迁移到现代.NET，那么有一个开源项目在2021年2月发布了其首个**正式发布版**（**GA**）。你可以在以下链接中了解更多信息：
- en: '[https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release](https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release](https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release)'
- en: An alternative to WCF
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代WCF的方案
- en: The Microsoft recommended alternative to WCF is **gRPC**. gRPC is a modern cross-platform
    open-source RPC framework created by Google (unofficially the "g" in gRPC). You
    will learn more about gRPC in *Chapter 18*, *Building and Consuming Specialized
    Services*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软推荐的WCF替代方案是**gRPC**。gRPC是一种现代的跨平台开源RPC框架，由谷歌创建（非官方地，“g”代表gRPC）。你将在*第18章*，*构建和消费专业化服务*中了解更多关于gRPC的信息。
- en: Understanding HTTP requests and responses for Web APIs
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Web API的HTTP请求和响应
- en: HTTP defines standard types of requests and standard codes to indicate a type
    of response. Most of them can be used to implement Web API services.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP定义了标准的请求类型和标准代码来指示响应类型。大多数这些类型和代码可用于实现Web API服务。
- en: 'The most common type of request is `GET`, to retrieve a resource identified
    by a unique path, with additional options like what media type is acceptable,
    set as request headers, as shown in the following example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的请求类型是`GET`，用于检索由唯一路径标识的资源，并附带如可接受的媒体类型等额外选项，这些选项作为请求头设置，如下例所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Common responses include success and multiple types of failure, as shown in
    the following table:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 常见响应包括成功和多种失败类型，如下表所示：
- en: '| Status code | Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 状态码 | 描述 |'
- en: '| `200 OK` | The path was correctly formed, the resource was successfully found,
    serialized into an acceptable media type, and then returned in the response body.
    The response headers specify the `Content-Type`, `Content-Length`, and `Content-Encoding`,
    for example, GZIP. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `200 成功` | 路径正确形成，资源成功找到，序列化为可接受的媒体类型，然后返回在响应体中。响应头指定`Content-Type`、`Content-Length`和`Content-Encoding`，例如GZIP。'
- en: '| `301 Moved Permanently` | Over time a web service may change its resource
    model including the path used to identify an existing resource. The web service
    can indicate the new path by returning this status code and a response header
    named `Location` that has the new path. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `301 永久移动` | 随着时间的推移，Web服务可能会更改其资源模型，包括用于标识现有资源的路径。Web服务可以通过返回此状态码和一个名为`Location`的响应头来指示新路径，该响应头包含新路径。'
- en: '| `302 Found` | Similar to `301`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `302 找到` | 类似于`301`。'
- en: '| `304 Not Modified` | If the request included the `If-Modified-Since` header,
    then the web service can respond with this status code. The response body is empty
    because the client should use its cached copy of the resource. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `304 未修改` | 如果请求包含`If-Modified-Since`头，则Web服务可以响应此状态码。响应体为空，因为客户端应使用其缓存的资源副本。'
- en: '| `400 Bad Request` | The request was invalid, for example, it used a path
    for a product using an integer ID where the ID value is missing. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `400 错误请求` | 请求无效，例如，它使用了一个整数ID的产品路径，但ID值缺失。'
- en: '| `401 Unauthorized` | The request was valid, the resource was found, but the
    client did not supply credentials or is not authorized to access that resource.
    Re-authenticating may enable access, for example, by adding or changing the `Authorization`
    request header. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `401 未授权` | 请求有效，资源已找到，但客户端未提供凭证或无权访问该资源。重新认证可能会启用访问，例如，通过添加或更改`Authorization`请求头。'
- en: '| `403 Forbidden` | The request was valid, the resource was found, but the
    client is not authorized to access that resource. Re-authenticating will not fix
    the issue. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `403 禁止访问` | 请求有效，资源已找到，但客户端无权访问该资源。重新认证也无法解决问题。'
- en: '| `404 Not Found` | The request was valid, but the resource was not found.
    The resource may be found if the request is repeated later. To indicate that a
    resource will never be found, return `410 Gone`. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `404 未找到` | 请求有效，但资源未找到。如果稍后重复请求，资源可能会被找到。若要表明资源将永远无法找到，返回`410 已删除`。'
- en: '| `406 Not Acceptable` | If the request has an `Accept` header that only lists
    media types that the web service does not support. For example, if the client
    requests JSON but the web service can only return XML. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `406 不可接受` | 如果请求具有仅列出网络服务不支持的媒体类型的`Accept`头。例如，如果客户端请求JSON但网络服务只能返回XML。'
- en: '| `451 Unavailable for Legal Reasons` | A website hosted in the USA might return
    this for requests coming from Europe to avoid having to comply with the General
    Data Protection Regulation (GDPR). The number was chosen as a reference to the
    novel Fahrenheit 451 in which books are banned and burned. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `451 因法律原因不可用` | 在美国托管的网站可能会为来自欧洲的请求返回此状态，以避免不得不遵守《通用数据保护条例》（GDPR）。该数字的选择是对小说《华氏451度》的引用，其中书籍被禁止和焚烧。'
- en: '| `500 Server Error` | The request was valid, but something went wrong on the
    server side while processing the request. Retrying again later might work. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `500 服务器错误` | 请求有效，但在处理请求时服务器端出现问题。稍后再试可能有效。'
- en: '| `503 Service Unavailable` | The web service is busy and cannot handle the
    request. Trying again later might work. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `503 服务不可用` | 网络服务正忙，无法处理请求。稍后再试可能有效。'
- en: Other common types of HTTP requests include `POST`, `PUT`, `PATCH`, or `DELETE`
    that create, modify, or delete resources.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见的HTTP请求类型包括`POST`、`PUT`、`PATCH`或`DELETE`，用于创建、修改或删除资源。
- en: 'To create a new resource, you might make a `POST` request with a body that
    contains the new resource, as shown in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新资源，您可能会发出带有包含新资源的正文的`POST`请求，如下所示：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To create a new resource or update an existing resource, you might make a `PUT`
    request with a body that contains a whole new version of the existing resource,
    and if the resource does not exist, it is created, or if it does exist, it is
    replaced (sometimes called an **upsert** operation), as shown in the following
    code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新资源或更新现有资源，您可能会发出带有包含现有资源全新版本的正文的`PUT`请求，如果资源不存在，则创建它，如果存在，则替换它（有时称为**upsert**操作），如下所示：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To update an existing resource more efficiently, you might make a `PATCH` request
    with a body that contains an object with only the properties that need changing,
    as shown in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要更有效地更新现有资源，您可能会发出带有包含仅需要更改的属性的对象的正文的`PATCH`请求，如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To delete an existing resource, you might make a `DELETE` request, as shown
    in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除现有资源，您可能会发出`DELETE`请求，如下所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As well as the responses shown in the table above for a `GET` request, all
    the types of requests that create, modify, or delete a resource have additional
    possible common responses, as shown in the following table:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述表格中针对`GET`请求的响应外，所有创建、修改或删除资源的请求类型都有额外的可能的常见响应，如下表所示：
- en: '| Status code | Description |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 状态码 | 描述'
- en: '| `201 Created` | The new resource was created successfully, the response header
    named `Location` contains its path, and the response body contains the newly created
    resource. Immediately `GET`-ing the resource should return `200`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `201 已创建` | 新资源已成功创建，响应头名为`Location`包含其路径，响应正文包含新创建的资源。立即`GET`资源应返回`200`。'
- en: '| `202 Accepted` | The new resource cannot be created immediately so the request
    is queued for later processing and immediately `GET`-ing the resource might return
    `404`. The body can contain a resource that points to some form of status checker
    or an estimate of when the resource will become available. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `202 已接受` | 新资源无法立即创建，因此请求被排队等待稍后处理，立即`GET`资源可能会返回`404`。正文可以包含指向某种状态检查器或资源可用时间估计的资源。'
- en: '| `204 No Content` | Commonly used in response to a `DELETE` request since
    returning the resource in the body after deleting it does not usually make sense!
    Sometimes used in response to `POST`, `PUT`, or `PATCH` requests if the client
    does not need to confirm that the request was processed correctly. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `204 无内容` | 通常用于响应`DELETE`请求，因为在删除后在正文中返回资源通常没有意义！有时用于响应`POST`、`PUT`或`PATCH`请求，如果客户端不需要确认请求是否正确处理。'
- en: '| `405 Method Not Allowed` | Returned when the request used a method that is
    not supported. For example, a web service designed to be read-only may explicitly
    disallow `PUT`, `DELETE`, and so on. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `405 方法不允许` | 当请求使用的方法不被支持时返回。例如，设计为只读的网络服务可能明确禁止`PUT`、`DELETE`等。'
- en: '| `415 Unsupported Media Type` | Returned when the resource in the request
    body uses a media type that the web service cannot handle. For example, if the
    body contains a resource in XML format but the web service can only process JSON.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `415 Unsupported Media Type` | 当请求体中的资源使用Web服务无法处理的媒体类型时返回。例如，如果主体包含XML格式的资源，但Web服务只能处理JSON。
    |'
- en: Creating an ASP.NET Core Web API project
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ASP.NET Core Web API项目
- en: 'We will build a web service that provides a way to work with data in the Northwind
    database using ASP.NET Core so that the data can be used by any client application
    on any platform that can make HTTP requests and receive HTTP responses:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个Web服务，该服务提供了一种使用ASP.NET Core在Northwind数据库中处理数据的方法，以便数据可以被任何能够发出HTTP请求并在任何平台上接收HTTP响应的客户端应用程序使用：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加新项目，如以下列表所定义：
- en: 'Project template: **ASP.NET Core Web API** / `webapi`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web API** / `webapi`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.WebApi`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.WebApi`
- en: 'Other Visual Studio options: **Authentication Type**: None, **Configure for
    HTTPS**: selected, **Enable Docker**: cleared, **Enable** **OpenAPI support**:
    selected.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他Visual Studio选项：**身份验证类型**：无，**为HTTPS配置**：已选中，**启用Docker**：已清除，**启用OpenAPI支持**：已选中。
- en: In Visual Studio Code, select `Northwind.WebApi` as the active OmniSharp project.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Northwind.WebApi`作为活动的OmniSharp项目。
- en: Build the `Northwind.WebApi` project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.WebApi`项目。
- en: 'In the `Controllers` folder, open and review `WeatherForecastController.cs`,
    as shown in the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，打开并审查`WeatherForecastController.cs`，如下所示：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While reviewing the preceding code, note the following:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在审查前面的代码时，请注意以下几点：
- en: The `Controller` class inherits from `ControllerBase`. This is simpler than
    the `Controller` class used in MVC because it does not have methods like `View`
    to generate HTML responses by passing a view model to a Razor file.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类`Controller`继承自`ControllerBase`。这比MVC中使用的`Controller`类更简单，因为它没有像`View`这样的方法，通过将视图模型传递给Razor文件来生成HTML响应。
- en: The `[Route]` attribute registers the `/weatherforecast` relative URL for clients
    to use to make HTTP requests that will be handled by this controller. For example,
    an HTTP request for `https://localhost:5001/weatherforecast/` would be handled
    by this controller. Some developers like to prefix the controller name with `api/`,
    which is a convention to differentiate between MVC and Web API in mixed projects.
    If you use `[controller]` as shown, it uses the characters before `Controller`
    in the class name, in this case, `WeatherForecast`, or you can simply enter a
    different name without the square brackets, for example, `[Route("api/forecast")]`.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Route]`属性为客户端注册了`/weatherforecast`相对URL，用于发出将由该控制器处理的HTTP请求。例如，对`https://localhost:5001/weatherforecast/`的HTTP请求将由该控制器处理。一些开发人员喜欢在控制器名称前加上`api/`，这是一种区分混合项目中MVC和Web
    API的约定。如果使用`[controller]`，如所示，它使用类名中`Controller`之前的字符，在本例中为`WeatherForecast`，或者您可以简单地输入一个不同的名称，不带方括号，例如`[Route("api/forecast")]`。'
- en: The `[ApiController]` attribute was introduced with ASP.NET Core 2.1 and it
    enables REST-specific behavior for controllers, like automatic HTTP `400` responses
    for invalid models, as you will see later in this chapter.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ApiController]`属性是在ASP.NET Core 2.1中引入的，它为控制器启用了REST特定的行为，例如对于无效模型的自动HTTP
    `400`响应，如本章后面将看到的。'
- en: The `[HttpGet]` attribute registers the `Get` method in the `Controller` class
    to respond to HTTP `GET` requests, and its implementation uses the shared `Random`
    object to return an array of `WeatherForecast` objects with random temperatures
    and summaries like `Bracing` or `Balmy` for the next five days of weather.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpGet]`属性将`Controller`类中的`Get`方法注册为响应HTTP `GET`请求，其实现使用共享的`Random`对象返回一个`WeatherForecast`对象数组，其中包含未来五天的随机温度和摘要，如`Bracing`或`Balmy`。'
- en: 'Add a second `Get` method that allows the call to specify how many days ahead
    the forecast should be by implementing the following:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个`Get`方法，该方法允许调用指定预测应提前多少天，通过实现以下内容：
- en: Add a comment above the original method to show the action method and URL path
    that it responds to.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在原始方法上方添加注释，以显示其响应的操作方法和URL路径。
- en: Add a new method with an integer parameter named `days`.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个带有整数参数`days`的新方法。
- en: Cut and paste the original `Get` method implementation code statements into
    the new `Get` method.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将原始`Get`方法实现代码语句剪切并粘贴到新的`Get`方法中。
- en: Modify the new method to create an `IEnumerable` of integers up to the number
    of days requested, and modify the original `Get` method to call the new `Get`
    method and pass the value `5`.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改新方法以创建一个整数`IEnumerable`，其上限为请求的天数，并修改原始`Get`方法以调用新`Get`方法并传递值`5`。
- en: 'Your methods should be as shown highlighted in the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你的方法应如以下代码中突出显示的那样：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the `[HttpGet]` attribute, note the route format pattern `{days:int}` that
    constrains the `days` parameter to `int` values.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[HttpGet]`属性中，注意路由格式模式`{days:int}`，它将`days`参数约束为`int`值。
- en: Reviewing the web service's functionality
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查Web服务的功能
- en: 'Now, we will test the web service''s functionality:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将测试Web服务的功能：
- en: 'If you are using Visual Studio, in **Properties**, open the `launchSettings.json`
    file, and note that by default, it will launch the browser and navigate to the
    `/swagger` relative URL path, as shown highlighted in the following markup:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Visual Studio，在**属性**中，打开`launchSettings.json`文件，并注意默认情况下，它将启动浏览器并导航至`/swagger`相对URL路径，如下所示突出显示：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Modify the profile named `Northwind.WebApi` to set `launchBrowser` to `false`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改名为`Northwind.WebApi`的配置文件，将`launchBrowser`设置为`false`。
- en: For the `applicationUrl`, change the random port number for `HTTP` to `5000`
    and for `HTTPS` to `5001`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`applicationUrl`，将随机端口号更改为`HTTP`的`5000`和`HTTPS`的`5001`。
- en: Start the web service project.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务项目。
- en: Start Chrome.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/` and note you will get a `404` status code
    response because we have not enabled static files and there is not an `index.html`,
    nor is there an MVC controller with a route configured, either. Remember that
    this project is not designed for a human to view and interact with, so this is
    expected behavior for a web service.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/`，注意你会收到一个`404`状态码响应，因为我们尚未启用静态文件，也没有`index.html`文件，或者配置了路由的MVC控制器。记住，此项目并非设计为人机交互界面，因此对于Web服务而言，这是预期行为。
- en: The solution on GitHub is configured to use port `5002` because we will change
    its configuration later in the book.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GitHub上的解决方案配置为使用端口`5002`，因为在本书后面我们将更改其配置。
- en: In Chrome, show **Developer tools**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，显示**开发者工具**。
- en: Navigate to `https://localhost:5001/weatherforecast` and note the Web API service
    should return a JSON document with five random weather forecast objects in an
    array, as shown in *Figure 16.1*:![](img/B17442_17_01.png)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/weatherforecast`，注意Web API服务应返回一个包含五个随机天气预报对象的JSON文档数组，如图*16.1*所示：![](img/B17442_17_01.png)
- en: 'Figure 16.1: A request and response from a weather forecast web service'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.1：来自天气预报Web服务的请求与响应
- en: Close **Developer tools**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**开发者工具**。
- en: Navigate to `https://localhost:5001/weatherforecast/14` and note the response
    when requesting a two-week weather forecast, as shown in *Figure 16.2*:![](img/B17442_17_02.png)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/weatherforecast/14`，并注意请求两周天气预报时的响应，如图*16.2*所示：![](img/B17442_17_02.png)
- en: 'Figure 16.2: A two-week weather forecast as a JSON document'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.2：两周天气预报的JSON文档
- en: Close Chrome and shut down the web server.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Creating a web service for the Northwind database
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Northwind数据库创建Web服务
- en: Unlike MVC controllers, Web API controllers do not call Razor views to return
    HTML responses for website visitors to see in browsers. Instead, they use content
    negotiation with the client application that made the HTTP request to return data
    in formats such as XML, JSON, or X-WWW-FORM-URLENCODED in their HTTP response.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与MVC控制器不同，Web API控制器不会调用Razor视图以返回HTML响应供网站访问者在浏览器中查看。相反，它们使用与发起HTTP请求的客户端应用程序的内容协商，在HTTP响应中返回XML、JSON或X-WWW-FORM-URLENCODED等格式的数据。
- en: The client application must then deserialize the data from the negotiated format.
    The most commonly used format for modern web services is **JavaScript Object Notation**
    (**JSON**) because it is compact and works natively with JavaScript in a browser
    when building **Single-Page Applications** (**SPAs**) with client-side technologies
    like Angular, React, and Vue.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序必须随后将数据从协商格式反序列化。现代Web服务最常用的格式是**JavaScript对象表示法**（**JSON**），因为它紧凑且在构建使用Angular、React和Vue等客户端技术的**单页应用程序**（**SPAs**）时，能与浏览器中的JavaScript原生工作。
- en: 'We will reference the Entity Framework Core entity data model for the Northwind
    database that you created in *Chapter 13*, *Introducing Practical Applications
    of C# and .NET*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用你在*第13章*，*C#与.NET实用应用入门*中创建的Northwind数据库的Entity Framework Core实体数据模型：
- en: 'In the `Northwind.WebApi` project, add a project reference to `Northwind.Common.DataContext`
    for either SQLite or SQL Server, as shown in the following markup:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，为SQLite或SQL Server添加对`Northwind.Common.DataContext`的项目引用，如下所示：
- en: '[PRE8]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Build the project and fix any compile errors in your code.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并修复代码中的任何编译错误。
- en: 'Open `Program.cs` and import namespaces for working with web media formatters
    and the shared Packt classes, as shown in the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`并导入用于处理Web媒体格式化程序和共享Packt类的命名空间，如下所示：
- en: '[PRE9]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a statement before the call to `AddControllers` to register the `Northwind`
    database context class (it will use either SQLite or SQL Server depending on which
    database provider you referenced in the project file), as shown in the following
    code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`AddControllers`之前，添加一条语句以注册`Northwind`数据库上下文类（它将根据您在项目文件中引用的数据库提供程序使用SQLite或SQL
    Server），如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the call to `AddControllers`, add a lambda block with statements to write
    the names and supported media types of the default output formatters to the console,
    and then add XML serializer formatters, as shown in the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`AddControllers`时，添加一个lambda块，其中包含将默认输出格式化程序的名称和支持的媒体类型写入控制台的语句，然后添加XML序列化程序格式化程序，如下所示：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Start the web service.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务。
- en: 'In a command prompt or terminal, note that there are four default output formatters,
    including ones that convert `null` values into `204 No Content` and ones to support
    responses that are plain text, byte streams, and JSON, as shown in the following
    output:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，请注意有四种默认的输出格式化程序，包括将`null`值转换为`204 No Content`的程序，以及支持纯文本、字节流和JSON响应的程序，如下所示：
- en: '[PRE12]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Shut down the web server.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: Creating data repositories for entities
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为实体创建数据仓库
- en: 'Defining and implementing a data repository to provide CRUD operations is good
    practice. The CRUD acronym includes the following operations:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 定义和实现提供CRUD操作的数据仓库是良好的实践。CRUD缩写包括以下操作：
- en: C for Create
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C代表创建
- en: R for Retrieve (or Read)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R代表检索（或读取）
- en: U for Update
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: U代表更新
- en: D for Delete
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D代表删除
- en: We will create a data repository for the `Customers` table in Northwind. There
    are only 91 customers in this table, so we will store a copy of the whole table
    in memory to improve scalability and performance when reading customer records.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Northwind中的`Customers`表创建一个数据仓库。该表中只有91个客户，因此我们将整个表的副本存储在内存中，以提高读取客户记录时的可扩展性和性能。
- en: '**Good Practice**: In a real web service, you should use a distributed cache
    like Redis, an open-source data structure store that can be used as a high-performance,
    high-availability database, cache, or message broker.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：在实际的Web服务中，应使用分布式缓存，如Redis，这是一个开源的数据结构存储，可用作高性能、高可用性的数据库、缓存或消息代理。'
- en: 'We will follow modern good practice and make the repository API asynchronous.
    It will be instantiated by a `Controller` class using constructor parameter injection,
    so a new instance is created to handle every HTTP request:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循现代最佳实践，使仓库API异步。它将通过构造函数参数注入由`Controller`类实例化，因此会为每个HTTP请求创建一个新实例：
- en: In the `Northwind.WebApi` project, create a folder named `Repositories`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，创建一个名为`Repositories`的文件夹。
- en: Add two class files to the `Repositories` folder named `ICustomerRepository.cs`
    and `CustomerRepository.cs`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Repositories`文件夹添加两个类文件，名为`ICustomerRepository.cs`和`CustomerRepository.cs`。
- en: 'The `ICustomerRepository` interface will define five methods, as shown in the
    following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ICustomerRepository`接口将定义五个方法，如下所示：'
- en: '[PRE13]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `CustomerRepository` class will implement the five methods, remembering
    that methods that use `await` inside them must be marked as `async`, as shown
    in the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CustomerRepository`类将实现这五个方法，记住，使用`await`的方法必须标记为`async`，如下所示：'
- en: '[PRE14]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implementing a Web API controller
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Web API控制器
- en: There are some useful attributes and methods for implementing a controller that
    returns data instead of HTML.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于返回数据而非HTML的控制器，有一些有用的属性和方法。
- en: With MVC controllers, a route like `/home/index` tells us the controller class
    name and the action method name, for example, the `HomeController` class and the
    `Index` action method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MVC控制器时，像`/home/index`这样的路由告诉我们控制器类名和操作方法名，例如`HomeController`类和`Index`操作方法。
- en: With Web API controllers, a route like `/weatherforecast` only tells us the
    controller class name, for example, `WeatherForecastController`. To determine
    the action method name to execute, we must map HTTP methods like `GET` and `POST`
    to methods in the controller class.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web API控制器，如`/weatherforecast`的路由仅告诉我们控制器类名，例如`WeatherForecastController`。为了确定要执行的操作方法名称，我们必须将HTTP方法（如`GET`和`POST`）映射到控制器类中的方法。
- en: 'You should decorate controller methods with the following attributes to indicate
    the HTTP method that they will respond to:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用以下属性装饰控制器方法，以指示它们将响应的HTTP方法：
- en: '`[HttpGet]`, `[HttpHead]`: These action methods respond to `GET` or `HEAD`
    requests to retrieve a resource and return either the resource and its response
    headers or just the response headers.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpGet]`，`[HttpHead]`：这些操作方法响应`GET`或`HEAD`请求以检索资源，并返回资源及其响应头或仅返回响应头。'
- en: '`[HttpPost]`: This action method responds to `POST` requests to create a new
    resource or perform some other action defined by the service.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpPost]`：此操作方法响应`POST`请求以创建新资源或执行服务定义的其他操作。'
- en: '`[HttpPut]`, `[HttpPatch]`: These action methods respond to `PUT` or `PATCH`
    requests to update an existing resource either by replacing it or updating a subset
    of its properties.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpPut]`，`[HttpPatch]`：这些操作方法响应`PUT`或`PATCH`请求以更新现有资源，无论是替换还是更新其属性的子集。'
- en: '`[HttpDelete]`: This action method responds to `DELETE` requests to remove
    a resource.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpDelete]`：此操作方法响应`DELETE`请求以删除资源。'
- en: '`[HttpOptions]`: This action method responds to `OPTIONS` requests.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpOptions]`：此操作方法响应`OPTIONS`请求。'
- en: Understanding action method return types
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解操作方法返回类型
- en: An action method can return .NET types like a single `string` value, complex
    objects defined by a `class`, `record`, or `struct`, or collections of complex
    objects. The ASP.NET Core Web API will serialize them into the requested data
    format set in the HTTP request `Accept` header, for example, JSON, if a suitable
    serializer has been registered.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 操作方法可以返回.NET类型，如单个`string`值、由`class`、`record`或`struct`定义的复杂对象，或复杂对象的集合。ASP.NET
    Core Web API会将它们序列化为HTTP请求`Accept`头中设置的请求数据格式，例如，如果已注册合适的序列化器，则为JSON。
- en: For more control over the response, there are helper methods that return an
    `ActionResult` wrapper around the .NET type.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更精细地控制响应，有一些辅助方法返回围绕.NET类型的`ActionResult`包装器。
- en: Declare the action method's return type to be `IActionResult` if it could return
    different return types based on inputs or other variables. Declare the action
    method's return type to be `ActionResult<T>` if it will only return a single type
    but with different status codes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作方法可能基于输入或其他变量返回不同的返回类型，则应声明其返回类型为`IActionResult`。如果操作方法将仅返回单个类型但具有不同的状态代码，则应声明其返回类型为`ActionResult<T>`。
- en: '**Good Practice**: Decorate action methods with the `[ProducesResponseType]`
    attribute to indicate all the known types and HTTP status codes that the client
    should expect in a response. This information can then be publicly exposed to
    document how a client should interact with your web service. Think of it as part
    of your formal documentation. Later in this chapter, you will learn how you can
    install a code analyzer to give you warnings when you do not decorate your action
    methods like this.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：使用`[ProducesResponseType]`属性装饰操作方法，以指示客户端应在响应中预期的所有已知类型和HTTP状态代码。此信息随后可以公开，以说明客户端应如何与您的Web服务交互。将其视为正式文档的一部分。本章后面，您将学习如何安装代码分析器，以便在您未按此方式装饰操作方法时给出警告。'
- en: 'For example, an action method that gets a product based on an id parameter
    would be decorated with three attributes – one to indicate that it responds to
    `GET` requests and has an id parameter, and two to indicate what happens when
    it succeeds and when the client has supplied an invalid product ID, as shown in
    the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，根据id参数获取产品的操作方法将装饰有三个属性——一个表示它响应`GET`请求并具有id参数，另外两个表示成功时和客户端提供无效产品ID时的处理方式，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `ControllerBase` class has methods to make it easy to return different
    responses, as shown in the following table:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControllerBase`类具有方法，使其易于返回不同的响应，如下表所示：'
- en: '| Method | Description |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| `Ok` | Returns a `200` status code and a resource converted to the client''s
    preferred format, like JSON or XML. Commonly used in response to a `GET` request.
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `Ok` | 返回`200`状态码和一个转换为客户端首选格式的资源，如JSON或XML。常用于响应`GET`请求。 |'
- en: '| `CreatedAtRoute` | Returns a `201` status code and the path to the new resource.
    Commonly used in response to a `POST` request to create a resource that can be
    performed quickly. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `CreatedAtRoute` | 返回一个`201`状态码和到新资源的路径。通常用于响应`POST`请求以快速创建资源。 |'
- en: '| `Accepted` | Returns a `202` status code to indicate the request is being
    processed but has not completed. Commonly used in response to a `POST`, `PUT`,
    `PATCH`, or `DELETE` request that triggers a background process that takes a long
    time to complete. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `Accepted` | 返回一个`202`状态码以指示请求正在处理但尚未完成。通常用于响应`POST`、`PUT`、`PATCH`或`DELETE`请求，这些请求触发了一个需要很长时间才能完成的背景进程。
    |'
- en: '| `NoContentResult` | Returns a `204` status code and an empty response body.
    Commonly used in response to a `PUT`, `PATCH`, or `DELETE` request when the response
    does not need to contain the affected resource. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `NoContentResult` | 返回一个`204`状态码和一个空的响应主体。通常用于响应`PUT`、`PATCH`或`DELETE`请求，当响应不需要包含受影响的资源时。
    |'
- en: '| `BadRequest` | Returns a `400` status code and an optional message string
    with more details. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `BadRequest` | 返回一个`400`状态码和一个可选的详细信息消息字符串。 |'
- en: '| `NotFound` | Returns a `404` status code and an automatically populated `ProblemDetails`
    body (requires a compatibility version of 2.2 or later). |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `NotFound` | 返回一个`404`状态码和一个自动填充的`ProblemDetails`主体（需要2.2或更高版本的兼容性版本）。 |'
- en: Configuring the customer repository and Web API controller
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置客户仓库和Web API控制器
- en: Now you will configure the repository so that it can be called from within a
    Web API controller.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将配置仓库，以便它可以从Web API控制器内部调用。
- en: You will register a scoped dependency service implementation for the repository
    when the web service starts up and then use constructor parameter injection to
    get it in a new Web API controller for working with customers.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当Web服务启动时，您将为仓库注册一个作用域依赖服务实现，然后使用构造函数参数注入在新Web API控制器中获取它，以便与客户工作。
- en: 'To show an example of differentiating between MVC and Web API controllers using
    routes, we will use the common `/api` URL prefix convention for the customers
    controller:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示使用路由区分MVC和Web API控制器的示例，我们将使用客户控制器的常见`/api`URL前缀约定：
- en: Open `Program.cs` and import the `Northwind.WebApi.Repositories` namespace.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`并导入`Northwind.WebApi.Repositories`命名空间。
- en: 'Add a statement before the call to the `Build` method, which will register
    the `CustomerRepository` for use at runtime as a scoped dependency, as shown highlighted
    in the following code:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`Build`方法之前添加一个语句，该语句将注册`CustomerRepository`以在运行时作为作用域依赖使用，如下所示高亮显示的代码：
- en: '[PRE16]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Good Practice**: Our repository uses a database context that is registered
    as a scoped dependency. You can only use scoped dependencies inside other scoped
    dependencies, so we cannot register the repository as a singleton. You can read
    more about this at the following link: [https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最佳实践**：我们的仓库使用一个注册为作用域依赖的数据库上下文。您只能在其他作用域依赖内部使用作用域依赖，因此我们不能将仓库注册为单例。您可以在以下链接了解更多信息：[https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped)'
- en: In the `Controllers` folder, add a new class named `CustomersController.cs`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，添加一个名为`CustomersController.cs`的新类。
- en: 'In the `CustomersController` class file, add statements to define a Web API
    controller class to work with customers, as shown in the following code:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CustomersController`类文件中，添加语句以定义一个Web API控制器类以与客户工作，如下所示的代码：
- en: '[PRE17]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'While reviewing this Web API controller class, note the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查此Web API控制器类时，请注意以下内容：
- en: The `Controller` class registers a route that starts with `api/` and includes
    the name of the controller, that is, `api/customers`.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`类注册了一个以`api/`开头的路由，并包含控制器的名称，即`api/customers`。'
- en: The constructor uses dependency injection to get the registered repository for
    working with customers.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数使用依赖注入来获取注册的仓库以与客户工作。
- en: There are five action methods to perform CRUD operations on customers—two `GET`
    methods (for all customers or one customer), `POST` (create), `PUT` (update),
    and `DELETE`.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有五个操作方法来执行对客户的CRUD操作——两个`GET`方法（获取所有客户或一个客户），`POST`（创建），`PUT`（更新）和`DELETE`。
- en: The `GetCustomers` method can have a `string` parameter passed with a country
    name. If it is missing, all customers are returned. If it is present, it is used
    to filter customers by country.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法`GetCustomers`可以接受一个`string`类型的参数，该参数为国名。若该参数缺失，则返回所有客户信息。若存在，则用于按国家筛选客户。
- en: The `GetCustomer` method has a route explicitly named `GetCustomer` so that
    it can be used to generate a URL after inserting a new customer.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetCustomer`方法有一个显式命名的路由`GetCustomer`，以便在插入新客户后用于生成URL。'
- en: The `Create` and `Update` methods both decorate the `customer` parameter with
    `[FromBody]` to tell the model binder to populate it with values from the body
    of the `POST` request.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`和`Update`方法都使用`[FromBody]`装饰`customer`参数，以告知模型绑定器从`POST`请求体中填充其值。'
- en: The `Create` method returns a response that uses the `GetCustomer` route so
    that the client knows how to get the newly created resource in the future. We
    are matching up two methods to create and then get a customer.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`方法返回的响应使用了`GetCustomer`路由，以便客户端知道将来如何获取新创建的资源。我们正在将两个方法匹配起来，以创建并获取客户。'
- en: The `Create` and `Update` methods do not need to check the model state of the
    customer passed in the body of the HTTP request and return a `400 Bad Request`
    containing details of the model validation errors if it is not valid because the
    controller is decorated with `[ApiController]`, which does this for you.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`和`Update`方法无需检查HTTP请求体中传递的客户模型状态，并在模型无效时返回包含模型验证错误详情的`400 Bad Request`，因为控制器装饰有`[ApiController]`，它会为你执行此操作。'
- en: When an HTTP request is received by the service, then it will create an instance
    of the `Controller` class, call the appropriate action method, return the response
    in the format preferred by the client, and release the resources used by the controller,
    including the repository and its data context.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务接收到HTTP请求时，它将创建一个`Controller`类实例，调用相应的动作方法，以客户端偏好的格式返回响应，并释放控制器使用的资源，包括仓库及其数据上下文。
- en: Specifying problem details
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定问题详情
- en: A feature added in ASP.NET Core 2.1 and later is an implementation of a web
    standard for specifying problem details.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1及更高版本新增了一项特性，即实现了指定问题详情的Web标准。
- en: In Web API controllers decorated with `[ApiController]` in a project with ASP.NET
    Core 2.2 or later compatibility enabled, action methods that return `IActionResult`
    and return a client error status code, that is, `4xx`, will automatically include
    a serialized instance of the `ProblemDetails` class in the response body.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用了ASP.NET Core 2.2或更高版本兼容性的项目中，使用`[ApiController]`装饰的Web API控制器中，返回`IActionResult`且返回客户端错误状态码（即`4xx`）的动作方法，将自动在响应体中包含`ProblemDetails`类的序列化实例。
- en: If you want to take control, then you can create a `ProblemDetails` instance
    yourself and include additional information.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自行控制，那么你可以创建一个`ProblemDetails`实例，并包含额外信息。
- en: 'Let''s simulate a bad request that needs custom data returned to the client:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟一个需要向客户端返回自定义数据的错误请求：
- en: 'At the top of the implementation of the `Delete` method, add statements to
    check if the `id` matches the literal string value `"bad"`, and if so, then return
    a custom problem details object, as shown in the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Delete`方法的实现顶部，添加语句检查`id`是否匹配字符串值`"bad"`，如果是，则返回一个自定义的问题详情对象，如下所示：
- en: '[PRE18]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will test this functionality later.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你稍后将测试此功能。
- en: Controlling XML serialization
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制XML序列化
- en: In `Program.cs`, we added the `XmlSerializer` so that our Web API service can
    return XML as well as JSON if the client requests that.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中，我们添加了`XmlSerializer`，以便我们的Web API服务在客户端请求时，既能返回JSON也能返回XML。
- en: 'However, the `XmlSerializer` cannot serialize interfaces, and our entity classes
    use `ICollection<T>` to define related child entities. This causes a warning at
    runtime, for example, for the `Customer` class and its `Orders` property, as shown
    in the following output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`XmlSerializer`无法序列化接口，而我们的实体类使用`ICollection<T>`来定义相关子实体，这会在运行时导致警告，例如对于`Customer`类及其`Orders`属性，如下输出所示：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can prevent this warning by excluding the `Orders` property when serializing
    a `Customer` to XML:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在将`Customer`序列化为XML时排除`Orders`属性来防止此警告：
- en: In the `Northwind.Common.EntityModels.Sqlite` and the `Northwind.Common.EntityModels.SqlServer`
    projects, open `Customers.cs`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.Sqlite`和`Northwind.Common.EntityModels.SqlServer`项目中，打开`Customers.cs`文件。
- en: Import the `System.Xml.Serialization` namespace so that we can use the `[XmlIgnore]`
    attribute.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`System.Xml.Serialization`命名空间，以便我们能使用`[XmlIgnore]`属性。
- en: 'Decorate the `Orders` property with an attribute to ignore it when serializing,
    as shown highlighted in the following code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Orders`属性添加一个属性，以便在序列化时忽略它，如下面的代码中突出显示的那样：
- en: '[PRE20]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `Northwind.Common.EntityModels.SqlServer` project, decorate the `CustomerCustomerDemos`
    property with `[XmlIgnore]` too.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.SqlServer`项目中，同样为`CustomerCustomerDemos`属性添加`[XmlIgnore]`装饰。
- en: Documenting and testing web services
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录和测试网络服务
- en: You can easily test a web service by making HTTP `GET` requests using a browser.
    To test other HTTP methods, we need a more advanced tool.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览器发起HTTP `GET`请求，你可以轻松测试网络服务。要测试其他HTTP方法，我们需要更高级的工具。
- en: Testing GET requests using a browser
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用浏览器测试GET请求
- en: 'You will use Chrome to test the three implementations of a `GET` request –
    for all customers, for customers in a specified country, and for a single customer
    using their unique customer ID:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Chrome测试`GET`请求的三种实现——获取所有客户、获取指定国家的客户以及通过唯一客户ID获取单个客户：
- en: Start the `Northwind.WebApi` web service.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi`网络服务。
- en: Start Chrome.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/api/customers` and note the JSON document
    returned, containing all 91 customers in the Northwind database (unsorted), as
    shown in *Figure 16.3*:![](img/B17442_17_03.png)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/api/customers`并注意返回的JSON文档，其中包含Northwind数据库中的所有91位客户（未排序），如图*16.3*所示：![](img/B17442_17_03.png)
- en: 'Figure 16.3: Customers from the Northwind database as a JSON document'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.3：Northwind数据库中的客户作为JSON文档
- en: Navigate to `https://localhost:5001/api/customers/?country=Germany` and note
    the JSON document returned, containing only the customers in Germany, as shown
    in *Figure 16.4*:![](img/B17442_17_04.png)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/api/customers/?country=Germany`并注意返回的JSON文档，其中仅包含德国的客户，如图*16.4*所示：![](img/B17442_17_04.png)
- en: 'Figure 16.4: A list of customers from Germany as a JSON document'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.4：来自德国的客户列表作为JSON文档
- en: If you get an empty array returned, then make sure you have entered the country
    name using the correct casing because the database query is case-sensitive. For
    example, compare the results of `uk` and `UK`.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果返回的是空数组，请确保你输入的国家名称使用了正确的字母大小写，因为数据库查询是区分大小写的。例如，比较`uk`和`UK`的结果。
- en: Navigate to `https://localhost:5001/api/customers/alfki` and note the JSON document
    returned containing only the customer named **Alfreds Futterkiste**, as shown
    in *Figure 16.5*:![](img/B17442_17_05.png)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:5001/api/customers/alfki`并注意返回的JSON文档，其中仅包含名为**Alfreds
    Futterkiste**的客户，如图*16.5*所示：![](img/B17442_17_05.png)
- en: 'Figure 16.5: Specific customer information as a JSON document'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.5：特定客户信息作为JSON文档
- en: Unlike with country names, we do not need to worry about casing for the customer
    `id` value because inside the controller class, we normalized the `string` value
    to uppercase in code.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 与国家名称不同，我们无需担心客户`id`值的大小写，因为在控制器类内部，我们已在代码中将`string`值规范化为大写。
- en: But how can we test the other HTTP methods, such as `POST`, `PUT`, and `DELETE`?
    And how can we document our web service so it's easy for anyone to understand
    how to interact with it?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何测试其他HTTP方法，如`POST`、`PUT`和`DELETE`？以及我们如何记录我们的网络服务，使其易于任何人理解如何与之交互？
- en: To solve the first problem, we can install a Visual Studio Code extension named
    **REST Client**. To solve the second, we can use **Swagger**, the world's most
    popular technology for documenting and testing HTTP APIs. But first, let's see
    what is possible with the Visual Studio Code extension.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为解决第一个问题，我们可以安装一个名为**REST Client**的Visual Studio Code扩展。为解决第二个问题，我们可以使用**Swagger**，这是全球最流行的HTTP
    API文档和测试技术。但首先，让我们看看Visual Studio Code扩展能做什么。
- en: 'There are many tools for testing Web APIs, for example, **Postman**. Although
    Postman is popular, I prefer **REST Client** because it does not hide what is
    actually happening. I feel Postman is too GUI-y. But I encourage you to explore
    different tools and find the ones that fit your style. You can learn more about
    Postman at the following link: [https://www.postman.com/](https://www.postman.com/)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可用于测试Web API，例如**Postman**。尽管Postman很受欢迎，但我更喜欢**REST Client**，因为它不会隐藏实际发生的情况。我觉得Postman过于图形化。但我鼓励你探索不同的工具，找到适合你风格的工具。你可以在以下链接了解更多关于Postman的信息：[https://www.postman.com/](https://www.postman.com/)
- en: Testing HTTP requests with the REST Client extension
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用REST Client扩展测试HTTP请求
- en: REST Client is an extension that allows you to send any type of HTTP request
    and view the response in Visual Studio Code. Even if you prefer to use Visual
    Studio as your code editor, it is useful to install Visual Studio Code to use
    an extension like REST Client.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: REST Client是一个扩展，允许你在Visual Studio Code中发送任何类型的HTTP请求并查看响应。即使你更喜欢使用Visual Studio作为代码编辑器，安装Visual
    Studio Code来使用像REST Client这样的扩展也是有用的。
- en: Making GET requests using REST Client
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用REST Client进行GET请求
- en: 'We will start by creating a file for testing `GET` requests:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个文件来测试`GET`请求：
- en: If you have not already installed REST Client by Huachao Mao (`humao.rest-client`),
    then install it in Visual Studio Code now.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尚未安装由毛华超（`humao.rest-client`）开发的REST Client，请立即在Visual Studio Code中安装它。
- en: In your preferred code editor, start the `Northwind.WebApi` project web service.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的代码编辑器中，启动`Northwind.WebApi`项目网络服务。
- en: In Visual Studio Code, in the `PracticalApps` folder, create a `RestClientTests`
    folder, and then open the folder.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，在`PracticalApps`文件夹中创建一个`RestClientTests`文件夹，然后打开该文件夹。
- en: 'In the `RestClientTests` folder, create a file named `get-customers.http`,
    and modify its contents to contain an HTTP `GET` request to retrieve all customers,
    as shown in the following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestClientTests`文件夹中，创建一个名为`get-customers.http`的文件，并修改其内容以包含一个HTTP `GET`请求来检索所有客户，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In Visual Studio Code, navigate to **View** | **Command Palette**, enter `rest
    client`, select the command **Rest Client: Send Request**, and press Enter, as
    shown in *Figure 16.6*:![](img/B17442_17_06.png)'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在Visual Studio Code中，导航至**视图** | **命令面板**，输入`rest client`，选择命令**Rest Client:
    Send Request**，然后按Enter，如图16.6所示：![](img/B17442_17_06.png)'
- en: 'Figure 16.6: Sending an HTTP GET request using REST Client'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.6：使用REST Client发送HTTP GET请求
- en: Note the **Response** is shown in a new tabbed window pane vertically and that
    you can rearrange the open tabs to a horizontal layout by dragging and dropping
    tabs.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意**响应**显示在一个新的选项卡窗口面板中，并且你可以通过拖放选项卡将打开的选项卡重新排列为水平布局。
- en: 'Enter more `GET` requests, each separated by three hash symbols, to test getting
    customers in various countries and getting a single customer using their ID, as
    shown in the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入更多`GET`请求，每个请求之间用三个井号分隔，以测试获取不同国家的客户和使用其ID获取单个客户，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Click the **Send Request** link above each request to send it; for example,
    the `GET` that has a request header to request customers in the USA as XML instead
    of JSON, as shown in *Figure 16.7*:![](img/B17442_17_07.png)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击每个请求上方的**发送请求**链接来发送它；例如，具有请求头以XML而非JSON格式请求美国客户的`GET`请求，如图16.7所示：![](img/B17442_17_07.png)
- en: 'Figure 16.7: Sending a request for XML and getting a response using REST Client'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7：使用REST Client发送XML请求并获取响应
- en: Making other requests using REST Client
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用REST Client进行其他请求
- en: 'Next, we will create a file for testing other requests like `POST`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个文件来测试其他请求，如`POST`：
- en: 'In the `RestClientTests` folder, create a file named `create-customer.http`
    and modify its contents to define a `POST` request to create a new customer, noting
    that REST Client will provide IntelliSense while you type common HTTP requests,
    as shown in the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestClientTests`文件夹中，创建一个名为`create-customer.http`的文件，并修改其内容以定义一个`POST`请求来创建新客户，注意REST
    Client将在你输入常见HTTP请求时提供IntelliSense，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Due to different line endings in different operating systems, the value for
    the `Content-Length` header will be different on Windows and macOS or Linux. If
    the value is wrong, then the request will fail. To discover the correct content
    length, select the body of the request and then look in the status bar for the
    number of characters, as shown in *Figure 16.8*:![](img/B17442_17_08.png)
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于不同操作系统中的行尾不同，`Content-Length`头的值在Windows和macOS或Linux上会有所不同。如果值错误，则请求将失败。要发现正确的内容长度，选择请求的主体，然后在状态栏中查看字符数，如图16.8所示：![](img/B17442_17_08.png)
- en: 'Figure 16.8: Checking the correct content length'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.8：检查正确的内容长度
- en: Send the request and note the response is `201 Created`. Also note the location
    (that is, the URL) of the newly created customer is `https://localhost:5001/api/Customers/abcxy`,
    and includes the newly created customer in the response body, as shown in *Figure
    16.9*:![](img/B17442_17_09.png)
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求并注意响应是`201 Created`。同时注意新创建客户的地址（即URL）是`https://localhost:5001/api/Customers/abcxy`，并在响应体中包含新创建的客户，如图16.9所示：![](img/B17442_17_09.png)
- en: 'Figure 16.9: Adding a new customer'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9：添加新客户
- en: I will leave you an optional challenge to create REST Client files that test
    updating a customer (using `PUT`) and deleting a customer (using `DELETE`). Try
    them on customers that do exist as well as customers that do not. Solutions are
    in the GitHub repository for this book.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我将留给您一个可选挑战，创建REST客户端文件以测试更新客户（使用`PUT`）和删除客户（使用`DELETE`）。尝试对存在和不存在的客户进行操作。解决方案位于本书的GitHub仓库中。
- en: Now that we've seen a quick and easy way to test our service, which also happens
    to be a great way to learn HTTP, what about external developers? We want it to
    be as easy as possible for them to learn and then call our service. For that purpose,
    we will use Swagger.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了一种快速简便的测试服务方法，这同时也是学习HTTP的好方法，那么外部开发者呢？我们希望他们学习和调用我们的服务尽可能简单。为此，我们将使用Swagger。
- en: Understanding Swagger
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Swagger
- en: The most important part of Swagger is the **OpenAPI Specification**, which defines
    a REST-style contract for your API, detailing all its resources and operations
    in a human- and machine-readable format for easy development, discovery, and integration.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger最重要的部分是**OpenAPI规范**，它定义了您API的REST风格契约，详细说明了所有资源和操作，以易于开发、发现和集成的人机可读格式。
- en: Developers can use the OpenAPI Specification for a Web API to automatically
    generate strongly-typed client-side code in their preferred language or library.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以使用Web API的OpenAPI规范自动生成其首选语言或库中的强类型客户端代码。
- en: For us, another useful feature is **Swagger UI**, because it automatically generates
    documentation for your API with built-in visual testing capabilities.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，另一个有用的功能是**Swagger UI**，因为它自动为您的API生成文档，并内置了可视化测试功能。
- en: 'Let''s review how Swagger is enabled for our web service using the `Swashbuckle`
    package:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下如何使用`Swashbuckle`包为我们的Web服务启用Swagger：
- en: If the web service is running, shut down the web server.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Web服务正在运行，请关闭Web服务器。
- en: 'Open `Northwind.WebApi.csproj` and note the package reference for `Swashbuckle.AspNetCore`,
    as shown in the following markup:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.WebApi.csproj`并注意`Swashbuckle.AspNetCore`的包引用，如下所示：
- en: '[PRE24]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Update the version of the `Swashbuckle.AspNetCore` package to the latest, for
    example, at the time of writing in September 2021, it is `6.2.1`.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Swashbuckle.AspNetCore`包的版本更新至最新，例如，截至2021年9月撰写时，版本为`6.2.1`。
- en: 'In `Program.cs`, note the import for Microsoft''s OpenAPI models namespace,
    as shown in the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注意导入Microsoft的OpenAPI模型命名空间，如下所示：
- en: '[PRE25]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Import Swashbuckle''s SwaggerUI namespace, as shown in the following code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Swashbuckle的SwaggerUI命名空间，如下所示：
- en: '[PRE26]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'About halfway down `Program.cs`, note the statement to add Swagger support
    including documentation for the Northwind service, indicating that this is the
    first version of your service, and change the title, as shown highlighted in the
    following code:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`大约中间位置，注意添加Swagger支持的语句，包括Northwind服务的文档，表明这是您服务的第一版，并更改标题，如下所示高亮显示：
- en: '[PRE27]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the section that configures the HTTP request pipeline, note the statements
    to use Swagger and Swagger UI when in development mode, and define an endpoint
    for the OpenAPI specification JSON document.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置HTTP请求管道的部分中，注意在开发模式下使用Swagger和Swagger UI的语句，并定义OpenAPI规范JSON文档的端点。
- en: 'Add code to explicitly list the HTTP methods that we want to support in our
    web service and change the endpoint name, as shown highlighted in the following
    code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码以明确列出我们希望在Web服务中支持的HTTP方法，并更改端点名称，如下所示高亮显示：
- en: '[PRE28]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Testing requests with Swagger UI
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Swagger UI测试请求
- en: 'You are now ready to test an HTTP request using Swagger:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已准备好使用Swagger测试HTTP请求：
- en: Start the `Northwind.WebApi` web service.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi` Web服务。
- en: In Chrome, navigate to `https://localhost:5001/swagger/` and note that both
    the **Customers** and **WeatherForecast** Web API controllers have been discovered
    and documented, as well as **Schemas** used by the API.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中导航至`https://localhost:5001/swagger/`，并注意**Customers**和**WeatherForecast**
    Web API控制器已被发现并记录，以及API使用的**Schemas**。
- en: Click **GET /api/Customers/{id}** to expand that endpoint and note the required
    parameter for the **id** of a customer, as shown in *Figure 16.10*:![](img/B17442_17_10.png)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GET /api/Customers/{id}**展开该端点，并注意客户**id**所需的参数，如*图16.10*所示：![](img/B17442_17_10.png)
- en: 'Figure 16.10: Checking the parameters for a GET request in Swagger'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.10：在Swagger中检查GET请求的参数
- en: Click **Try it out**, enter an **id** of `ALFKI`, and then click the wide blue
    **Execute** button, as shown in *Figure 16.11*:![](img/B17442_17_11.png)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**试用**，输入`ALFKI`作为**ID**，然后点击宽大的蓝色**执行**按钮，如图*16.11*所示:![](img/B17442_17_11.png)
- en: 'Figure 16.11: Inputting a customer id before clicking the Execute button'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.11：点击执行按钮前输入客户ID
- en: Scroll down and note the **Request URL**, **Server response** with **Code**,
    and **Details** including **Response body** and **Response headers**, as shown
    in *Figure 16.12*:![](img/B17442_17_12.png)
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并注意**请求URL**、带有**代码**的**服务器响应**以及包含**响应体**和**响应头**的**详细信息**，如图*16.12*所示:![](img/B17442_17_12.png)
- en: 'Figure 16.12: Information on ALFKI in a successful Swagger request'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.12：成功Swagger请求中关于ALFKI的信息
- en: Scroll back up to the top of the page, click **POST /api/Customers** to expand
    that section, and then click **Try it out**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动回页面顶部，点击**POST /api/Customers**展开该部分，然后点击**试用**。
- en: 'Click inside the **Request body** box, and modify the JSON to define a new
    customer, as shown in the following JSON:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求体**框内，修改JSON以定义新客户，如下所示：
- en: '[PRE29]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Click **Execute**, and note the **Request URL**, **Server response** with **Code**,
    and **Details** including **Response body** and **Response headers**, noting that
    a response code of `201` means the customer was successfully created, as shown
    in *Figure 16.13*:![](img/B17442_17_13.png)
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**，并注意**请求URL**、带有**代码**的**服务器响应**以及包含**响应体**和**响应头**的**详细信息**，注意响应代码为`201`表示客户已成功创建，如图*16.13*所示:![](img/B17442_17_13.png)
- en: 'Figure 16.13: Successfully adding a new customer'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.13：成功添加新客户
- en: Scroll back up to the top of the page, click **GET /api/Customers**, click **Try
    it out**, enter `Denmark` for the country parameter, and click **Execute**, to
    confirm that the new customer was added to the database, as shown in *Figure 16.14*:![](img/B17442_17_14.png)
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动回页面顶部，点击**GET /api/Customers**，点击**试用**，输入`Denmark`作为国家参数，点击**执行**，确认新客户已添加到数据库，如图*16.14*所示:![](img/B17442_17_14.png)
- en: 'Figure 16.14: Successfully getting customers in Denmark including the newly
    added customer'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.14：成功获取包括新添加客户在内的丹麦客户
- en: Click **DELETE /api/Customers/{id}**, click **Try it out**, enter `super` for
    the **id**, click **Execute**, and note that the **Server response Code** is `204`,
    indicating that it was successfully deleted, as shown in *Figure 16.15*:![](img/B17442_17_15.png)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**DELETE /api/Customers/{id}**，点击**试用**，输入`super`作为**ID**，点击**执行**，并注意**服务器响应代码**为`204`，表明成功删除，如图*16.15*所示:![](img/B17442_17_15.png)
- en: 'Figure 16.15: Successfully deleting a customer'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.15：成功删除客户
- en: Click **Execute** again, and note that the **Server response Code** is `404`,
    indicating that the customer does not exist anymore, and the **Response body**
    contains a problem details JSON document, as shown in *Figure 16.16*:![](img/B17442_17_16.png)
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**执行**，并注意**服务器响应代码**为`404`，表明客户不再存在，**响应体**包含问题详情JSON文档，如图*16.16*所示:![](img/B17442_17_16.png)
- en: 'Figure 16.16: The deleted customer does not exist anymore'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.16：已删除的客户不再存在
- en: Enter `bad` for the **id**, click **Execute** again, and note that the **Server
    response Code** is `400`, indicating that the customer did exist but failed to
    be deleted (in this case, because the web service is simulating this error), and
    the **Response body** contains a custom problem details JSON document, as shown
    in *Figure 16.17*:![](img/B17442_17_17.png)
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`bad`作为**ID**，再次点击**执行**，并注意**服务器响应代码**为`400`，表明客户确实存在但删除失败（此情况下，因为网络服务模拟此错误），**响应体**包含一个自定义问题详情JSON文档，如图*16.17*所示:![](img/B17442_17_17.png)
- en: 'Figure 16.17: The customer did exist but failed to be deleted'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.17：客户确实存在但删除失败
- en: Use the `GET` methods to confirm that the new customer has been deleted from
    the database (there were originally only two customers in Denmark).
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`GET`方法确认新客户已从数据库中删除（原丹麦仅有两个客户）。
- en: I will leave testing updates to an existing customer by using `PUT` to the reader.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我将使用`PUT`方法更新现有客户的测试留给读者。
- en: Close Chrome and shut down the web server.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭网络服务器。
- en: Enabling HTTP logging
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用HTTP日志记录
- en: 'HTTP logging is an optional middleware component that logs information about
    HTTP requests and HTTP responses including the following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP日志记录是一个可选的中间件组件，它记录有关HTTP请求和HTTP响应的信息，包括以下内容：
- en: Information about the HTTP request
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP请求信息
- en: Headers
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部
- en: Body
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体
- en: Information about the HTTP response
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP响应信息
- en: This is valuable in web services for auditing and debugging scenarios but beware
    because it can negatively impact performance. You might also log **personally
    identifiable information** (**PII**) which can cause compliance issues in some
    jurisdictions.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这在网络服务中对于审计和调试场景非常有价值，但需注意，它可能对性能产生负面影响。你还可能记录**个人身份信息**（**PII**），这在某些司法管辖区可能导致合规问题。
- en: 'Let''s see HTTP logging in action:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看HTTP日志记录的实际效果：
- en: 'In `Program.cs`, import the namespace for working with HTTP logging, as shown
    in the following code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理HTTP日志记录的命名空间，如下列代码所示：
- en: '[PRE30]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the services configuration section, add a statement to configure HTTP logging,
    as shown in the following code:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务配置部分，添加一条配置HTTP日志记录的语句，如下列代码所示：
- en: '[PRE31]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the HTTP pipeline configuration section, add a statement to add HTTP logging
    before the call to use routing, as shown in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTTP管道配置部分，添加一条在路由调用前添加HTTP日志记录的语句，如下列代码所示：
- en: '[PRE32]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Start the `Northwind.WebApi` web service.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi`网络服务。
- en: Start Chrome.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome浏览器。
- en: Navigate to `https://localhost:5001/api/customers`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/api/customers`。
- en: 'In a command prompt or terminal, note the request and response have been logged,
    as shown in the following output:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意请求和响应已被记录，如下列输出所示：
- en: '[PRE33]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Close Chrome and shut down the web server.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭网络服务器。
- en: You are now ready to build applications that consume your web service.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已准备好构建消费你的网络服务的应用程序。
- en: Consuming web services using HTTP clients
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP客户端消费网络服务
- en: Now that we have built and tested our Northwind service, we will learn how to
    call it from any .NET app using the `HttpClient` class and its factory.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经构建并测试了Northwind服务，接下来我们将学习如何使用`HttpClient`类及其工厂从任何.NET应用中调用该服务。
- en: Understanding HttpClient
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解HttpClient
- en: The easiest way to consume a web service is to use the `HttpClient` class. However,
    many people use it wrongly because it implements `IDisposable` and Microsoft's
    own documentation shows poor usage of it. See the book links in the GitHub repository
    for articles with more discussion of this.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最简便的网络服务消费方式是使用`HttpClient`类。然而，许多人错误地使用它，因为它实现了`IDisposable`，且微软的官方文档展示了其不当用法。请参阅GitHub仓库中的书籍链接，以获取更多关于此话题的讨论文章。
- en: Usually, when a type implements `IDisposable`, you should create it inside a
    `using` statement to ensure that it is disposed of as soon as possible. `HttpClient`
    is different because it is shared, reentrant, and partially thread-safe.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当类型实现`IDisposable`时，你应该在`using`语句中创建它，以确保其尽快被释放。`HttpClient`则不同，因为它被共享、可重入且部分线程安全。
- en: The problem has to do with how the underlying network sockets have to be managed.
    The bottom line is that you should use a single instance of it for each HTTP endpoint
    that you consume during the life of your application. This will allow each `HttpClient`
    instance to have defaults set that are appropriate for the endpoint it works with,
    while managing the underlying network sockets efficiently.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 问题与底层网络套接字的管理方式有关。简而言之，你应该为应用程序生命周期内消费的每个HTTP端点使用单一的`HttpClient`实例。这将允许每个`HttpClient`实例设置适合其工作端点的默认值，同时高效管理底层网络套接字。
- en: Configuring HTTP clients using HttpClientFactory
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HttpClientFactory配置HTTP客户端
- en: Microsoft is aware of the issue, and in ASP.NET Core 2.1 they introduced `HttpClientFactory`
    to encourage best practice; that is the technique we will use.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 微软已意识到此问题，并在ASP.NET Core 2.1中引入了`HttpClientFactory`以鼓励最佳实践；这正是我们将采用的技术。
- en: 'In the following example, we will use the Northwind MVC website as a client
    to the Northwind Web API service. Since both need to be hosted on a web server
    simultaneously, we first need to configure them to use different port numbers,
    as shown in the following list:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在下述示例中，我们将以Northwind MVC网站作为Northwind Web API服务的客户端。由于两者需同时托管于同一网络服务器上，我们首先需要配置它们使用不同的端口号，如下表所示：
- en: The Northwind Web API service will listen on port `5002` using `HTTPS`.
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind Web API服务将使用`HTTPS`监听端口`5002`。
- en: The Northwind MVC website will continue to listen on port `5000` using `HTTP`
    and port `5001` using `HTTPS`.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind MVC网站将继续使用`HTTP`监听端口`5000`，使用`HTTPS`监听端口`5001`。
- en: 'Let''s configure those ports:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来配置这些端口：
- en: 'In the `Northwind.WebApi` project, in `Program.cs`, add an extension method
    call to `UseUrls` to specify port `5002` for `HTTPS`, as shown highlighted in
    the following code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目的`Program.cs`中，添加一个对`UseUrls`的扩展方法调用，指定`HTTPS`端口为`5002`，如下列高亮代码所示：
- en: '[PRE34]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `Northwind.Mvc` project, open `Program.cs` and import the namespace
    for working with HTTP client factory, as shown in the following code:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，打开`Program.cs`，并导入用于处理HTTP客户端工厂的命名空间，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add a statement to enable `HttpClientFactory` with a named client to make calls
    to the Northwind Web API service using HTTPS on port `5002` and request JSON as
    the default response format, as shown in the following code:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一条语句以启用`HttpClientFactory`，并使用命名客户端通过HTTPS在端口`5002`上调用Northwind Web API服务，并请求JSON作为默认响应格式，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Getting customers as JSON in the controller
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制器中以JSON形式获取客户
- en: 'We can now create an MVC controller action method that uses the factory to
    create an HTTP client, makes a `GET` request for customers, and deserializes the
    JSON response using convenience extension methods introduced with .NET 5 in the
    `System.Net.Http.Json` assembly and namespace:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建一个MVC控制器动作方法，该方法使用工厂创建HTTP客户端，发起一个针对客户的`GET`请求，并使用.NET 5中引入的`System.Net.Http.Json`程序集和命名空间中的便捷扩展方法反序列化JSON响应：
- en: 'Open `Controllers/HomeController.cs` and declare a field to store the HTTP
    client factory, as shown in the following code:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Controllers/HomeController.cs`，并声明一个用于存储HTTP客户端工厂的字段，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Set the field in the constructor, as shown highlighted in the following code:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中设置字段，如下面的代码中突出显示的那样：
- en: '[PRE38]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a new action method for calling the Northwind Web API service, fetching
    all customers, and passing them to a view, as shown in the following code:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的动作方法，用于调用Northwind Web API服务，获取所有客户，并将他们传递给一个视图，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the `Views/Home` folder, create a Razor file named `Customers.cshtml`.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，创建一个名为`Customers.cshtml`的Razor文件。
- en: 'Modify the Razor file to render the customers, as shown in the following markup:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改Razor文件以渲染客户，如下面的标记所示：
- en: '[PRE40]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In `Views/Home/Index.cshtml`, add a form after rendering the visitor count
    to allow visitors to enter a country and see the customers, as shown in the following
    markup:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home/Index.cshtml`中，在渲染访客计数后添加一个表单，允许访客输入一个国家并查看客户，如下面的标记所示：
- en: '[PRE41]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Enabling Cross-Origin Resource Sharing
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用跨源资源共享
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an HTTP-header-based standard
    for protecting web resources when the client and server are on different domains
    (origins). It allows a server to indicate which origins (defined by a combination
    of domain, scheme, or port) other than its own it will permit the loading of resources
    from.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨源资源共享**（**CORS**）是一种基于HTTP头部的标准，用于保护当客户端和服务器位于不同域（源）时的Web资源。它允许服务器指示哪些源（由域、方案或端口的组合定义）除了它自己的源之外，它将允许从这些源加载资源。'
- en: Since our web service is hosted on port `5002` and our MVC website is hosted
    on ports `5000` and `5001`, they are considered different origins and so resources
    cannot be shared.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的Web服务托管在端口`5002`上，而我们的MVC网站托管在端口`5000`和`5001`上，它们被视为不同的源，因此资源不能共享。
- en: 'It would be useful to enable CORS on the server and configure our web service
    to only allow requests that originate from the MVC website:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上启用CORS，并配置我们的Web服务，使其仅允许来自MVC网站的请求，这将非常有用：
- en: In the `Northwind.WebApi` project, open `Program.cs`.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，打开`Program.cs`。
- en: 'Add a statement in the services configuration section to add support for CORS,
    as shown in the following code:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务配置部分添加一条语句，以添加对CORS的支持，如下面的代码所示：
- en: '[PRE42]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add a statement in the HTTP pipeline configuration section, before calling
    `UseEndpoints`, to use CORS and allow `GET`, `POST`, `PUT`, and `DELETE` requests
    from any website like Northwind MVC that has an origin of `https://localhost:5001`,
    as shown in the following code:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTTP管道配置部分添加一条语句，在调用`UseEndpoints`之前，使用CORS并允许来自具有`https://localhost:5001`源的Northwind
    MVC等任何网站的`GET`、`POST`、`PUT`和`DELETE`请求，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Start the `Northwind.WebApi` project and confirm that the web service is listening
    only on port `5002`, as shown in the following output:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi`项目，并确认Web服务仅在端口`5002`上监听，如下面的输出所示：
- en: '[PRE44]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Start the `Northwind.Mvc` project and confirm that the website is listening
    on ports `5000` and `5002`, as shown in the following output:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`项目，并确认网站正在监听端口`5000`和`5002`，如下面的输出所示：
- en: '[PRE45]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Start Chrome.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: In the customer form, enter a country like `Germany`, `UK`, or `USA`, click
    **Submit**, and note the list of customers, as shown in *Figure 16.18*:![](img/B17442_17_18.png)
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户表单中，输入一个国家，如`Germany`、`UK`或`USA`，点击**提交**，并注意客户列表，如图*16.18*所示：![](img/B17442_17_18.png)
- en: 'Figure 16.18: Customers in the UK'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.18：英国的客户
- en: Click the **Back** button in your browser, clear the country textbox, click
    **Submit**, and note the worldwide list of customers.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击浏览器中的**返回**按钮，清除国家文本框，点击**提交**，并注意全球客户列表。
- en: 'In a command prompt or terminal, note the `HttpClient` writes each HTTP request
    that it makes and HTTP response that it receives, as shown in the following output:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意`HttpClient`会记录它发出的每个HTTP请求和接收的HTTP响应，如下面的输出所示：
- en: '[PRE46]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Close Chrome and shut down the web server.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭网络服务器。
- en: You have successfully built a web service and called it from an MVC website.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你已成功构建了一个网络服务，并从MVC网站中调用了它。
- en: Implementing advanced features for web services
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网络服务实现高级功能
- en: Now that you have seen the fundamentals of building a web service and then calling
    it from a client, let's look at some more advanced features.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到了构建网络服务及其从客户端调用的基础知识，让我们来看看一些更高级的功能。
- en: Implementing a Health Check API
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现健康检查API
- en: There are many paid services that perform site availability tests that are basic
    pings, some with more advanced analysis of the HTTP response.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多付费服务执行基本的站点可用性测试，如基本ping，有些则提供更高级的HTTP响应分析。
- en: ASP.NET Core 2.2 and later makes it easy to implement more detailed website
    health checks. For example, your website might be live, but is it ready? Can it
    retrieve data from its database?
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2及更高版本使得实现更详细的网站健康检查变得容易。例如，你的网站可能在线，但它准备好了吗？它能从数据库检索数据吗？
- en: 'Let''s add basic health check capabilities to our web service:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的网络服务添加基本的健康检查功能：
- en: 'In the `Northwind.WebApi` project, add a project reference to enable Entity
    Framework Core database health checks, as shown in the following markup:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，添加一个项目引用以启用Entity Framework Core数据库健康检查，如下面的标记所示：
- en: '[PRE47]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Build the project.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: 'In `Program.cs`, at the bottom of the services configuration section, add a
    statement to add health checks, including to the Northwind database context, as
    shown in the following code:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在服务配置部分的底部，添加一条语句以添加健康检查，包括到Northwind数据库上下文，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: By default, the database context check calls EF Core's `CanConnectAsync` method.
    You can customize what operation is run by calling the `AddDbContextCheck` method.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，数据库上下文检查调用EF Core的`CanConnectAsync`方法。你可以通过调用`AddDbContextCheck`方法来自定义运行的操作。
- en: 'In the HTTP pipeline configuration section, before the call to `MapControllers`,
    add a statement to use basic health checks, as shown in the following code:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTTP管道配置部分，在调用`MapControllers`之前，添加一条语句以使用基本健康检查，如下面的代码所示：
- en: '[PRE49]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Start the web service.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网络服务。
- en: Start Chrome.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: 'Navigate to `https://localhost:5002/howdoyoufeel` and note that the web service
    responds with a plain text response: `Healthy`.'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5002/howdoyoufeel`并注意网络服务以纯文本响应：`Healthy`。
- en: 'At the command prompt or terminal, note the SQL statement that was executed
    to test the health of the database, as shown in the following output:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意用于测试数据库健康状况的SQL语句，如下面的输出所示：
- en: '[PRE50]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Close Chrome and shut down the web server.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭网络服务器。
- en: Implementing Open API analyzers and conventions
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Open API分析器和约定
- en: In this chapter, you learned how to enable Swagger to document a web service
    by manually decorating a controller class with attributes.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过手动使用属性装饰控制器类来启用Swagger以记录网络服务。
- en: In ASP.NET Core 2.2 or later, there are API analyzers that reflect over controller
    classes that have been annotated with the `[ApiController]` attribute to document
    it automatically. The analyzer assumes some API conventions.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 2.2或更高版本中，有API分析器会反射带有`[ApiController]`属性的控制器类来自动记录它。分析器假设了一些API约定。
- en: 'To use it, your project must enable the OpenAPI Analyzers, as shown highlighted
    in the following markup:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，你的项目必须启用OpenAPI分析器，如下面的标记中突出显示的那样：
- en: '[PRE51]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: After installing, controllers that have not been properly decorated should have
    warnings (green squiggles) and warnings when you compile the source code. For
    example, the `WeatherForecastController` class.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，未正确装饰的控制器应显示警告（绿色波浪线），并在编译源代码时发出警告。例如，`WeatherForecastController`类。
- en: Automatic code fixes can then add the appropriate `[Produces]` and `[ProducesResponseType]`
    attributes, although this only currently works in Visual Studio. In Visual Studio
    Code, you will see warnings about where the analyzer thinks you should add attributes,
    but you must add them yourself.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 自动代码修复随后可以添加适当的`[Produces]`和`[ProducesResponseType]`属性，尽管这在当前仅适用于Visual Studio。在Visual
    Studio Code中，您将看到分析器认为您应该添加属性的警告，但您必须手动添加它们。
- en: Implementing transient fault handling
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现瞬态故障处理
- en: When a client app or website calls a web service, it could be from across the
    other side of the world. Network problems between the client and the server could
    cause issues that are nothing to do with your implementation code. If a client
    makes a call and it fails, the app should not just give up. If it tries again,
    the issue may now have been resolved. We need a way to handle these temporary
    faults.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端应用或网站调用Web服务时，可能来自世界的另一端。客户端与服务器之间的网络问题可能导致与您的实现代码无关的问题。如果客户端发起调用失败，应用不应就此放弃。如果它尝试再次调用，问题可能已经解决。我们需要一种方法来处理这些临时故障。
- en: To handle these transient faults, Microsoft recommends that you use the third-party
    library Polly to implement automatic retries with exponential backoff. You define
    a policy, and the library handles everything else.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这些瞬态故障，微软建议您使用第三方库Polly来实现带有指数退避的自动重试。您定义一个策略，库将处理其余所有事务。
- en: '**Good Practice**: You can read more about how Polly can make your web services
    more reliable at the following link: [https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：您可以在以下链接了解更多关于Polly如何使您的Web服务更可靠的信息：[https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly)'
- en: Adding security HTTP headers
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加安全HTTP头部
- en: ASP.NET Core has built-in support for common security HTTP headers like HSTS.
    But there are many more HTTP headers that you should consider implementing.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core内置了对常见安全HTTP头部（如HSTS）的支持。但还有许多其他HTTP头部您应考虑实现。
- en: 'The easiest way to add these headers is using a middleware class:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些头部的最简单方法是使用中间件类：
- en: 'In the `Northwind.WebApi` project/folder, create a file named `SecurityHeadersMiddleware.cs`
    and modify its statements, as shown in the following code:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目/文件夹中，创建一个名为`SecurityHeadersMiddleware.cs`的文件，并修改其语句，如下所示：
- en: '[PRE52]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In `Program.cs`, in the HTTP pipeline configuration section, add a statement
    to register the middleware before the call to `UseEndpoints`, as shown in the
    following code:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在HTTP管道配置部分，添加一条语句，在调用`UseEndpoints`之前注册中间件，如下所示：
- en: '[PRE53]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Start the web service.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务。
- en: Start Chrome.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Show **Developer tools** and its **Network** tab to record requests and responses.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**开发者工具**及其**网络**标签以记录请求和响应。
- en: Navigate to `https://localhost:5002/weatherforecast`.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5002/weatherforecast`。
- en: Note the custom HTTP response header that we added named `super-secure`, as
    shown in *Figure 16.19*:![](img/B17442_17_19.png)
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们添加的自定义HTTP响应头部，名为`super-secure`，如*图16.19*所示：![](img/B17442_17_19.png)
- en: 'Figure 16.19: Adding a custom HTTP header named super-secure'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图16.19*：添加名为super-secure的自定义HTTP头部'
- en: Building web services using minimal APIs
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最小API构建Web服务
- en: For .NET 6, Microsoft put a lot of effort into adding new features to the C#
    10 language and simplifying the ASP.NET Core libraries to enable the creation
    of web services using minimal APIs.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET 6，微软投入了大量精力为C# 10语言添加新特性，并简化ASP.NET Core库，以实现使用最小API创建Web服务。
- en: You might remember the weather forecast service that is provided in the Web
    API project template. It shows the use of a controller class to return a five-day
    weather forecast using faked data. We will now recreate that weather service using
    minimal APIs.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得Web API项目模板中提供的天气预报服务。它展示了使用控制器类返回使用假数据的五天天气预报。我们现在将使用最小API重现该天气服务。
- en: 'First, the weather service has a class to represent a single weather forecast.
    We will need to use this class in multiple projects, so let''s create a class
    library for that:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，天气服务有一个类来表示单个天气预报。我们将在多个项目中需要使用这个类，所以让我们为此创建一个类库：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列清单所定义：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common`'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common`
- en: Rename `Class1.cs` to `WeatherForecast.cs`.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Class1.cs`重命名为`WeatherForecast.cs`。
- en: 'Modify `WeatherForecast.cs`, as shown in the following code:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`WeatherForecast.cs`，如下面的代码所示：
- en: '[PRE54]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Building a weather service using minimal APIs
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用最小API构建天气服务
- en: 'Now let''s recreate that weather service using minimal APIs. It will listen
    on port `5003` and have CORS support enabled so that requests can only come from
    the MVC website and only `GET` requests are allowed:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用最小API重新创建该天气服务。它将在端口`5003`上监听，并启用CORS支持，以便请求只能来自MVC网站，并且只允许`GET`请求：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列清单所定义：
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core空** / `web`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Minimal.WebApi`'
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Minimal.WebApi`
- en: 'Other Visual Studio options: **Authentication Type**: None, **Configure for
    HTTPS**: selected, **Enable Docker**: cleared, **Enable OpenAPI support**: selected.'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他Visual Studio选项：**身份验证类型**：无，**为HTTPS配置**：已选中，**启用Docker**：已清除，**启用OpenAPI支持**：已选中。
- en: In Visual Studio Code, select `Minimal.WebApi` as the active OmniSharp project.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Minimal.WebApi`作为活动的OmniSharp项目。
- en: 'In the `Minimal.WebApi` project, add a project reference to the `Northwind.Common`
    project, as shown in the following markup:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Minimal.WebApi`项目中，添加一个项目引用指向`Northwind.Common`项目，如下面的标记所示：
- en: '[PRE55]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Build the `Minimal.WebApi` project.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Minimal.WebApi`项目。
- en: 'Modify `Program.cs`, as shown highlighted in the following code:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Program.cs`，如下面的代码中突出显示的那样：
- en: '[PRE56]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '**Good Practice**: For simple web services, avoid creating a controller class,
    and instead use minimal APIs to put all the configuration and implementation in
    one place, `Program.cs`.'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：对于简单的Web服务，避免创建控制器类，而是使用最小API将所有配置和实现放在一个地方，即`Program.cs`。'
- en: 'In **Properties**, modify `launchSettings.json` to configure the `Minimal.WebApi`
    profile to launch the browser using port `5003` in the URL, as shown highlighted
    in the following markup:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，修改`launchSettings.json`以配置`Minimal.WebApi`配置文件，使其通过URL中的端口`5003`启动浏览器，如下面的标记中突出显示的那样：
- en: '[PRE57]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Testing the minimal weather service
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试最小天气服务
- en: 'Before creating a client to the service, let''s test that it returns forecasts
    as JSON:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建服务客户端之前，让我们测试它是否返回JSON格式的预报：
- en: Start the web service project.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务项目。
- en: If you are not using Visual Studio 2022, start Chrome and navigate to `https://localhost:5003/api/weather`.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有使用Visual Studio 2022，请启动Chrome并导航至`https://localhost:5003/api/weather`。
- en: Note the Web API service should return a JSON document with five random weather
    forecast objects in an array.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意Web API服务应返回一个包含五个随机天气预报对象的JSON文档数组。
- en: Close Chrome and shut down the web server.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Adding weather forecasts to the Northwind website home page
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Northwind网站首页添加天气预报
- en: 'Finally, let''s add an HTTP client to the Northwind website so that it can
    call the weather service and show forecasts on the home page:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们向Northwind网站添加一个HTTP客户端，以便它可以调用天气服务并在首页显示预报：
- en: 'In the `Northwind.Mvc` project, add a project reference to `Northwind.Common`,
    as shown highlighted in the following markup:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，添加一个项目引用指向`Northwind.Common`，如下面的标记中突出显示的那样：
- en: '[PRE58]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In `Program.cs`, add a statement to configure an HTTP client to call the minimal
    service on port `5003`, as shown in the following code:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加一条语句以配置HTTP客户端以调用端口`5003`上的最小服务，如下面的代码所示：
- en: '[PRE59]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In `HomeController.cs`, import the `Northwind.Common` namespace, and in the
    `Index` method, add statements to get and use an HTTP client to call the weather
    service to get forecasts and store them in `ViewData`, as shown in the following
    code:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，导入`Northwind.Common`命名空间，并在`Index`方法中，添加语句以获取并使用HTTP客户端调用天气服务以获取预报并将其存储在`ViewData`中，如下面的代码所示：
- en: '[PRE60]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In `Views/Home`, in `Index.cshtml`, import the `Northwind.Common` namespace
    and then in the top code block get the weather forecasts from the `ViewData` dictionary,
    as shown in the following markup:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`中，在`Index.cshtml`中，导入`Northwind.Common`命名空间，然后在顶部代码块中从`ViewData`字典获取天气预报，如下面的标记所示：
- en: '[PRE61]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the first `<div>`, after rendering the current time, add markup to enumerate
    the weather forecasts unless there aren''t any, and render them in a table, as
    shown in the following markup:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`<div>`中，在渲染当前时间后，除非没有天气预报，否则添加标记以枚举天气预报，并以表格形式呈现，如下所示：
- en: '[PRE62]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Start the `Minimal.WebApi` service.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Minimal.WebApi`服务。
- en: Start the `Northwind.Mvc` website.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`网站。
- en: Navigate to `https://localhost:5001/`, and note the weather forecast, as shown
    in *Figure 16.20*:![](img/B17442_17_20.png)
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`https://localhost:5001/`，并注意天气预报，如图*16.20*所示：![](img/B17442_17_20.png)
- en: 'Figure 16.20: A five-day weather forecast on the home page of the Northwind
    website'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.20：Northwind网站主页上的五天天气预报
- en: 'View the command prompt or terminal for the MVC website and note the info messages
    that indicate a request was sent to the minimal API web service `api/weather`
    endpoint in about 83ms, as shown in the following output:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看MVC网站的命令提示符或终端，并注意指示请求已发送到最小API Web服务`api/weather`端点的信息消息，大约耗时83ms，如下所示：
- en: '[PRE63]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Stop the `Minimal.WebApi` service, refresh the browser, and note that after
    a few seconds the MVC website home page appears without weather forecasts.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止`Minimal.WebApi`服务，刷新浏览器，并注意几秒后MVC网站主页出现，但没有天气预报。
- en: Close Chrome and shut down the web server.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Practicing and exploring
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践与探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题测试您的知识和理解，进行一些实践练习，并深入研究本章的主题。
- en: Exercise 16.1 – Test your knowledge
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习16.1 – 测试您的知识
- en: 'Answer the following questions:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Which class should you inherit from to create a controller class for an ASP.NET
    Core Web API service?
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建ASP.NET Core Web API服务的控制器类，您应该继承自哪个类？
- en: If you decorate your controller class with the `[ApiController]` attribute to
    get default behavior like automatic `400` responses for invalid models, what else
    must you do?
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您用`[ApiController]`属性装饰控制器类以获得默认行为，如对无效模型自动返回`400`响应，还需要做什么？
- en: What must you do to specify which controller action method will be executed
    in response to an HTTP request?
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定哪个控制器操作方法将执行以响应HTTP请求，您必须做什么？
- en: What must you do to specify what responses should be expected when calling an
    action method?
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定调用操作方法时应预期哪些响应，您必须做什么？
- en: List three methods that can be called to return responses with different status
    codes.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三种可以调用的方法，以返回具有不同状态码的响应。
- en: List four ways that you can test a web service.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出四种测试Web服务的方法。
- en: Why should you not wrap your use of `HttpClient` in a `using` statement to dispose
    of it when you are finished even though it implements the `IDisposable` interface,
    and what should you use instead?
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管`HttpClient`实现了`IDisposable`接口，为何不应在`using`语句中包裹其使用以在完成时释放它，以及应使用什么替代方案？
- en: What does the acronym CORS stand for and why is it important to enable it in
    a web service?
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CORS缩写代表什么，为何在Web服务中启用它很重要？
- en: How can you enable clients to detect if your web service is healthy with ASP.NET
    Core 2.2 and later?
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在ASP.NET Core 2.2及更高版本中使客户端能够检测您的Web服务是否健康？
- en: What benefits does endpoint routing provide?
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端点路由提供了哪些好处？
- en: Exercise 16.2 – Practice creating and deleting customers with HttpClient
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习16.2 – 使用HttpClient练习创建和删除客户
- en: Extend the `Northwind.Mvc` website project to have pages where a visitor can
    fill in a form to create a new customer, or search for a customer and then delete
    them. The MVC controller should make calls to the Northwind web service to create
    and delete customers.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`Northwind.Mvc`网站项目，使其拥有页面，访客可以在其中填写表单以创建新客户，或搜索客户并删除他们。MVC控制器应调用Northwind
    Web服务来创建和删除客户。
- en: Exercise 16.3 – Explore topics
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习16.3 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，深入了解本章涵盖的主题：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services)'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services)'
- en: Summary
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to build an ASP.NET Core Web API service that
    can be called by any app on any platform that can make an HTTP request and process
    an HTTP response.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你学习了如何构建一个ASP.NET Core Web API服务，该服务可被任何能够发起HTTP请求并处理HTTP响应的平台上的应用调用。
- en: You also learned how to test and document web service APIs with Swagger, as
    well as how to consume services efficiently.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了如何使用Swagger测试和文档化Web服务API，以及如何高效地消费这些服务。
- en: In the next chapter, you will learn to build user interfaces using Blazor, Microsoft's
    cool new component technology that enables developers to build client-side, single-page
    applications (SPAs) for websites using C# instead of JavaScript, hybrid apps for
    desktop, and potentially mobile apps.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章，你将学习使用Blazor构建用户界面，这是微软推出的酷炫新技术，让开发者能用C#而非JavaScript来构建网站的客户端单页应用（SPAs）、桌面混合应用，以及潜在的移动应用。
