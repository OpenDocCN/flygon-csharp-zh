["```cs\n1 x 12 = 12\n2 x 12 = 24\n...\n12 x 12 = 144 \n```", "```cs\nfor (int row = 1; row <= 12; row++)\n{\n  Console.WriteLine($\"{row} x 12 = {row * 12}\");\n} \n```", "```cs\n    static void TimesTable(byte number)\n    {\n      WriteLine($\"This is the {number} times table:\");\n      for (int row = 1; row <= 12; row++)\n      {\n        WriteLine($\"{row} x {number} = {row * number}\");\n      }\n      WriteLine();\n    } \n    ```", "```cs\n    using static System.Console;\n    **TimesTable(****6****);** \n    ```", "```cs\n    This is the 6 times table:\n    1 x 6 = 6\n    2 x 6 = 12\n    3 x 6 = 18\n    4 x 6 = 24\n    5 x 6 = 30\n    6 x 6 = 36\n    7 x 6 = 42\n    8 x 6 = 48\n    9 x 6 = 54\n    10 x 6 = 60\n    11 x 6 = 66\n    12 x 6 = 72 \n    ```", "```cs\n    Error: (1,12): error CS1503: Argument 1: cannot convert from 'int' to 'byte' \n    ```", "```cs\n    static decimal CalculateTax(\n      decimal amount, string twoLetterRegionCode)\n    {\n      decimal rate = 0.0M;\n      switch (twoLetterRegionCode)\n      {\n        case \"CH\": // Switzerland\n          rate = 0.08M;\n          break;\n        case \"DK\": // Denmark\n        case \"NO\": // Norway\n          rate = 0.25M;\n          break;\n        case \"GB\": // United Kingdom\n        case \"FR\": // France\n          rate = 0.2M;\n          break;\n        case \"HU\": // Hungary\n          rate = 0.27M;\n          break;\n        case \"OR\": // Oregon\n        case \"AK\": // Alaska\n        case \"MT\": // Montana\n          rate = 0.0M;\n          break;\n        case \"ND\": // North Dakota\n        case \"WI\": // Wisconsin\n        case \"ME\": // Maine\n        case \"VA\": // Virginia\n          rate = 0.05M;\n          break;\n        case \"CA\": // California\n          rate = 0.0825M;\n          break;\n        default: // most US states\n          rate = 0.06M;\n          break;\n      }\n      return amount * rate;\n    } \n    ```", "```cs\n    // TimesTable(6);\n    decimal taxToPay = CalculateTax(amount: 149, twoLetterRegionCode: \"FR\"); \n    WriteLine($\"You must pay {taxToPay} in tax.\"); \n    ```", "```cs\n    You must pay 29.8 in tax. \n    ```", "```cs\n    static string CardinalToOrdinal(int number)\n    {\n      switch (number)\n      {\n        case 11: // special cases for 11th to 13th\n        case 12:\n        case 13:\n          return $\"{number}th\";\n        default:\n          int lastDigit = number % 10;\n          string suffix = lastDigit switch\n          {\n            1 => \"st\",\n            2 => \"nd\",\n            3 => \"rd\",\n            _ => \"th\"\n          };\n          return $\"{number}{suffix}\";\n      }\n    } \n    ```", "```cs\n    static void RunCardinalToOrdinal()\n    {\n      for (int number = 1; number <= 40; number++)\n      {\n        Write($\"{CardinalToOrdinal(number)} \");\n      }\n      WriteLine();\n    } \n    ```", "```cs\n    // TimesTable(6);\n    // decimal taxToPay = CalculateTax(amount: 149, twoLetterRegionCode: \"FR\"); \n    // WriteLine($\"You must pay {taxToPay} in tax.\");\n    RunCardinalToOrdinal(); \n    ```", "```cs\n    1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th 31st 32nd 33rd 34th 35th 36th 37th 38th 39th 40th \n    ```", "```cs\n    static int Factorial(int number)\n    {\n      if (number < 1)\n      {\n        return 0;\n      }\n      else if (number == 1)\n      {\n        return 1;\n      }\n      else\n      {\n        return number * Factorial(number - 1);\n      }\n    } \n    ```", "```cs\n    static void RunFactorial()\n    {\n      for (int i = 1; i < 15; i++)\n      {\n        WriteLine($\"{i}! = {Factorial(i):N0}\");\n      }\n    } \n    ```", "```cs\n    1! = 1\n    2! = 2\n    3! = 6\n    4! = 24\n    5! = 120\n    6! = 720\n    7! = 5,040\n    8! = 40,320\n    9! = 362,880\n    10! = 3,628,800\n    11! = 39,916,800\n    12! = 479,001,600\n    13! = 1,932,053,504\n    14! = 1,278,945,280 \n    ```", "```cs\n    **checked** **// for overflow**\n    **{**\n      return number * Factorial(number - 1);\n    **}** \n    ```", "```cs\n    **try**\n    **{**\n      WriteLine($\"{i}! = {Factorial(i):N0}\");\n    **}**\n    **catch (System.OverflowException)**\n    **{**\n     **WriteLine(****$\"****{i}****! is too big for a 32-bit integer.\"****);**\n    **}** \n    ```", "```cs\n    1! = 1\n    2! = 2\n    3! = 6\n    4! = 24\n    5! = 120\n    6! = 720\n    7! = 5,040\n    8! = 40,320\n    9! = 362,880\n    10! = 3,628,800\n    11! = 39,916,800\n    12! = 479,001,600\n    13! is too big for a 32-bit integer.\n    14! is too big for a 32-bit integer. \n    ```", "```cs\n    /// <summary>\n    /// Pass a 32-bit integer and it will be converted into its ordinal equivalent.\n    /// </summary>\n    /// <param name=\"number\">Number is a cardinal value e.g. 1, 2, 3, and so on.</param>\n    /// <returns>Number as an ordinal value e.g. 1st, 2nd, 3rd, and so on.</returns> \n    ```", "```cs\n0 1 1 2 3 5 8 13 21 34 55 ... \n```", "```cs\n    static int FibImperative(int term)\n    {\n      if (term == 1)\n      {\n        return 0;\n      }\n      else if (term == 2)\n      {\n        return 1;\n      }\n      else\n      {\n        return FibImperative(term - 1) + FibImperative(term - 2);\n      }\n    } \n    ```", "```cs\n    static void RunFibImperative()\n    {\n      for (int i = 1; i <= 30; i++)\n      {\n        WriteLine(\"The {0} term of the Fibonacci sequence is {1:N0}.\",\n          arg0: CardinalToOrdinal(i),\n          arg1: FibImperative(term: i));\n      }\n    } \n    ```", "```cs\n    The 1st term of the Fibonacci sequence is 0.\n    The 2nd term of the Fibonacci sequence is 1.\n    The 3rd term of the Fibonacci sequence is 1.\n    The 4th term of the Fibonacci sequence is 2.\n    The 5th term of the Fibonacci sequence is 3.\n    The 6th term of the Fibonacci sequence is 5.\n    The 7th term of the Fibonacci sequence is 8.\n    The 8th term of the Fibonacci sequence is 13.\n    The 9th term of the Fibonacci sequence is 21.\n    The 10th term of the Fibonacci sequence is 34.\n    The 11th term of the Fibonacci sequence is 55.\n    The 12th term of the Fibonacci sequence is 89.\n    The 13th term of the Fibonacci sequence is 144.\n    The 14th term of the Fibonacci sequence is 233.\n    The 15th term of the Fibonacci sequence is 377.\n    The 16th term of the Fibonacci sequence is 610.\n    The 17th term of the Fibonacci sequence is 987.\n    The 18th term of the Fibonacci sequence is 1,597.\n    The 19th term of the Fibonacci sequence is 2,584.\n    The 20th term of the Fibonacci sequence is 4,181.\n    The 21st term of the Fibonacci sequence is 6,765.\n    The 22nd term of the Fibonacci sequence is 10,946.\n    The 23rd term of the Fibonacci sequence is 17,711.\n    The 24th term of the Fibonacci sequence is 28,657.\n    The 25th term of the Fibonacci sequence is 46,368.\n    The 26th term of the Fibonacci sequence is 75,025.\n    The 27th term of the Fibonacci sequence is 121,393.\n    The 28th term of the Fibonacci sequence is 196,418.\n    The 29th term of the Fibonacci sequence is 317,811.\n    The 30th term of the Fibonacci sequence is 514,229. \n    ```", "```cs\n    static int FibFunctional(int term) => \n      term switch\n      {\n        1 => 0,\n        2 => 1,\n        _ => FibFunctional(term - 1) + FibFunctional(term - 2)\n      }; \n    ```", "```cs\n    static void RunFibFunctional()\n    {\n      for (int i = 1; i <= 30; i++)\n      {\n        WriteLine(\"The {0} term of the Fibonacci sequence is {1:N0}.\",\n          arg0: CardinalToOrdinal(i),\n          arg1: FibFunctional(term: i));\n      }\n    } \n    ```", "```cs\n    static double Add(double a, double b)\n    {\n      return a * b; // deliberate bug!\n    } \n    ```", "```cs\n    double a = 4.5;\n    double b = 2.5;\n    double answer = Add(a, b); \n    WriteLine($\"{a} + {b} = {answer}\");\n    WriteLine(\"Press ENTER to end the app.\");\n    ReadLine(); // wait for user to press ENTER \n    ```", "```cs\n    4.5 + 2.5 = 11.25 \n    ```", "```cs\n    Debug.WriteLine(\"Debug says, I am watching!\");\n    Trace.WriteLine(\"Trace says, I am watching!\"); \n    ```", "```cs\n    **// write to a text file in the project folder**\n    **Trace.Listeners.Add(****new** **TextWriterTraceListener(**\n     **File.CreateText(Path.Combine(Environment.GetFolderPath(**\n     **Environment.SpecialFolder.DesktopDirectory),** **\"log.txt\"****))));**\n    **// text writer is buffered, so this option calls**\n    **// Flush() on all listeners after writing**\n    **Trace.AutoFlush =** **true****;**\n    Debug.WriteLine(\"Debug says, I am watching!\");\n    Trace.WriteLine(\"Trace says, I am watching!\"); \n    ```", "```cs\n    dotnet run --configuration Release \n    ```", "```cs\n    dotnet run --configuration Debug \n    ```", "```cs\n    dotnet add package Microsoft.Extensions.Configuration \n    ```", "```cs\n    dotnet add package Microsoft.Extensions.Configuration.Binder \n    ```", "```cs\n    dotnet add package Microsoft.Extensions.Configuration.Json \n    ```", "```cs\n    dotnet add package Microsoft.Extensions.Configuration.FileExtensions \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference**\n     **Include=****\"Microsoft.Extensions.Configuration\"**\n     **Version=****\"6.0.0\"** **/>**\n     **<PackageReference**\n     **Include=****\"Microsoft.Extensions.Configuration.Binder\"**\n     **Version=****\"6.0.0\"** **/>**\n     **<PackageReference**\n     **Include=****\"Microsoft.Extensions.Configuration.FileExtensions\"**\n     **Version=****\"6.0.0\"** **/>**\n     **<PackageReference**\n     **Include=****\"Microsoft.Extensions.Configuration.Json\"**\n     **Version=****\"6.0.0\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    {\n      \"PacktSwitch\": {\n        \"Level\": \"Info\"\n      }\n    } \n    ```", "```cs\n    ConfigurationBuilder builder = new();\n    builder.SetBasePath(Directory.GetCurrentDirectory())\n      .AddJsonFile(\"appsettings.json\", \n        optional: true, reloadOnChange: true);\n    IConfigurationRoot configuration = builder.Build(); \n    TraceSwitch ts = new(\n      displayName: \"PacktSwitch\",\n      description: \"This switch is set via a JSON config.\"); \n    configuration.GetSection(\"PacktSwitch\").Bind(ts);\n    Trace.WriteLineIf(ts.TraceError, \"Trace error\"); \n    Trace.WriteLineIf(ts.TraceWarning, \"Trace warning\"); \n    Trace.WriteLineIf(ts.TraceInfo, \"Trace information\"); \n    Trace.WriteLineIf(ts.TraceVerbose, \"Trace verbose\"); \n    ```", "```cs\n    {\n      \"PacktSwitch\": { \n        \"Level\": \"2\"\n      }\n    } \n    ```", "```cs\n    dotnet run --configuration Release \n    ```", "```cs\n    Trace says, I am watching! \n    Trace error\n    Trace warning \n    ```", "```cs\n    namespace Packt\n    {\n      public class Calculator\n      {\n        public double Add(double a, double b)\n        {\n          return a * b;\n        }\n      }\n    } \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <IsPackable>false</IsPackable>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.10.0\" />\n        <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n        <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n          <IncludeAssets>runtime; build; native; contentfiles; \n            analyzers; buildtransitive</IncludeAssets>\n          <PrivateAssets>all</PrivateAssets>\n        </PackageReference>\n        <PackageReference Include=\"coverlet.collector\" Version=\"3.0.2\">\n          <IncludeAssets>runtime; build; native; contentfiles; \n            analyzers; buildtransitive</IncludeAssets>\n          <PrivateAssets>all</PrivateAssets>\n        </PackageReference>\n      </ItemGroup>\n     **<ItemGroup>**\n     **<ProjectReference**\n     **Include=****\"..\\CalculatorLib\\CalculatorLib.csproj\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    using Packt; \n    using Xunit;\n    namespace CalculatorLibUnitTests\n    {\n      public class CalculatorUnitTests\n      {\n        [Fact]\n        public void TestAdding2And2()\n        {\n          // arrange \n          double a = 2; \n          double b = 2;\n          double expected = 4;\n          Calculator calc = new();\n          // act\n          double actual = calc.Add(a, b);\n          // assert\n          Assert.Equal(expected, actual);\n        }\n        [Fact]\n        public void TestAdding2And3()\n        {\n          // arrange \n          double a = 2; \n          double b = 3;\n          double expected = 5;\n          Calculator calc = new();\n          // act\n          double actual = calc.Add(a, b);\n          // assert\n          Assert.Equal(expected, actual);\n        }\n      }\n    } \n    ```", "```cs\n    dotnet test \n    ```", "```cs\nstatic void Withdraw(string accountName, decimal amount)\n{\n  if (accountName is null)\n  {\n    throw new ArgumentNullException(paramName: nameof(accountName));\n  }\n  if (amount < 0)\n  {\n    throw new ArgumentException(\n      message: $\"{nameof(amount)} cannot be less than zero.\");\n  }\n  // process parameters\n} \n```", "```cs\n    using static System.Console;\n    namespace Packt;\n    public class Calculator\n    {\n      public static void Gamma() // public so it can be called from outside\n      {\n        WriteLine(\"In Gamma\");\n        Delta();\n      }\n      private static void Delta() // private so it can only be called internally\n      {\n        WriteLine(\"In Delta\");\n        File.OpenText(\"bad file path\");\n      }\n    } \n    ```", "```cs\n    using Packt;\n    using static System.Console;\n    WriteLine(\"In Main\");\n    Alpha();\n    static void Alpha()\n    {\n      WriteLine(\"In Alpha\");\n      Beta();\n    }\n    static void Beta()\n    {\n      WriteLine(\"In Beta\");\n      Calculator.Gamma();\n    } \n    ```", "```cs\n    In Main\n    In Alpha\n    In Beta\n    In Gamma\n    In Delta\n    Unhandled exception. System.IO.FileNotFoundException: Could not find file 'C:\\Code\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net6.0\\bad file path'.\n       at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(...\n       at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(...\n       at System.IO.Strategies.OSFileStreamStrategy..ctor(...\n       at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(...\n       at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(...\n       at System.IO.StreamReader.ValidateArgsAndOpenPath(...\n       at System.IO.File.OpenText(String path) in ...\n       at Packt.Calculator.Delta() in C:\\Code\\Chapter04\\CallStackExceptionHandlingLib\\Calculator.cs:line 16\n       at Packt.Calculator.Gamma() in C:\\Code\\Chapter04\\CallStackExceptionHandlingLib\\Calculator.cs:line 10\n       at <Program>$.<<Main>$>g__Beta|0_1() in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 16\n       at <Program>$.<<Main>$>g__Alpha|0_0() in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 10\n       at <Program>$.<Main>$(String[] args) in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 5 \n    ```", "```cs\ntry\n{\n  Gamma();\n}\ncatch (IOException ex)\n{\n  LogException(ex);\n  // throw the caught exception as if it happened here\n  // this will lose the original call stack\n  throw ex;\n  // rethrow the caught exception and retain its original call stack\n  throw;\n  // throw a new exception with the caught exception nested within it\n  throw new InvalidOperationException(\n    message: \"Calculation had invalid values. See inner exception for why.\",\n    innerException: ex);\n} \n```", "```cs\n    static void Beta()\n    {\n      WriteLine(\"In Beta\");\n    **try**\n     **{**\n     **Calculator.Gamma();**\n     **}**\n     **catch (Exception ex)**\n     **{**\n     **WriteLine(****$\"Caught this:** **{ex.Message}****\"****);**\n    **throw** **ex;**\n     **}**\n    } \n    ```", "```cs\n    Caught this: Could not find file 'C:\\Code\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net6.0\\bad file path'.\n    Unhandled exception. System.IO.FileNotFoundException: Could not find file 'C:\\Code\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net6.0\\bad file path'.\n    File name: 'C:\\Code\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net6.0\\bad file path'\n       at <Program>$.<<Main>$>g__Beta|0_1() in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 25\n       at <Program>$.<<Main>$>g__Alpha|0_0() in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 11\n       at <Program>$.<Main>$(String[] args) in C:\\Code\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 6 \n    ```", "```cs\nif (!bankAccount.IsOverdrawn())\n{\n  bankAccount.Withdraw(amount);\n} \n```", "```cs\nstatic bool TryParse(string? input, out Person value)\n{\n  if (someFailure)\n  {\n    value = default(Person);\n    return false;\n  }\n  // successfully parsed the string into a Person\n  value = new Person() { ... };\n  return true;\n} \n```"]