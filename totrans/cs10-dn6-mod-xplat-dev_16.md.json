["```cs\nGET /path/to/resource\nAccept: application/json \n```", "```cs\nPOST /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nPUT /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nPATCH /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nDELETE /path/to/resource \n```", "```cs\n    using Microsoft.AspNetCore.Mvc;\n    namespace Northwind.WebApi.Controllers;\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n      private static readonly string[] Summaries = new[]\n      {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\",\n        \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n      };\n      private readonly ILogger<WeatherForecastController> _logger;\n      public WeatherForecastController(\n        ILogger<WeatherForecastController> logger)\n      {\n        _logger = logger;\n      }\n      [HttpGet]\n      public IEnumerable<WeatherForecast> Get()\n      {\n        return Enumerable.Range(1, 5).Select(index =>\n          new WeatherForecast\n          {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n          })\n          .ToArray();\n      }\n    } \n    ```", "```cs\n**// GET /weatherforecast**\n[HttpGet]\npublic IEnumerable<WeatherForecast> Get() **// original method**\n{\n  **return** **Get(****5****);** **// five day forecast**\n}\n**// GET /weatherforecast/7**\n**[****HttpGet(****\"{days:int}\"****)****]**\n**public** **IEnumerable<WeatherForecast>** **Get****(****int** **days****)** **// new method**\n{\n**return** **Enumerable.Range(****1****, days).Select(index =>**\n    new WeatherForecast\n    {\n      Date = DateTime.Now.AddDays(index),\n      TemperatureC = Random.Shared.Next(-20, 55),\n      Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n    })\n    .ToArray();\n} \n```", "```cs\n    \"profiles\": {\n      \"Northwind.WebApi\": {\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": \"true\",\n    **\"launchBrowser\"****:** **true****,**\n    **\"launchUrl\"****:** **\"swagger\"****,**\n        \"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        }\n      }, \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\n    \"..\\Northwind.Common.DataContext.Sqlite\\Northwind.Common.DataContext.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc.Formatters;\n    using Packt.Shared; // AddNorthwindContext extension method\n    using static System.Console; \n    ```", "```cs\n    // Add services to the container.\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\n    builder.Services.AddControllers(options =>\n    {\n      WriteLine(\"Default output formatters:\");\n      foreach (IOutputFormatter formatter in options.OutputFormatters)\n      {\n        OutputFormatter? mediaFormatter = formatter as OutputFormatter;\n        if (mediaFormatter == null)\n        {\n          WriteLine($\"  {formatter.GetType().Name}\");\n        }\n        else // OutputFormatter class has SupportedMediaTypes\n        {\n          WriteLine(\"  {0}, Media types: {1}\",\n            arg0: mediaFormatter.GetType().Name,\n            arg1: string.Join(\", \",\n              mediaFormatter.SupportedMediaTypes));\n        }\n      }\n    })\n    .AddXmlDataContractSerializerFormatters()\n    .AddXmlSerializerFormatters(); \n    ```", "```cs\n    Default output formatters: \n      HttpNoContentOutputFormatter\n      StringOutputFormatter, Media types: text/plain\n      StreamOutputFormatter\n      SystemTextJsonOutputFormatter, Media types: application/json, text/json, application/*+json \n    ```", "```cs\n    using Packt.Shared; // Customer\n    namespace Northwind.WebApi.Repositories;\n    public interface ICustomerRepository\n    {\n      Task<Customer?> CreateAsync(Customer c);\n      Task<IEnumerable<Customer>> RetrieveAllAsync();\n      Task<Customer?> RetrieveAsync(string id);\n      Task<Customer?> UpdateAsync(string id, Customer c);\n      Task<bool?> DeleteAsync(string id);\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore.ChangeTracking; // EntityEntry<T>\n    using Packt.Shared; // Customer\n    using System.Collections.Concurrent; // ConcurrentDictionary\n    namespace Northwind.WebApi.Repositories;\n    public class CustomerRepository : ICustomerRepository\n    {\n      // use a static thread-safe dictionary field to cache the customers\n      private static ConcurrentDictionary\n        <string, Customer>? customersCache;\n      // use an instance data context field because it should not be\n      // cached due to their internal caching\n      private NorthwindContext db;\n      public CustomerRepository(NorthwindContext injectedContext)\n      {\n        db = injectedContext;\n        // pre-load customers from database as a normal\n        // Dictionary with CustomerId as the key,\n        // then convert to a thread-safe ConcurrentDictionary\n        if (customersCache is null)\n        {\n          customersCache = new ConcurrentDictionary<string, Customer>(\n            db.Customers.ToDictionary(c => c.CustomerId));\n        }\n      }\n      public async Task<Customer?> CreateAsync(Customer c)\n      {\n        // normalize CustomerId into uppercase\n        c.CustomerId = c.CustomerId.ToUpper();\n        // add to database using EF Core\n        EntityEntry<Customer> added = await db.Customers.AddAsync(c);\n        int affected = await db.SaveChangesAsync();\n        if (affected == 1)\n        {\n          if (customersCache is null) return c;\n          // if the customer is new, add it to cache, else\n          // call UpdateCache method\n          return customersCache.AddOrUpdate(c.CustomerId, c, UpdateCache);\n        }\n        else\n        {\n          return null;\n        }\n      }\n      public Task<IEnumerable<Customer>> RetrieveAllAsync()\n      {\n        // for performance, get from cache\n        return Task.FromResult(customersCache is null \n            ? Enumerable.Empty<Customer>() : customersCache.Values);\n      }\n      public Task<Customer?> RetrieveAsync(string id)\n      {\n        // for performance, get from cache\n        id = id.ToUpper();\n        if (customersCache is null) return null!;\n        customersCache.TryGetValue(id, out Customer? c);\n        return Task.FromResult(c);\n      }\n      private Customer UpdateCache(string id, Customer c)\n      {\n        Customer? old;\n        if (customersCache is not null)\n        {\n          if (customersCache.TryGetValue(id, out old))\n          {\n            if (customersCache.TryUpdate(id, c, old))\n            {\n              return c;\n            }\n          }\n        }\n        return null!;\n      }\n      public async Task<Customer?> UpdateAsync(string id, Customer c)\n      {\n        // normalize customer Id\n        id = id.ToUpper();\n        c.CustomerId = c.CustomerId.ToUpper();\n        // update in database\n        db.Customers.Update(c);\n        int affected = await db.SaveChangesAsync();\n        if (affected == 1)\n        {\n          // update in cache\n          return UpdateCache(id, c);\n        }\n        return null;\n      }\n      public async Task<bool?> DeleteAsync(string id)\n      {\n        id = id.ToUpper();\n        // remove from database\n        Customer? c = db.Customers.Find(id);\n        if (c is null) return null;\n        db.Customers.Remove(c);\n        int affected = await db.SaveChangesAsync();\n        if (affected == 1)\n        {\n          if (customersCache is null) return null;\n          // remove from cache\n          return customersCache.TryRemove(id, out c);\n        }\n        else\n        {\n          return null;\n        }\n      }\n    } \n    ```", "```cs\n[HttpGet(\"{id}\")]\n[ProducesResponseType(200, Type = typeof(Product))] \n[ProducesResponseType(404)]\npublic IActionResult Get(string id) \n```", "```cs\n    **builder.Services.AddScoped<ICustomerRepository, CustomerRepository>();**\n    var app = builder.Build(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc; // [Route], [ApiController], ControllerBase\n    using Packt.Shared; // Customer\n    using Northwind.WebApi.Repositories; // ICustomerRepository\n    namespace Northwind.WebApi.Controllers;\n    // base address: api/customers\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class CustomersController : ControllerBase\n    {\n      private readonly ICustomerRepository repo;\n      // constructor injects repository registered in Startup\n      public CustomersController(ICustomerRepository repo)\n      {\n        this.repo = repo;\n      }\n      // GET: api/customers\n      // GET: api/customers/?country=[country]\n      // this will always return a list of customers (but it might be empty)\n      [HttpGet]\n      [ProducesResponseType(200, Type = typeof(IEnumerable<Customer>))]\n      public async Task<IEnumerable<Customer>> GetCustomers(string? country)\n      {\n        if (string.IsNullOrWhiteSpace(country))\n        {\n          return await repo.RetrieveAllAsync();\n        }\n        else\n        {\n          return (await repo.RetrieveAllAsync())\n            .Where(customer => customer.Country == country);\n        }\n      }\n      // GET: api/customers/[id]\n      [HttpGet(\"{id}\", Name = nameof(GetCustomer))] // named route\n      [ProducesResponseType(200, Type = typeof(Customer))]\n      [ProducesResponseType(404)]\n      public async Task<IActionResult> GetCustomer(string id)\n      {\n        Customer? c = await repo.RetrieveAsync(id);\n        if (c == null)\n        {\n          return NotFound(); // 404 Resource not found\n        }\n        return Ok(c); // 200 OK with customer in body\n      }\n      // POST: api/customers\n      // BODY: Customer (JSON, XML)\n      [HttpPost]\n      [ProducesResponseType(201, Type = typeof(Customer))]\n      [ProducesResponseType(400)]\n      public async Task<IActionResult> Create([FromBody] Customer c)\n      {\n        if (c == null)\n        {\n          return BadRequest(); // 400 Bad request\n        }\n        Customer? addedCustomer = await repo.CreateAsync(c);\n        if (addedCustomer == null)\n        {\n          return BadRequest(\"Repository failed to create customer.\");\n        }\n        else\n        {\n          return CreatedAtRoute( // 201 Created\n            routeName: nameof(GetCustomer),\n            routeValues: new { id = addedCustomer.CustomerId.ToLower() },\n            value: addedCustomer);\n        }\n      }\n      // PUT: api/customers/[id]\n      // BODY: Customer (JSON, XML)\n      [HttpPut(\"{id}\")]\n      [ProducesResponseType(204)]\n      [ProducesResponseType(400)]\n      [ProducesResponseType(404)]\n      public async Task<IActionResult> Update(\n        string id, [FromBody] Customer c)\n      {\n        id = id.ToUpper();\n        c.CustomerId = c.CustomerId.ToUpper();\n        if (c == null || c.CustomerId != id)\n        {\n          return BadRequest(); // 400 Bad request\n        }\n        Customer? existing = await repo.RetrieveAsync(id);\n        if (existing == null)\n        {\n          return NotFound(); // 404 Resource not found\n        }\n        await repo.UpdateAsync(id, c);\n        return new NoContentResult(); // 204 No content\n      }\n      // DELETE: api/customers/[id]\n      [HttpDelete(\"{id}\")]\n      [ProducesResponseType(204)]\n      [ProducesResponseType(400)]\n      [ProducesResponseType(404)]\n      public async Task<IActionResult> Delete(string id)\n      {\n        Customer? existing = await repo.RetrieveAsync(id);\n        if (existing == null)\n        {\n          return NotFound(); // 404 Resource not found\n        }\n        bool? deleted = await repo.DeleteAsync(id);\n        if (deleted.HasValue && deleted.Value) // short circuit AND\n        {\n          return new NoContentResult(); // 204 No content\n        }\n        else\n        {\n          return BadRequest( // 400 Bad request\n            $\"Customer {id} was found but failed to delete.\");\n        }\n      }\n    } \n    ```", "```cs\n    // take control of problem details\n    if (id == \"bad\")\n    {\n      ProblemDetails problemDetails = new()\n      {\n        Status = StatusCodes.Status400BadRequest,\n        Type = \"https://localhost:5001/customers/failed-to-delete\",\n        Title = $\"Customer ID {id} found but failed to delete.\",\n        Detail = \"More details like Company Name, Country and so on.\",\n        Instance = HttpContext.Request.Path\n      };\n      return BadRequest(problemDetails); // 400 Bad Request\n    } \n    ```", "```cs\nwarn: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter[1]\nAn error occurred while trying to create an XmlSerializer for the type 'Packt.Shared.Customer'.\nSystem.InvalidOperationException: There was an error reflecting type 'Packt.Shared.Customer'.\n---> System.InvalidOperationException: Cannot serialize member 'Packt.\nShared.Customer.Orders' of type 'System.Collections.Generic.ICollection`1[[Packt. Shared.Order, Northwind.Common.EntityModels, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]', see inner exception for more details. \n```", "```cs\n    [InverseProperty(nameof(Order.Customer))]\n    **[****XmlIgnore****]**\n    public virtual ICollection<Order> Orders { get; set; } \n    ```", "```cs\n    GET https://localhost:5001/api/customers/ HTTP/1.1 \n    ```", "```cs\n    ###\n    GET https://localhost:5001/api/customers/?country=Germany HTTP/1.1 \n    ###\n    GET https://localhost:5001/api/customers/?country=USA HTTP/1.1 \n    Accept: application/xml\n    ###\n    GET https://localhost:5001/api/customers/ALFKI HTTP/1.1 \n    ###\n    GET https://localhost:5001/api/customers/abcxy HTTP/1.1 \n    ```", "```cs\n    POST https://localhost:5001/api/customers/ HTTP/1.1 \n    Content-Type: application/json\n    Content-Length: 301\n    {\n      \"customerID\": \"ABCXY\",\n      \"companyName\": \"ABC Corp\",\n      \"contactName\": \"John Smith\",\n      \"contactTitle\": \"Sir\",\n      \"address\": \"Main Street\",\n      \"city\": \"New York\",\n      \"region\": \"NY\",\n      \"postalCode\": \"90210\",\n      \"country\":  \"USA\",\n      \"phone\": \"(123) 555-1234\",\n      \"fax\": null,\n      \"orders\": null\n    } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.1.5\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.OpenApi.Models; \n    ```", "```cs\n    using Swashbuckle.AspNetCore.SwaggerUI; // SubmitMethod \n    ```", "```cs\n    builder.Services.AddSwaggerGen(c =>\n      {\n        c.SwaggerDoc(\"v1\", new()\n          { Title = \"**Northwind Service API**\", Version = \"v1\" });\n      }); \n    ```", "```cs\n    var app = builder.Build();\n    // Configure the HTTP request pipeline.\n    if (builder.Environment.IsDevelopment())\n    {\n      app.UseSwagger(); \n      app.UseSwaggerUI(c =>\n     **{**\n     **c.SwaggerEndpoint(****\"/swagger/v1/swagger.json\"****,**\n    **\"Northwind Service API Version 1\"****);**\n     **c.SupportedSubmitMethods(****new****[] {** \n     **SubmitMethod.Get, SubmitMethod.Post,**\n     **SubmitMethod.Put, SubmitMethod.Delete });**\n     **});**\n    } \n    ```", "```cs\n    {\n      \"customerID\": \"SUPER\",\n      \"companyName\": \"Super Company\",\n      \"contactName\": \"Rasmus Ibensen\",\n      \"contactTitle\": \"Sales Leader\",\n      \"address\": \"Rotterslef 23\",\n      \"city\": \"Billund\",\n      \"region\": null,\n      \"postalCode\": \"4371\",\n      \"country\": \"Denmark\",\n      \"phone\": \"31 21 43 21\",\n      \"fax\": \"31 21 43 22\"\n    } \n    ```", "```cs\n    using Microsoft.AspNetCore.HttpLogging; // HttpLoggingFields \n    ```", "```cs\n    builder.Services.AddHttpLogging(options =>\n    {\n      options.LoggingFields = HttpLoggingFields.All;\n      options.RequestBodyLogLimit = 4096; // default is 32k\n      options.ResponseBodyLogLimit = 4096; // default is 32k\n    }); \n    ```", "```cs\n    app.UseHttpLogging(); \n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n          Request:\n          Protocol: HTTP/1.1\n          Method: GET\n          Scheme: https\n          PathBase:\n          Path: /api/customers\n          QueryString:\n          Connection: keep-alive\n          Accept: */*\n          Accept-Encoding: gzip, deflate, br\n          Host: localhost:5001\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 200\n          Content-Type: application/json; charset=utf-8\n          ...\n          Transfer-Encoding: chunked \n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    **builder.WebHost.UseUrls(****\"https://localhost:5002/\"****);** \n    ```", "```cs\n    using System.Net.Http.Headers; // MediaTypeWithQualityHeaderValue \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.WebApi\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new Uri(\"https://localhost:5002/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n          \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    private readonly IHttpClientFactory clientFactory; \n    ```", "```cs\n    public HomeController(\n      ILogger<HomeController> logger,\n      NorthwindContext injectedContext**,**\n     **IHttpClientFactory httpClientFactory**)\n    {\n      _logger = logger;\n      db = injectedContext;\n     **clientFactory = httpClientFactory;**\n    } \n    ```", "```cs\n    public async Task<IActionResult> Customers(string country)\n    {\n      string uri;\n      if (string.IsNullOrEmpty(country))\n      {\n        ViewData[\"Title\"] = \"All Customers Worldwide\";\n        uri = \"api/customers/\";\n      }\n      else\n      {\n        ViewData[\"Title\"] = $\"Customers in {country}\";\n        uri = $\"api/customers/?country={country}\";\n      }\n      HttpClient client = clientFactory.CreateClient(\n        name: \"Northwind.WebApi\");\n      HttpRequestMessage request = new(\n        method: HttpMethod.Get, requestUri: uri);\n      HttpResponseMessage response = await client.SendAsync(request);\n      IEnumerable<Customer>? model = await response.Content\n        .ReadFromJsonAsync<IEnumerable<Customer>>();\n      return View(model);\n    } \n    ```", "```cs\n    @using Packt.Shared\n    @model IEnumerable<Customer>\n    <h2>@ViewData[\"Title\"]</h2>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Company Name</th>\n          <th>Contact Name</th>\n          <th>Address</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        @if (Model is not null)\n        {\n          @foreach (Customer c in Model)\n          {\n            <tr>\n              <td>\n                @Html.DisplayFor(modelItem => c.CompanyName)\n              </td>\n              <td>\n                @Html.DisplayFor(modelItem => c.ContactName)\n              </td>\n              <td>\n                @Html.DisplayFor(modelItem => c.Address) \n                @Html.DisplayFor(modelItem => c.City)\n                @Html.DisplayFor(modelItem => c.Region)\n                @Html.DisplayFor(modelItem => c.Country) \n                @Html.DisplayFor(modelItem => c.PostalCode)\n              </td>\n              <td>\n                @Html.DisplayFor(modelItem => c.Phone)\n              </td>\n            </tr>\n          }\n        }\n      </tbody>\n    </table> \n    ```", "```cs\n    <h3>Query customers from a service</h3>\n    <form asp-action=\"Customers\" method=\"get\">\n      <input name=\"country\" placeholder=\"Enter a country\" />\n      <input type=\"submit\" />\n    </form> \n    ```", "```cs\n    builder.Services.AddCors(); \n    ```", "```cs\n    app.UseCors(configurePolicy: options =>\n    {\n      options.WithMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\");\n      options.WithOrigins(\n        \"https://localhost:5001\" // allow requests from the MVC client\n      );\n    }); \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5002 \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5001\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000 \n    ```", "```cs\n    info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[100]\n      Sending HTTP request GET https://localhost:5002/api/customers/?country=UK\n    info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[101]\n      Received HTTP response headers after 931.864ms - 200 \n    ```", "```cs\n    <PackageReference Include=  \n      \"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\"   \n      Version=\"6.0.0\" /> \n    ```", "```cs\n    builder.Services.AddHealthChecks()\n      .AddDbContextCheck<NorthwindContext>(); \n    ```", "```cs\n    app.UseHealthChecks(path: \"/howdoyoufeel\"); \n    ```", "```cs\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT 1 \n    ```", "```cs\n<PropertyGroup>\n  <TargetFramework>net6.0</TargetFramework>\n  <Nullable>enable</Nullable>\n  <ImplicitUsings>enable</ImplicitUsings>\n **<IncludeOpenAPIAnalyzers>****true****</IncludeOpenAPIAnalyzers>**\n</PropertyGroup> \n```", "```cs\n    using Microsoft.Extensions.Primitives; // StringValues\n    public class SecurityHeaders\n    {\n      private readonly RequestDelegate next;\n      public SecurityHeaders(RequestDelegate next)\n      {\n        this.next = next;\n      }\n      public Task Invoke(HttpContext context)\n      {\n        // add any HTTP response headers you want here\n        context.Response.Headers.Add(\n          \"super-secure\", new StringValues(\"enable\"));\n        return next(context);\n      }\n    } \n    ```", "```cs\n    app.UseMiddleware<SecurityHeaders>(); \n    ```", "```cs\n    namespace Northwind.Common\n    {\n      public class WeatherForecast\n      {\n        public static readonly string[] Summaries = new[]\n        {\n          \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\",\n          \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n        public DateTime Date { get; set; }\n        public int TemperatureC { get; set; }\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n        public string? Summary { get; set; }\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\Northwind.Common\\Northwind.Common.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    **using** **Northwind.Common;** **// WeatherForecast**\n    var builder = WebApplication.CreateBuilder(args);\n    **builder.WebHost.UseUrls(****\"https://localhost:5003\"****);**\n    **builder.Services.AddCors();**\n    var app = builder.Build();\n    **// only allow the MVC client and only GET requests**\n    **app.UseCors(configurePolicy: options =>**\n    **{**\n     **options.WithMethods(****\"GET\"****);**\n     **options.WithOrigins(****\"https://localhost:5001\"****);**\n    **});**\n    **app.MapGet(****\"/api/weather\"****, () =>** \n    **{**\n    **return** **Enumerable.Range(****1****,** **5****).Select(index =>**\n    **new** **WeatherForecast**\n     **{**\n     **Date = DateTime.Now.AddDays(index),**\n     **TemperatureC = Random.Shared.Next(****-20****,** **55****),**\n     **Summary = WeatherForecast.Summaries[**\n     **Random.Shared.Next(WeatherForecast.Summaries.Length)]**\n     **})**\n     **.ToArray();**\n    **});**\n    app.Run(); \n    ```", "```cs\n    \"profiles\": {\n      \"Minimal.WebApi\": {\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": \"true\",\n        \"launchBrowser\": true,\n    **\"applicationUrl\"****:** **\"https://localhost:5003/api/weather\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\Northwind.Common.DataContext.Sqlite\\Northwind.Common.DataContext.Sqlite.csproj\" />\n     **<ProjectReference Include=****\"..\\Northwind.Common\\Northwind.Common.csproj\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Minimal.WebApi\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new Uri(\"https://localhost:5003/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n          \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    try\n    {\n      HttpClient client = clientFactory.CreateClient(\n        name: \"Minimal.WebApi\");\n      HttpRequestMessage request = new(\n        method: HttpMethod.Get, requestUri: \"api/weather\");\n      HttpResponseMessage response = await client.SendAsync(request);\n      ViewData[\"weather\"] = await response.Content\n        .ReadFromJsonAsync<WeatherForecast[]>();\n    }\n    catch (Exception ex)\n    {\n      _logger.LogWarning($\"The Minimal.WebApi service is not responding. Exception: {ex.Message}\");\n      ViewData[\"weather\"] = Enumerable.Empty<WeatherForecast>().ToArray();\n    } \n    ```", "```cs\n    @{\n      ViewData[\"Title\"] = \"Home Page\";\n      string currentItem = \"\";\n     **WeatherForecast[]? weather = ViewData[****\"weather\"****]** **as** **WeatherForecast[];**\n    } \n    ```", "```cs\n    <p>\n      <h4>Five-Day Weather Forecast</h4>\n      @if ((weather is null) || (!weather.Any()))\n      {\n        <p>No weather forecasts found.</p>\n      }\n      else\n      {\n      <table class=\"table table-info\">\n        <tr>\n          @foreach (WeatherForecast w in weather)\n          {\n            <td>@w.Date.ToString(\"ddd d MMM\") will be @w.Summary</td>\n          }\n        </tr>\n      </table>\n      }\n    </p> \n    ```", "```cs\n    info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[100]\n          Start processing HTTP request GET https://localhost:5003/api/weather\n    info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[100]\n          Sending HTTP request GET https://localhost:5003/api/weather\n    info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[101]\n          Received HTTP response headers after 76.8963ms - 200\n    info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[101]\n          End processing HTTP request after 82.9515ms – 200 \n    ```"]