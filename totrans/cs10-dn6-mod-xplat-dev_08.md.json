["```cs\n    using System.Numerics; \n    ```", "```cs\n    WriteLine(\"Working with large integers:\");\n    WriteLine(\"-----------------------------------\");\n    ulong big = ulong.MaxValue;\n    WriteLine($\"{big,40:N0}\");\n    BigInteger bigger =\n      BigInteger.Parse(\"123456789012345678901234567890\");\n    WriteLine($\"{bigger,40:N0}\"); \n    ```", "```cs\n    Working with large integers:\n    ----------------------------------------\n                  18,446,744,073,709,551,615\n     123,456,789,012,345,678,901,234,567,890 \n    ```", "```cs\n(a + bi) + (c + di) = (a + c) + (b + d)i \n```", "```cs\n    WriteLine(\"Working with complex numbers:\");\n    Complex c1 = new(real: 4, imaginary: 2);\n    Complex c2 = new(real: 3, imaginary: 7);\n    Complex c3 = c1 + c2;\n    // output using default ToString implementation\n    WriteLine($\"{c1} added to {c2} is {c3}\");\n    // output using custom format\n    WriteLine(\"{0} + {1}i added to {2} + {3}i is {4} + {5}i\",\n      c1.Real, c1.Imaginary, \n      c2.Real, c2.Imaginary,\n      c3.Real, c3.Imaginary); \n    ```", "```cs\n    Working with complex numbers:\n    (4, 2) added to (3, 7) is (7, 9)\n    4 + 2i added to 3 + 7i is 7 + 9i \n    ```", "```cs\n    string city = \"London\";\n    WriteLine($\"{city} is {city.Length} characters long.\"); \n    ```", "```cs\n    London is 6 characters long. \n    ```", "```cs\n    WriteLine($\"First char is {city[0]} and third is {city[2]}.\"); \n    ```", "```cs\n    First char is L and third is n. \n    ```", "```cs\n    string cities = \"Paris,Tehran,Chennai,Sydney,New York,Medellín\"; \n    string[] citiesArray = cities.Split(',');\n    WriteLine($\"There are {citiesArray.Length} items in the array.\");\n    foreach (string item in citiesArray)\n    {\n      WriteLine(item);\n    } \n    ```", "```cs\n    There are 6 items in the array.\n    Paris \n    Tehran \n    Chennai\n    Sydney\n    New York\n    Medellín \n    ```", "```cs\n    string fullName = \"Alan Jones\";\n    int indexOfTheSpace = fullName.IndexOf(' ');\n    string firstName = fullName.Substring(\n      startIndex: 0, length: indexOfTheSpace);\n    string lastName = fullName.Substring(\n      startIndex: indexOfTheSpace + 1);\n    WriteLine($\"Original: {fullName}\");\n    WriteLine($\"Swapped: {lastName}, {firstName}\"); \n    ```", "```cs\n    Original: Alan Jones\n    Swapped: Jones, Alan \n    ```", "```cs\n    string company = \"Microsoft\";\n    bool startsWithM = company.StartsWith(\"M\"); \n    bool containsN = company.Contains(\"N\");\n    WriteLine($\"Text: {company}\");\n    WriteLine($\"Starts with M: {startsWithM}, contains an N: {containsN}\"); \n    ```", "```cs\n    Text: Microsoft\n    Starts with M: True, contains an N: False \n    ```", "```cs\n    string recombined = string.Join(\" => \", citiesArray); \n    WriteLine(recombined); \n    ```", "```cs\n    Paris => Tehran => Chennai => Sydney => New York => Medellín \n    ```", "```cs\n    string fruit = \"Apples\"; \n    decimal price =  0.39M; \n    DateTime when = DateTime.Today;\n    WriteLine($\"Interpolated:  {fruit} cost {price:C} on {when:dddd}.\"); \n    WriteLine(string.Format(\"string.Format: {0} cost {1:C} on {2:dddd}.\",\n      arg0: fruit, arg1: price, arg2: when)); \n    ```", "```cs\n    Interpolated:  Apples cost £0.39 on Thursday. \n    string.Format: Apples cost £0.39 on Thursday. \n    ```", "```cs\nWriteLine(\"WriteLine: {0} cost {1:C} on {2:dddd}.\",\n  arg0: fruit, arg1: price, arg2: when); \n```", "```cs\n    WriteLine(\"Earliest date/time value is: {0}\",\n      arg0: DateTime.MinValue);\n    WriteLine(\"UNIX epoch date/time value is: {0}\",\n      arg0: DateTime.UnixEpoch);\n    WriteLine(\"Date/time value Now is: {0}\",\n      arg0: DateTime.Now);\n    WriteLine(\"Date/time value Today is: {0}\",\n      arg0: DateTime.Today); \n    ```", "```cs\n    Earliest date/time value is: 01/01/0001 00:00:00\n    UNIX epoch date/time value is: 01/01/1970 00:00:00\n    Date/time value Now is: 23/04/2021 14:14:54\n    Date/time value Today is: 23/04/2021 00:00:00 \n    ```", "```cs\n    DateTime christmas = new(year: 2021, month: 12, day: 25);\n    WriteLine(\"Christmas: {0}\",\n      arg0: christmas); // default format\n    WriteLine(\"Christmas: {0:dddd, dd MMMM yyyy}\",\n      arg0: christmas); // custom format\n    WriteLine(\"Christmas is in month {0} of the year.\",\n      arg0: christmas.Month);\n    WriteLine(\"Christmas is day {0} of the year.\",\n      arg0: christmas.DayOfYear);\n    WriteLine(\"Christmas {0} is on a {1}.\",\n      arg0: christmas.Year,\n      arg1: christmas.DayOfWeek); \n    ```", "```cs\n    Christmas: 25/12/2021 00:00:00\n    Christmas: Saturday, 25 December 2021\n    Christmas is in month 12 of the year.\n    Christmas is day 359 of the year.\n    Christmas 2021 is on a Saturday. \n    ```", "```cs\n    DateTime beforeXmas = christmas.Subtract(TimeSpan.FromDays(12));\n    DateTime afterXmas = christmas.AddDays(12);\n    WriteLine(\"12 days before Christmas is: {0}\",\n      arg0: beforeXmas);\n    WriteLine(\"12 days after Christmas is: {0}\",\n      arg0: afterXmas);\n    TimeSpan untilChristmas = christmas - DateTime.Now;\n    WriteLine(\"There are {0} days and {1} hours until Christmas.\",\n      arg0: untilChristmas.Days,\n      arg1: untilChristmas.Hours);\n    WriteLine(\"There are {0:N0} hours until Christmas.\",\n      arg0: untilChristmas.TotalHours); \n    ```", "```cs\n    12 days before Christmas is: 13/12/2021 00:00:00\n    12 days after Christmas is: 06/01/2022 00:00:00\n    There are 245 days and 9 hours until Christmas.\n    There are 5,890 hours until Christmas. \n    ```", "```cs\n    DateTime kidsWakeUp = new(\n      year: 2021, month: 12, day: 25, \n      hour: 6, minute: 30, second: 0);\n    WriteLine(\"Kids wake up on Christmas: {0}\",\n      arg0: kidsWakeUp);\n    WriteLine(\"The kids woke me up at {0}\",\n      arg0: kidsWakeUp.ToShortTimeString()); \n    ```", "```cs\n    Kids wake up on Christmas: 25/12/2021 06:30:00\n    The kids woke me up at 06:30 \n    ```", "```cs\n    WriteLine(\"Current culture is: {0}\",\n      arg0: CultureInfo.CurrentCulture.Name);\n    string textDate = \"4 July 2021\";\n    DateTime independenceDay = DateTime.Parse(textDate);\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\",\n      arg0: textDate,\n      arg1: independenceDay);\n    textDate = \"7/4/2021\";\n    independenceDay = DateTime.Parse(textDate);\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\",\n      arg0: textDate,\n      arg1: independenceDay);\n    independenceDay = DateTime.Parse(textDate,\n      provider: CultureInfo.GetCultureInfo(\"en-US\"));\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\",\n      arg0: textDate,\n      arg1: independenceDay); \n    ```", "```cs\n    Current culture is: en-GB\n    Text: 4 July 2021, DateTime: 4 July\n    Text: 7/4/2021, DateTime: 7 April\n    Text: 7/4/2021, DateTime: 4 July \n    ```", "```cs\n    for (int year = 2020; year < 2026; year++)\n    {\n      Write($\"{year} is a leap year: {DateTime.IsLeapYear(year)}. \");\n      WriteLine(\"There are {0} days in February {1}.\",\n        arg0: DateTime.DaysInMonth(year: year, month: 2), arg1: year);\n    }\n    WriteLine(\"Is Christmas daylight saving time? {0}\",\n      arg0: christmas.IsDaylightSavingTime());\n    WriteLine(\"Is July 4th daylight saving time? {0}\",\n      arg0: independenceDay.IsDaylightSavingTime()); \n    ```", "```cs\n    2020 is a leap year: True. There are 29 days in February 2020.\n    2021 is a leap year: False. There are 28 days in February 2021.\n    2022 is a leap year: False. There are 28 days in February 2022.\n    2023 is a leap year: False. There are 28 days in February 2023.\n    2024 is a leap year: True. There are 29 days in February 2024.\n    2025 is a leap year: False. There are 28 days in February 2025.\n    Is Christmas daylight saving time? False\n    Is July 4th daylight saving time? True \n    ```", "```cs\n    DateOnly queensBirthday = new(year: 2022, month: 4, day: 21);\n    WriteLine($\"The Queen's next birthday is on {queensBirthday}.\");\n    TimeOnly partyStarts = new(hour: 20, minute: 30);\n    WriteLine($\"The Queen's party starts at {partyStarts}.\");\n    DateTime calendarEntry = queensBirthday.ToDateTime(partyStarts);\n    WriteLine($\"Add to your calendar: {calendarEntry}.\"); \n    ```", "```cs\n    The Queen's next birthday is on 21/04/2022.\n    The Queen's party starts at 20:30.\n    Add to your calendar: 21/04/2022 20:30:00. \n    ```", "```cs\n    using System.Text.RegularExpressions; \n    ```", "```cs\n    Write(\"Enter your age: \"); \n    string? input = ReadLine();\n    Regex ageChecker = new(@\"\\d\"); \n    if (ageChecker.IsMatch(input))\n    {\n      WriteLine(\"Thank you!\");\n    }\n    else\n    {\n      WriteLine($\"This is not a valid age: {input}\");\n    } \n    ```", "```cs\n    Enter your age: 34 \n    Thank you! \n    ```", "```cs\n    Enter your age: carrots\n    This is not a valid age: carrots \n    ```", "```cs\n    Enter your age: bob30smith \n    Thank you! \n    ```", "```cs\n    Regex ageChecker = new(@\"^**\\d$\"**); \n    ```", "```cs\n    Regex ageChecker = new(@\"^**\\d+$\"**); \n    ```", "```cs\n\"Monsters, Inc.\",\"I, Tonya\",\"Lock, Stock and Two Smoking Barrels\" \n```", "```cs\n    string films = \"\\\"Monsters, Inc.\\\",\\\"I, Tonya\\\",\\\"Lock, Stock and Two Smoking Barrels\\\"\";\n    WriteLine($\"Films to split: {films}\");\n    string[] filmsDumb = films.Split(',');\n    WriteLine(\"Splitting with string.Split method:\"); \n    foreach (string film in filmsDumb)\n    {\n      WriteLine(film);\n    } \n    ```", "```cs\n    WriteLine();\n    Regex csv = new(\n      \"(?:^|,)(?=[^\\\"]|(\\\")?)\\\"?((?(1)[^\\\"]*|[^,\\\"]*))\\\"?(?=,|$)\");\n    MatchCollection filmsSmart = csv.Matches(films);\n    WriteLine(\"Splitting with regular expression:\"); \n    foreach (Match film in filmsSmart)\n    {\n      WriteLine(film.Groups[2].Value);\n    } \n    ```", "```cs\n    Splitting with string.Split method: \n    \"Monsters\n     Inc.\" \n    \"I\n     Tonya\" \n    \"Lock\n     Stock and Two Smoking Barrels\" \n    Splitting with regular expression: \n    Monsters, Inc.\n    I, Tonya\n    Lock, Stock and Two Smoking Barrels \n    ```", "```cs\nnamespace System.Collections\n{\n  public interface ICollection : IEnumerable\n  {\n    int Count { get; }\n    bool IsSynchronized { get; }\n    object SyncRoot { get; }\n    void CopyTo(Array array, int index);\n  }\n} \n```", "```cs\nint howMany = passengers.Count; \n```", "```cs\nnamespace System.Collections\n{\n  public interface IEnumerable\n  {\n    IEnumerator GetEnumerator();\n  }\n}\nnamespace System.Collections\n{\n  public interface IEnumerator\n  {\n    object Current { get; }\n    bool MoveNext();\n    void Reset();\n  }\n} \n```", "```cs\nforeach (Passenger p in passengers)\n{\n  // perform an action on each passenger\n} \n```", "```cs\nnamespace System.Collections.Generic\n{\n  public interface ICollection<T> : IEnumerable<T>, IEnumerable\n  {\n    int Count { get; }\n    bool IsReadOnly { get; }\n    void Add(T item);\n    void Clear();\n    bool Contains(T item);\n    void CopyTo(T[] array, int index);\n    bool Remove(T item);\n  }\n} \n```", "```cs\nList<string> names = new();\nnames.EnsureCapacity(10_000);\n// load ten thousand names into the list \n```", "```cs\nnamespace System.Collections.Generic\n{\n  [DefaultMember(\"Item\")] // aka this indexer\n  public interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable\n  {\n    T this[int index] { get; set; }\n    int IndexOf(T item);\n    void Insert(int index, T item);\n    void RemoveAt(int index);\n  }\n} \n```", "```cs\nnamespace System.Collections.Generic\n{\n  [DefaultMember(\"Item\")] // aka this indexer\n  public interface IDictionary<TKey, TValue>\n    : ICollection<KeyValuePair<TKey, TValue>>,\n      IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable\n  {\n    TValue this[TKey key] { get; set; }\n    ICollection<TKey> Keys { get; }\n    ICollection<TValue> Values { get; }\n    void Add(TKey key, TValue value);\n    bool ContainsKey(TKey key);\n    bool Remove(TKey key);\n    bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);\n  }\n} \n```", "```cs\nnamespace System.Collections.Generic\n{\n  public readonly struct KeyValuePair<TKey, TValue>\n  {\n    public KeyValuePair(TKey key, TValue value);\n    public TKey Key { get; }\n    public TValue Value { get; }\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    public void Deconstruct(out TKey key, out TValue value);\n    public override string ToString();\n  }\n} \n```", "```cs\n    static void Output(string title, IEnumerable<string> collection)\n    {\n      WriteLine(title);\n      foreach (string item in collection)\n      {\n        WriteLine($\"  {item}\");\n      }\n    } \n    ```", "```cs\n    static void WorkingWithLists()\n    {\n      // Simple syntax for creating a list and adding three items\n      List<string> cities = new(); \n      cities.Add(\"London\"); \n      cities.Add(\"Paris\"); \n      cities.Add(\"Milan\");\n      /* Alternative syntax that is converted by the compiler into\n         the three Add method calls above\n      List<string> cities = new()\n        { \"London\", \"Paris\", \"Milan\" };\n      */\n      /* Alternative syntax that passes an \n         array of string values to AddRange method\n      List<string> cities = new(); \n      cities.AddRange(new[] { \"London\", \"Paris\", \"Milan\" });\n      */\n      Output(\"Initial list\", cities);\n      WriteLine($\"The first city is {cities[0]}.\"); \n      WriteLine($\"The last city is {cities[cities.Count - 1]}.\");\n      cities.Insert(0, \"Sydney\");\n      Output(\"After inserting Sydney at index 0\", cities); \n      cities.RemoveAt(1); \n      cities.Remove(\"Milan\");\n      Output(\"After removing two cities\", cities);\n    } \n    ```", "```cs\n    WorkingWithLists(); \n    ```", "```cs\n    Initial list\n      London\n      Paris\n      Milan\n    The first city is London. \n    The last city is Milan.\n    After inserting Sydney at index 0\n      Sydney\n      London\n      Paris\n      Milan\n    After removing two cities\n      Sydney\n      Paris \n    ```", "```cs\n    static void WorkingWithDictionaries()\n    {\n      Dictionary<string, string> keywords = new();\n      // add using named parameters\n      keywords.Add(key: \"int\", value: \"32-bit integer data type\");\n      // add using positional parameters\n      keywords.Add(\"long\", \"64-bit integer data type\"); \n      keywords.Add(\"float\", \"Single precision floating point number\");\n      /* Alternative syntax; compiler converts this to calls to Add method\n      Dictionary<string, string> keywords = new()\n      {\n        { \"int\", \"32-bit integer data type\" },\n        { \"long\", \"64-bit integer data type\" },\n        { \"float\", \"Single precision floating point number\" },\n      }; */\n      /* Alternative syntax; compiler converts this to calls to Add method\n      Dictionary<string, string> keywords = new()\n      {\n        [\"int\"] = \"32-bit integer data type\",\n        [\"long\"] = \"64-bit integer data type\",\n        [\"float\"] = \"Single precision floating point number\", // last comma is optional\n      }; */\n      Output(\"Dictionary keys:\", keywords.Keys);\n      Output(\"Dictionary values:\", keywords.Values);\n      WriteLine(\"Keywords and their definitions\");\n      foreach (KeyValuePair<string, string> item in keywords)\n      {\n        WriteLine($\"  {item.Key}: {item.Value}\");\n      }\n      // lookup a value using a key\n      string key = \"long\";\n      WriteLine($\"The definition of {key} is {keywords[key]}\");\n    } \n    ```", "```cs\n    // WorkingWithLists();\n    WorkingWithDictionaries(); \n    ```", "```cs\n    Dictionary keys:\n      int\n      long\n      float\n    Dictionary values:\n      32-bit integer data type\n      64-bit integer data type\n      Single precision floating point number\n    Keywords and their definitions\n      int: 32-bit integer data type\n      long: 64-bit integer data type\n      float: Single precision floating point number\n    The definition of long is 64-bit integer data type \n    ```", "```cs\n    static void WorkingWithQueues()\n    {\n      Queue<string> coffee = new();\n      coffee.Enqueue(\"Damir\"); // front of queue\n      coffee.Enqueue(\"Andrea\");\n      coffee.Enqueue(\"Ronald\");\n      coffee.Enqueue(\"Amin\");\n      coffee.Enqueue(\"Irina\"); // back of queue\n      Output(\"Initial queue from front to back\", coffee);\n      // server handles next person in queue\n      string served = coffee.Dequeue();\n      WriteLine($\"Served: {served}.\");\n      // server handles next person in queue\n      served = coffee.Dequeue();\n      WriteLine($\"Served: {served}.\");\n      Output(\"Current queue from front to back\", coffee);\n      WriteLine($\"{coffee.Peek()} is next in line.\");\n      Output(\"Current queue from front to back\", coffee);\n    } \n    ```", "```cs\n    Initial queue from front to back\n      Damir\n      Andrea\n      Ronald\n      Amin\n      Irina\n    Served: Damir.\n    Served: Andrea.\n    Current queue from front to back\n      Ronald\n      Amin\n      Irina\n    Ronald is next in line.\n    Current queue from front to back\n      Ronald\n      Amin\n      Irina \n    ```", "```cs\n    static void OutputPQ<TElement, TPriority>(string title,\n      IEnumerable<(TElement Element, TPriority Priority)> collection)\n    {\n      WriteLine(title);\n      foreach ((TElement, TPriority) item in collection)\n      {\n        WriteLine($\"  {item.Item1}: {item.Item2}\");\n      }\n    } \n    ```", "```cs\n    static void WorkingWithPriorityQueues()\n    {\n      PriorityQueue<string, int> vaccine = new();\n      // add some people\n      // 1 = high priority people in their 70s or poor health\n      // 2 = medium priority e.g. middle aged\n      // 3 = low priority e.g. teens and twenties\n      vaccine.Enqueue(\"Pamela\", 1);  // my mum (70s)\n      vaccine.Enqueue(\"Rebecca\", 3); // my niece (teens)\n      vaccine.Enqueue(\"Juliet\", 2);  // my sister (40s)\n      vaccine.Enqueue(\"Ian\", 1);     // my dad (70s)\n      OutputPQ(\"Current queue for vaccination:\", vaccine.UnorderedItems);\n      WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n      WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n      OutputPQ(\"Current queue for vaccination:\", vaccine.UnorderedItems);\n      WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n      vaccine.Enqueue(\"Mark\", 2); // me (40s)\n      WriteLine($\"{vaccine.Peek()} will be next to be vaccinated.\");\n      OutputPQ(\"Current queue for vaccination:\", vaccine.UnorderedItems);\n    } \n    ```", "```cs\n    Current queue for vaccination:\n      Pamela: 1\n      Rebecca: 3\n      Juliet: 2\n      Ian: 1\n    Pamela has been vaccinated.\n    Ian has been vaccinated.\n    Current queue for vaccination:\n      Juliet: 2\n      Rebecca: 3\n    Juliet has been vaccinated.\n    Mark will be next to be vaccinated.\n    Current queue for vaccination:\n      Mark: 2\n      Rebecca: 3 \n    ```", "```cs\n    ImmutableList<string> immutableCities = cities.ToImmutableList();\n    ImmutableList<string> newList = immutableCities.Add(\"Rio\");\n    Output(\"Immutable list of cities:\", immutableCities); \n    Output(\"New list of cities:\", newList); \n    ```", "```cs\n    Immutable list of cities:\n      Sydney\n      Paris\n    New list of cities:\n      Sydney\n      Paris\n      Rio \n    ```", "```cs\nvoid ProcessCollection<T>(IEnumerable<T> collection)\n{\n  // process the items in the collection,\n  // perhaps using a foreach statement\n} \n```", "```cs\nvoid ProcessCollection<T>(**List<T>** collection)\n{\n  // process the items in the collection,\n  // perhaps using a foreach statement\n} \n```", "```cs\nint index = 3;\nPerson p = people[index]; // fourth person in array\nchar letter = name[index]; // fourth letter in name \n```", "```cs\n// two ways to define the same index, 3 in from the start \nIndex i1 = new(value: 3); // counts from the start \nIndex i2 = 3; // using implicit int conversion operator\n// two ways to define the same index, 5 in from the end\nIndex i3 = new(value: 5, fromEnd: true); \nIndex i4 = ^5; // using the caret operator \n```", "```cs\nRange r1 = new(start: new Index(3), end: new Index(7));\nRange r2 = new(start: 3, end: 7); // using implicit int conversion\nRange r3 = 3..7; // using C# 8.0 or later syntax\nRange r4 = Range.StartAt(3); // from index 3 to last index\nRange r5 = 3..; // from index 3 to last index\nRange r6 = Range.EndAt(3); // from index 0 to index 3\nRange r7 = ..3; // from index 0 to index 3 \n```", "```cs\n    string name = \"Samantha Jones\";\n    // Using Substring\n    int lengthOfFirst = name.IndexOf(' ');\n    int lengthOfLast = name.Length - lengthOfFirst - 1;\n    string firstName = name.Substring(\n      startIndex: 0,\n      length: lengthOfFirst);\n    string lastName = name.Substring(\n      startIndex: name.Length - lengthOfLast,\n      length: lengthOfLast);\n    WriteLine($\"First name: {firstName}, Last name: {lastName}\");\n    // Using spans\n    ReadOnlySpan<char> nameAsSpan = name.AsSpan();\n    ReadOnlySpan<char> firstNameSpan = nameAsSpan[0..lengthOfFirst]; \n    ReadOnlySpan<char> lastNameSpan = nameAsSpan[^lengthOfLast..^0];\n    WriteLine(\"First name: {0}, Last name: {1}\", \n      arg0: firstNameSpan.ToString(),\n      arg1: lastNameSpan.ToString()); \n    ```", "```cs\n    First name: Samantha, Last name: Jones \n    First name: Samantha, Last name: Jones \n    ```", "```cs\n    using System.Net; // IPHostEntry, Dns, IPAddress \n    ```", "```cs\n    Write(\"Enter a valid web address: \"); \n    string? url = ReadLine();\n    if (string.IsNullOrWhiteSpace(url))\n    {\n      url = \"https://stackoverflow.com/search?q=securestring\";\n    }\n    Uri uri = new(url);\n    WriteLine($\"URL: {url}\"); \n    WriteLine($\"Scheme: {uri.Scheme}\"); \n    WriteLine($\"Port: {uri.Port}\"); \n    WriteLine($\"Host: {uri.Host}\"); \n    WriteLine($\"Path: {uri.AbsolutePath}\"); \n    WriteLine($\"Query: {uri.Query}\"); \n    ```", "```cs\n    Enter a valid web address:\n    URL: https://stackoverflow.com/search?q=securestring \n    Scheme: https\n    Port: 443\n    Host: stackoverflow.com \n    Path: /search\n    Query: ?q=securestring \n    ```", "```cs\n    IPHostEntry entry = Dns.GetHostEntry(uri.Host); \n    WriteLine($\"{entry.HostName} has the following IP addresses:\"); \n    foreach (IPAddress address in entry.AddressList)\n    {\n      WriteLine($\"  {address} ({address.AddressFamily})\");\n    } \n    ```", "```cs\n    stackoverflow.com has the following IP addresses: \n      151.101.193.69 (InterNetwork)\n      151.101.129.69 (InterNetwork)\n      151.101.1.69 (InterNetwork)\n      151.101.65.69 (InterNetwork) \n    ```", "```cs\n    using System.Net.NetworkInformation; // Ping, PingReply, IPStatus \n    ```", "```cs\n    try\n    {\n      Ping ping = new();\n      WriteLine(\"Pinging server. Please wait...\");\n      PingReply reply = ping.Send(uri.Host);\n      WriteLine($\"{uri.Host} was pinged and replied: {reply.Status}.\");\n      if (reply.Status == IPStatus.Success)\n      {\n        WriteLine(\"Reply from {0} took {1:N0}ms\", \n          arg0: reply.Address,\n          arg1: reply.RoundtripTime);\n      }\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType().ToString()} says {ex.Message}\");\n    } \n    ```", "```cs\n    Pinging server. Please wait...\n    stackoverflow.com was pinged and replied: Success.\n    Reply from 151.101.193.69 took 18ms took 136ms \n    ```", "```cs\n    Enter a valid web address: http://google.com\n    URL: http://google.com\n    Scheme: http\n    Port: 80\n    Host: google.com\n    Path: /\n    Query: \n    google.com has the following IP addresses:\n      2a00:1450:4009:807::200e (InterNetworkV6)\n      216.58.204.238 (InterNetwork)\n    Pinging server. Please wait...\n    google.com was pinged and replied: Success.\n    Reply from 2a00:1450:4009:807::200e took 24ms \n    ```", "```cs\n// an assembly-level attribute\n[assembly: AssemblyTitle(\"Working with Reflection\")]\n// a type-level attribute\n[Serializable] \npublic class Person\n{\n  // a member-level attribute \n  [Obsolete(\"Deprecated: use Run instead.\")] \n  public void Walk()\n  {\n... \n```", "```cs\n    using System.Reflection; // Assembly \n    ```", "```cs\n    WriteLine(\"Assembly metadata:\");\n    Assembly? assembly = Assembly.GetEntryAssembly();\n    if (assembly is null)\n    {\n      WriteLine(\"Failed to get entry assembly.\");\n      return;\n    }\n    WriteLine($\"  Full name: {assembly.FullName}\"); \n    WriteLine($\"  Location: {assembly.Location}\");\n    IEnumerable<Attribute> attributes = assembly.GetCustomAttributes(); \n    WriteLine($\"  Assembly-level attributes:\");\n    foreach (Attribute a in attributes)\n    {\n      WriteLine($\"   {a.GetType()}\");\n    } \n    ```", "```cs\n    Assembly metadata:\n      Full name: WorkingWithReflection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n      Location: /Users/markjprice/Code/Chapter08/WorkingWithReflection/bin/Debug/net6.0/WorkingWithReflection.dll\n      Assembly-level attributes:\n        System.Runtime.CompilerServices.CompilationRelaxationsAttribute\n        System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\n        System.Diagnostics.DebuggableAttribute\n        System.Runtime.Versioning.TargetFrameworkAttribute\n        System.Reflection.AssemblyCompanyAttribute\n        System.Reflection.AssemblyConfigurationAttribute\n        System.Reflection.AssemblyFileVersionAttribute\n        System.Reflection.AssemblyInformationalVersionAttribute\n        System.Reflection.AssemblyProductAttribute\n        System.Reflection.AssemblyTitleAttribute \n    ```", "```cs\n    AssemblyInformationalVersionAttribute? version = assembly\n      .GetCustomAttribute<AssemblyInformationalVersionAttribute>(); \n    WriteLine($\"  Version: {version?.InformationalVersion}\");\n    AssemblyCompanyAttribute? company = assembly\n      .GetCustomAttribute<AssemblyCompanyAttribute>();\n    WriteLine($\"  Company: {company?.Company}\"); \n    ```", "```cs\n     Version: 1.0.0\n      Company: WorkingWithReflection \n    ```", "```cs\n    [assembly: AssemblyCompany(\"Packt Publishing\")] \n    [assembly: AssemblyInformationalVersion(\"1.3.0\")] \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n     **<Version>****6.3.12****</Version>**\n     **<Company>Packt Publishing</Company>**\n      </PropertyGroup>\n    </Project> \n    ```", "```cs\n     Version: 6.3.12\n      Company: Packt Publishing \n    ```", "```cs\n    namespace Packt.Shared;\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, \n      AllowMultiple = true)]\n    public class CoderAttribute : Attribute\n    {\n      public string Coder { get; set; }\n      public DateTime LastModified { get; set; }\n      public CoderAttribute(string coder, string lastModified)\n      {\n        Coder = coder;\n        LastModified = DateTime.Parse(lastModified);\n      }\n    } \n    ```", "```cs\n    using System.Runtime.CompilerServices; // CompilerGeneratedAttribute\n    using Packt.Shared; // CoderAttribute \n    ```", "```cs\n    class Animal\n    {\n      [Coder(\"Mark Price\", \"22 August 2021\")]\n      [Coder(\"Johnni Rasmussen\", \"13 September 2021\")] \n      public void Speak()\n      {\n        WriteLine(\"Woof...\");\n      }\n    } \n    ```", "```cs\n    WriteLine(); \n    WriteLine($\"* Types:\");\n    Type[] types = assembly.GetTypes();\n    foreach (Type type in types)\n    {\n      WriteLine();\n      WriteLine($\"Type: {type.FullName}\"); \n      MemberInfo[] members = type.GetMembers();\n      foreach (MemberInfo member in members)\n      {\n        WriteLine(\"{0}: {1} ({2})\",\n          arg0: member.MemberType,\n          arg1: member.Name,\n          arg2: member.DeclaringType?.Name);\n        IOrderedEnumerable<CoderAttribute> coders = \n          member.GetCustomAttributes<CoderAttribute>()\n          .OrderByDescending(c => c.LastModified);\n        foreach (CoderAttribute coder in coders)\n        {\n          WriteLine(\"-> Modified by {0} on {1}\",\n            coder.Coder, coder.LastModified.ToShortDateString());\n        }\n      }\n    } \n    ```", "```cs\n    * Types:\n    ...\n    Type: Animal\n    Method: Speak (Animal)\n    -> Modified by Johnni Rasmussen on 13/09/2021\n    -> Modified by Mark Price on 22/08/2021\n    Method: GetType (Object)\n    Method: ToString (Object)\n    Method: Equals (Object)\n    Method: GetHashCode (Object)\n    Constructor: .ctor (Program)\n    ...\n    Type: <Program>$+<>c\n    Method: GetType (Object)\n    Method: ToString (Object)\n    Method: Equals (Object)\n    Method: GetHashCode (Object)\n    Constructor: .ctor (<>c)\n    Field: <>9 (<>c)\n    Field: <>9__0_0 (<>c) \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"SixLabors.ImageSharp\" Version=\"1.0.3\" />\n    </ItemGroup> \n    ```", "```cs\n    using SixLabors.ImageSharp;\n    using SixLabors.ImageSharp.Processing; \n    ```", "```cs\n    string imagesFolder = Path.Combine(\n      Environment.CurrentDirectory, \"images\");\n    IEnumerable<string> images =\n      Directory.EnumerateFiles(imagesFolder);\n    foreach (string imagePath in images)\n    {\n      string thumbnailPath = Path.Combine(\n        Environment.CurrentDirectory, \"images\",   \n        Path.GetFileNameWithoutExtension(imagePath)\n        + \"-thumbnail\" + Path.GetExtension(imagePath));\n      using (Image image = Image.Load(imagePath))\n      {\n        image.Mutate(x => x.Resize(image.Width / 10, image.Height / 10));   \n        image.Mutate(x => x.Grayscale());\n        image.Save(thumbnailPath);\n      }\n    }\n    WriteLine(\"Image processing complete. View the images folder.\"); \n    ```", "```cs\n    using System.Globalization; // CultureInfo \n    ```", "```cs\n    CultureInfo globalization = CultureInfo.CurrentCulture; \n    CultureInfo localization = CultureInfo.CurrentUICulture;\n    WriteLine(\"The current globalization culture is {0}: {1}\",\n      globalization.Name, globalization.DisplayName);\n    WriteLine(\"The current localization culture is {0}: {1}\",\n      localization.Name, localization.DisplayName);\n    WriteLine();\n    WriteLine(\"en-US: English (United States)\"); \n    WriteLine(\"da-DK: Danish (Denmark)\"); \n    WriteLine(\"fr-CA: French (Canada)\"); \n    Write(\"Enter an ISO culture code: \");  \n    string? newCulture = ReadLine();\n    if (!string.IsNullOrEmpty(newCulture))\n    {\n      CultureInfo ci = new(newCulture); \n      // change the current cultures\n      CultureInfo.CurrentCulture = ci;\n      CultureInfo.CurrentUICulture = ci;\n    }\n    WriteLine();\n    Write(\"Enter your name: \"); \n    string? name = ReadLine();\n    Write(\"Enter your date of birth: \"); \n    string? dob = ReadLine();\n    Write(\"Enter your salary: \"); \n    string? salary = ReadLine();\n    DateTime date = DateTime.Parse(dob);\n    int minutes = (int)DateTime.Today.Subtract(date).TotalMinutes; \n    decimal earns = decimal.Parse(salary);\n    WriteLine(\n      \"{0} was born on a {1:dddd}, is {2:N0} minutes old, and earns {3:C}\",\n      name, date, minutes, earns); \n    ```", "```cs\n    Enter an ISO culture code: en-GB \n    Enter your name: Alice\n    Enter your date of birth: 30/3/1967 \n    Enter your salary: 23500\n    Alice was born on a Thursday, is 25,469,280 minutes old, and earns\n    £23,500.00 \n    ```", "```cs\n    Enter an ISO culture code: da-DK \n    Enter your name: Mikkel\n    Enter your date of birth: 12/3/1980 \n    Enter your salary: 340000\n    Mikkel was born on a onsdag, is 18.656.640 minutes old, and earns 340.000,00 kr. \n    ```", "```cs\nThe default regular expression checks for at least one digit.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$ \nEnter some input: apples\napples matches ^[a-z]+$? True\nPress ESC to end or any key to try again.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$ \nEnter some input: abc123xyz\nabc123xyz matches ^[a-z]+$? False\nPress ESC to end or any key to try again. \n```"]