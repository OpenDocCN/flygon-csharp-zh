["```cs\nvar resultOfOperation = firstOperand operator secondOperand; \n```", "```cs\nint x = 5;\nint y = 3;\nint resultOfAdding = x + y;\nint resultOfMultiplying = x * y; \n```", "```cs\nvar resultOfOperation = onlyOperand operator; \nvar resultOfOperation2 = operator onlyOperand; \n```", "```cs\nint x = 5;\nint postfixIncrement = x++;\nint prefixIncrement = ++x;\nType theTypeOfAnInteger = typeof(int); \nint howManyBytesInAnInteger = sizeof(int); \n```", "```cs\nvar resultOfOperation = firstOperand firstOperator \n  secondOperand secondOperator thirdOperand; \n```", "```cs\n    int a = 3; \n    int b = a++;\n    WriteLine($\"a is {a}, b is {b}\"); \n    ```", "```cs\n    a is 4, b is 3 \n    ```", "```cs\n    int c = 3;\n    int d = ++c; // increment c before assigning it\n    WriteLine($\"c is {c}, d is {d}\"); \n    ```", "```cs\n    a is 4, b is 3\n    c is 4, d is 4 \n    ```", "```cs\n    int e = 11; \n    int f = 3;\n    WriteLine($\"e is {e}, f is {f}\"); \n    WriteLine($\"e + f = {e + f}\"); \n    WriteLine($\"e - f = {e - f}\"); \n    WriteLine($\"e * f = {e * f}\"); \n    WriteLine($\"e / f = {e / f}\"); \n    WriteLine($\"e % f = {e % f}\"); \n    ```", "```cs\n    e is 11, f is 3 \n    e + f = 14\n    e - f = 8 \n    e * f = 33 \n    e / f = 3 \n    e % f = 2 \n    ```", "```cs\n    double g = 11.0;\n    WriteLine($\"g is {g:N1}, f is {f}\"); \n    WriteLine($\"g / f = {g / f}\"); \n    ```", "```cs\n    g is 11.0, f is 3\n    g / f = 3.6666666666666665 \n    ```", "```cs\nint p = 6;\np += 3; // equivalent to p = p + 3;\np -= 3; // equivalent to p = p - 3;\np *= 3; // equivalent to p = p * 3;\np /= 3; // equivalent to p = p / 3; \n```", "```cs\n    bool a = true;\n    bool b = false;\n    WriteLine($\"AND  | a     | b    \");\n    WriteLine($\"a    | {a & a,-5} | {a & b,-5} \");\n    WriteLine($\"b    | {b & a,-5} | {b & b,-5} \");\n    WriteLine();\n    WriteLine($\"OR   | a     | b    \");\n    WriteLine($\"a    | {a | a,-5} | {a | b,-5} \");\n    WriteLine($\"b    | {b | a,-5} | {b | b,-5} \");\n    WriteLine();\n    WriteLine($\"XOR  | a     | b    \");\n    WriteLine($\"a    | {a ^ a,-5} | {a ^ b,-5} \");\n    WriteLine($\"b    | {b ^ a,-5} | {b ^ b,-5} \"); \n    ```", "```cs\n    AND  | a     | b    \n    a    | True  | False \n    b    | False | False \n    OR   | a     | b    \n    a    | True  | True  \n    b    | True  | False \n    XOR  | a     | b    \n    a    | False | True  \n    b    | True  | False \n    ```", "```cs\n    static bool DoStuff()\n    {\n      WriteLine(\"I am doing some stuff.\");\n      return true;\n    } \n    ```", "```cs\n    WriteLine();\n    WriteLine($\"a & DoStuff() = {a & DoStuff()}\"); \n    WriteLine($\"b & DoStuff() = {b & DoStuff()}\"); \n    ```", "```cs\n    I am doing some stuff. \n    a & DoStuff() = True\n    I am doing some stuff. \n    b & DoStuff() = False \n    ```", "```cs\n    WriteLine($\"a && DoStuff() = {a && DoStuff()}\"); \n    WriteLine($\"b && DoStuff() = {b && DoStuff()}\"); \n    ```", "```cs\n    I am doing some stuff. \n    a && DoStuff() = True\n    b && DoStuff() = False // DoStuff function was not executed! \n    ```", "```cs\n    int a = 10; // 00001010\n    int b = 6;  // 00000110\n    WriteLine($\"a = {a}\");\n    WriteLine($\"b = {b}\");\n    WriteLine($\"a & b = {a & b}\"); // 2-bit column only \n    WriteLine($\"a | b = {a | b}\"); // 8, 4, and 2-bit columns \n    WriteLine($\"a ^ b = {a ^ b}\"); // 8 and 4-bit columns \n    ```", "```cs\n    a = 10\n    b = 6\n    a & b = 2 \n    a | b = 14\n    a ^ b = 12 \n    ```", "```cs\n    // 01010000 left-shift a by three bit columns\n    WriteLine($\"a << 3 = {a << 3}\");\n    // multiply a by 8\n    WriteLine($\"a * 8 = {a * 8}\");\n    // 00000011 right-shift b by one bit column\n    WriteLine($\"b >> 1 = {b >> 1}\"); \n    ```", "```cs\n    a << 3 = 80\n    a * 8 = 80\n    b >> 1 = 3 \n    ```", "```cs\n    static string ToBinaryString(int value)\n    {\n      return Convert.ToString(value, toBase: 2).PadLeft(8, '0');\n    } \n    ```", "```cs\n    WriteLine();\n    WriteLine(\"Outputting integers as binary:\");\n    WriteLine($\"a =     {ToBinaryString(a)}\");\n    WriteLine($\"b =     {ToBinaryString(b)}\");\n    WriteLine($\"a & b = {ToBinaryString(a & b)}\");\n    WriteLine($\"a | b = {ToBinaryString(a | b)}\");\n    WriteLine($\"a ^ b = {ToBinaryString(a ^ b)}\"); \n    ```", "```cs\n    Outputting integers as binary:\n    a =     00001010\n    b =     00000110\n    a & b = 00000010\n    a | b = 00001110\n    a ^ b = 00001100 \n    ```", "```cs\nint age = 47;\n// How many operators in the following statement?\nchar firstDigit = age.ToString()[0];\n// There are four operators:\n// = is the assignment operator\n// . is the member access operator\n// () is the invocation operator\n// [] is the indexer access operator \n```", "```cs\nif (expression1)\n{\n  // runs if expression1 is true\n}\nelse if (expression2)\n{\n  // runs if expression1 is false and expression2 if true\n}\nelse if (expression3)\n{\n  // runs if expression1 and expression2 are false\n  // and expression3 is true\n}\nelse\n{\n  // runs if all expressions are false\n} \n```", "```cs\n    string password = \"ninja\";\n    if (password.Length < 8)\n    {\n      WriteLine(\"Your password is too short. Use at least 8 characters.\");\n    }\n    else\n    {\n      WriteLine(\"Your password is strong.\");\n    } \n    ```", "```cs\n     Your password is too short. Use at least 8 characters. \n    ```", "```cs\nif (password.Length < 8)\n  WriteLine(\"Your password is too short. Use at least 8 characters.\"); \nelse\n  WriteLine(\"Your password is strong.\"); \n```", "```cs\n    // add and remove the \"\" to change the behavior\n    object o = \"3\"; \n    int j = 4;\n    if (o is int i)\n    {\n      WriteLine($\"{i} x {j} = {i * j}\");\n    }\n    else\n    {\n      WriteLine(\"o is not an int so it cannot multiply!\");\n    } \n    ```", "```cs\n    o is not an int so it cannot multiply! \n    ```", "```cs\n    3 x 4 = 12 \n    ```", "```cs\n    int number = (new Random()).Next(1, 7); \n    WriteLine($\"My random number is {number}\");\n    switch (number)\n    {\n      case 1: \n        WriteLine(\"One\");\n        break; // jumps to end of switch statement\n      case 2:\n        WriteLine(\"Two\");\n        goto case 1;\n      case 3: // multiple case section\n      case 4:\n        WriteLine(\"Three or four\");\n        goto case 1;\n      case 5:\n        goto A_label;\n      default:\n        WriteLine(\"Default\");\n        break;\n    } // end of switch statement\n    WriteLine(\"After end of switch\");\n    A_label:\n    WriteLine($\"After A_label\"); \n    ```", "```cs\n    // first random run\n    My random number is 4 \n    Three or four\n    One\n    After end of switch\n    After A_label\n    // second random run\n    My random number is 2 \n    Two\n    One\n    After end of switch\n    After A_label\n    // third random run\n    My random number is 6\n    Default\n    After end of switch\n    After A_label\n    // fourth random run\n    My random number is 1 \n    One\n    After end of switch\n    After A_label\n    // fifth random run\n    My random number is 5\n    After A_label \n    ```", "```cs\n    // string path = \"/Users/markjprice/Code/Chapter03\";\n    string path = @\"C:\\Code\\Chapter03\";\n    Write(\"Press R for read-only or W for writeable: \"); \n    ConsoleKeyInfo key = ReadKey();\n    WriteLine();\n    Stream? s;\n    if (key.Key == ConsoleKey.R)\n    {\n      s =  File.Open(\n        Path.Combine(path, \"file.txt\"), \n        FileMode.OpenOrCreate, \n        FileAccess.Read);\n    }\n    else\n    {\n      s =  File.Open( \n        Path.Combine(path, \"file.txt\"), \n        FileMode.OpenOrCreate, \n        FileAccess.Write);\n    }\n    string message; \n    switch (s)\n    {\n      case FileStream writeableFile when s.CanWrite:\n        message = \"The stream is a file that I can write to.\";\n        break;\n      case FileStream readOnlyFile:\n        message = \"The stream is a read-only file.\";\n        break;\n      case MemoryStream ms:\n        message = \"The stream is a memory address.\";\n        break;\n      default: // always evaluated last despite its current position\n        message = \"The stream is some other type.\";\n        break;\n      case null:\n        message = \"The stream is null.\";\n        break;\n    }\n    WriteLine(message); \n    ```", "```cs\n    The stream is a file that I can write to. \n    ```", "```cs\n    message = s switch\n    {\n      FileStream writeableFile when s.CanWrite\n        => \"The stream is a file that I can write to.\", \n      FileStream readOnlyFile\n        => \"The stream is a read-only file.\", \n      MemoryStream ms\n        => \"The stream is a memory address.\", \n      null\n        => \"The stream is null.\",\n      _\n        => \"The stream is some other type.\"\n    };\n    WriteLine(message); \n    ```", "```cs\n    int x = 0;\n    while (x < 10)\n    {\n      WriteLine(x);\n      x++;\n    } \n    ```", "```cs\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9 \n    ```", "```cs\n    string? password;\n    do\n    {\n      Write(\"Enter your password: \"); \n      password = ReadLine();\n    }\n    while (password != \"Pa$$w0rd\");\n    WriteLine(\"Correct!\"); \n    ```", "```cs\n    Enter your password: password \n    Enter your password: 12345678 \n    Enter your password: ninja\n    Enter your password: correct horse battery staple \n    Enter your password: Pa$$w0rd\n    Correct! \n    ```", "```cs\n    for (int y = 1; y <= 10; y++)\n    {\n      WriteLine(y);\n    } \n    ```", "```cs\n    string[] names = { \"Adam\", \"Barry\", \"Charlie\" };\n    foreach (string name in names)\n    {\n      WriteLine($\"{name} has {name.Length} characters.\");\n    } \n    ```", "```cs\n    Adam has 4 characters. \n    Barry has 5 characters. \n    Charlie has 7 characters. \n    ```", "```cs\nIEnumerator e = names.GetEnumerator();\nwhile (e.MoveNext())\n{\n  string name = (string)e.Current; // Current is read-only!\n  WriteLine($\"{name} has {name.Length} characters.\");\n} \n```", "```cs\n    int a = 10;\n    double b = a; // an int can be safely cast into a double\n    WriteLine(b); \n    ```", "```cs\n    double c = 9.8;\n    int d = c; // compiler gives an error for this line\n    WriteLine(d); \n    ```", "```cs\n    Error: (6,9): error CS0266: Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?) \n    ```", "```cs\n    int d = (int)c;\n    WriteLine(d); // d is 9 losing the .8 part \n    ```", "```cs\n    10\n    9 \n    ```", "```cs\n    long e = 10; \n    int f = (int)e;\n    WriteLine($\"e is {e:N0} and f is {f:N0}\"); \n    e = long.MaxValue;\n    f = (int)e;\n    WriteLine($\"e is {e:N0} and f is {f:N0}\"); \n    ```", "```cs\n    e is 10 and f is 10\n    e is 9,223,372,036,854,775,807 and f is -1 \n    ```", "```cs\n    e = 5_000_000_000; \n    ```", "```cs\n    e is 5,000,000,000 and f is 705,032,704 \n    ```", "```cs\n    using static System.Convert; \n    ```", "```cs\n    double g = 9.8;\n    int h = ToInt32(g); // a method of System.Convert\n    WriteLine($\"g is {g} and h is {h}\"); \n    ```", "```cs\n    g is 9.8 and h is 10 \n    ```", "```cs\n    double[] doubles = new[]\n      { 9.49, 9.5, 9.51, 10.49, 10.5, 10.51 };\n    foreach (double n in doubles)\n    {\n      WriteLine($\"ToInt32({n}) is {ToInt32(n)}\");\n    } \n    ```", "```cs\n    ToInt32(9.49) is 9\n    ToInt32(9.5) is 10\n    ToInt32(9.51) is 10\n    ToInt32(10.49) is 10\n    ToInt32(10.5) is 10\n    ToInt32(10.51) is 11 \n    ```", "```cs\n    foreach (double n in doubles)\n    {\n      WriteLine(format:\n        \"Math.Round({0}, 0, MidpointRounding.AwayFromZero) is {1}\",\n        arg0: n,\n        arg1: Math.Round(value: n, digits: 0,\n                mode: MidpointRounding.AwayFromZero));\n    } \n    ```", "```cs\n    Math.Round(9.49, 0, MidpointRounding.AwayFromZero) is 9\n    Math.Round(9.5, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(9.51, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.49, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.5, 0, MidpointRounding.AwayFromZero) is 11\n    Math.Round(10.51, 0, MidpointRounding.AwayFromZero) is 11 \n    ```", "```cs\n    int number = 12; \n    WriteLine(number.ToString());\n    bool boolean = true; \n    WriteLine(boolean.ToString());\n    DateTime now = DateTime.Now; \n    WriteLine(now.ToString());\n    object me = new(); \n    WriteLine(me.ToString()); \n    ```", "```cs\n    12\n    True\n    02/28/2021 17:33:54\n    System.Object \n    ```", "```cs\n    // allocate array of 128 bytes\n    byte[] binaryObject = new byte[128];\n    // populate array with random bytes\n    (new Random()).NextBytes(binaryObject); \n    WriteLine(\"Binary Object as bytes:\");\n    for(int index = 0; index < binaryObject.Length; index++)\n    {\n      Write($\"{binaryObject[index]:X} \");\n    }\n    WriteLine();\n    // convert to Base64 string and output as text\n    string encoded = ToBase64String(binaryObject);\n    WriteLine($\"Binary Object as Base64: {encoded}\"); \n    ```", "```cs\n    Binary Object as bytes:\n    B3 4D 55 DE 2D E BB CF BE 4D E6 53 C3 C2 9B 67 3 45 F9 E5 20 61 7E 4F 7A 81 EC 49 F0 49 1D 8E D4 F7 DB 54 AF A0 81 5 B8 BE CE F8 36 90 7A D4 36 42\n    4 75 81 1B AB 51 CE 5 63 AC 22 72 DE 74 2F 57 7F CB E7 47 B7 62 C3 F4 2D\n    61 93 85 18 EA 6 17 12 AE 44 A8 D B8 4C 89 85 A9 3C D5 E2 46 E0 59 C9 DF\n    10 AF ED EF 8AA1 B1 8D EE 4A BE 48 EC 79 A5 A 5F 2F 30 87 4A C7 7F 5D C1 D\n    26 EE\n    Binary Object as Base64: s01V3i0Ou8++TeZTw8KbZwNF +eUgYX5PeoHsSfBJHY7U99tU r6CBBbi+zvg2kHrUNkIEdYEbq1HOBWOsInLedC9Xf8vnR7diw/QtYZOFGOoGFxKuRKgNuEyJha k81eJG4FnJ3xCv7e+KobGN7kq+SO x5pQpfLzCHSsd/XcENJu4= \n    ```", "```cs\n    int age = int.Parse(\"27\");\n    DateTime birthday = DateTime.Parse(\"4 July 1980\");\n    WriteLine($\"I was born {age} years ago.\"); \n    WriteLine($\"My birthday is {birthday}.\"); \n    WriteLine($\"My birthday is {birthday:D}.\"); \n    ```", "```cs\n    I was born 27 years ago.\n    My birthday is 04/07/1980 00:00:00\\. \n    My birthday is 04 July 1980. \n    ```", "```cs\n    int count = int.Parse(\"abc\"); \n    ```", "```cs\n    Unhandled Exception: System.FormatException: Input string was not in a correct format. \n    ```", "```cs\n    Write(\"How many eggs are there? \"); \n    string? input = ReadLine(); // or use \"12\" in notebook\n    if (int.TryParse(input, out int count))\n    {\n      WriteLine($\"There are {count} eggs.\");\n    }\n    else\n    {\n      WriteLine(\"I could not parse the input.\");\n    } \n    ```", "```cs\n    How many eggs are there? 12\n    There are 12 eggs. \n    ```", "```cs\n    How many eggs are there? twelve\n    I could not parse the input. \n    ```", "```cs\n    WriteLine(\"Before parsing\"); \n    Write(\"What is your age? \"); \n    string? input = ReadLine(); // or use \"49\" in a notebook\n    try\n    {\n      int age = int.Parse(input); \n      WriteLine($\"You are {age} years old.\");\n    }\n    catch\n    {\n    }\n    WriteLine(\"After parsing\"); \n    ```", "```cs\n    Before parsing\n    What is your age? 49\n    You are 49 years old. \n    After parsing \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    After parsing \n    ```", "```cs\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    System.FormatException says Input string was not in a correct format. \n    After parsing \n    ```", "```cs\n    **catch (FormatException)**\n    **{**\n     **WriteLine(****\"The age you entered is not a valid number format.\"****);**\n    **}**\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    The age you entered is not a valid number format. \n    After parsing \n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    System.OverflowException says Value was either too large or too small for an Int32.\n    After parsing \n    ```", "```cs\n    **catch (OverflowException)**\n    **{**\n     **WriteLine(****\"Your age is a valid number format but it is either too big or small.\"****);**\n    **}**\n    catch (FormatException)\n    {\n      WriteLine(\"The age you entered is not a valid number format.\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    Your age is a valid number format but it is either too big or small. \n    After parsing \n    ```", "```cs\nWrite(\"Enter an amount: \");\nstring? amount = ReadLine();\ntry\n{\n  decimal amountValue = decimal.Parse(amount);\n}\ncatch (FormatException) when (amount.Contains(\"$\"))\n{\n  WriteLine(\"Amounts cannot use the dollar sign!\");\n}\ncatch (FormatException)\n{\n  WriteLine(\"Amounts must only contain digits!\");\n} \n```", "```cs\n    int x = int.MaxValue - 1; \n    WriteLine($\"Initial value: {x}\"); \n    x++;\n    WriteLine($\"After incrementing: {x}\"); \n    x++;\n    WriteLine($\"After incrementing: {x}\"); \n    x++;\n    WriteLine($\"After incrementing: {x}\"); \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    After incrementing: -2147483648\n    After incrementing: -2147483647 \n    ```", "```cs\n    **checked**\n    **{**\n      int x = int.MaxValue - 1; \n      WriteLine($\"Initial value: {x}\"); \n      x++;\n      WriteLine($\"After incrementing: {x}\"); \n      x++;\n      WriteLine($\"After incrementing: {x}\"); \n      x++;\n      WriteLine($\"After incrementing: {x}\");\n    **}** \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow. \n    ```", "```cs\n    try\n    {\n      // previous code goes here\n    }\n    catch (OverflowException)\n    {\n      WriteLine(\"The code overflowed but I caught the exception.\");\n    } \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    The code overflowed but I caught the exception. \n    ```", "```cs\n    int y = int.MaxValue + 1; \n    ```", "```cs\n    unchecked\n    {\n      int y = int.MaxValue + 1; \n      WriteLine($\"Initial value: {y}\"); \n      y--;\n      WriteLine($\"After decrementing: {y}\"); \n      y--;\n      WriteLine($\"After decrementing: {y}\");\n    } \n    ```", "```cs\n    Initial value: -2147483648\n    After decrementing: 2147483647\n    After decrementing: 2147483646 \n    ```", "```cs\n    for ( ; true; ) ; \n    ```", "```cs\nint max = 500;\nfor (byte i = 0; i < max; i++)\n{\n  WriteLine(i);\n} \n```", "```cs\nEnter a number between 0 and 255: 100\nEnter another number between 0 and 255: 8\n100 divided by 8 is 12 \n```", "```cs\nEnter a number between 0 and 255: apples\nEnter another number between 0 and 255: bananas \nFormatException: Input string was not in a correct format. \n```", "```cs\n    x = 3;\n    y = 2 + ++x; \n    ```", "```cs\n    x = 3 << 2;\n    y = 10 >> 1; \n    ```", "```cs\n    x = 10 & 8;\n    y = 10 | 7; \n    ```"]