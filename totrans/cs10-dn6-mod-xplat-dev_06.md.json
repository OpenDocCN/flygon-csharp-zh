["```cs\n    using static System.Console;\n    namespace Packt.Shared;\n    public class Person : object\n    {\n      // fields\n      public string? Name;    // ? allows null\n      public DateTime DateOfBirth;\n      public List<Person> Children = new(); // C# 9 or later\n      // methods\n      public void WriteToConsole() \n      {\n        WriteLine($\"{Name} was born on a {DateOfBirth:dddd}.\");\n      }\n    } \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<ProjectReference**\n     **Include=****\"..\\PacktLibrary\\PacktLibrary.csproj\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    // static method to \"multiply\"\n    public static Person Procreate(Person p1, Person p2)\n    {\n      Person baby = new()\n      {\n        Name = $\"Baby of {p1.Name} and {p2.Name}\"\n      };\n      p1.Children.Add(baby);\n      p2.Children.Add(baby);\n      return baby;\n    }\n    // instance method to \"multiply\"\n    public Person ProcreateWith(Person partner)\n    {\n      return Procreate(this, partner);\n    } \n    ```", "```cs\n    using Packt.Shared;\n    using static System.Console; \n    ```", "```cs\n    Person harry = new() { Name = \"Harry\" }; \n    Person mary = new() { Name = \"Mary\" }; \n    Person jill = new() { Name = \"Jill\" };\n    // call instance method\n    Person baby1 = mary.ProcreateWith(harry); \n    baby1.Name = \"Gary\";\n    // call static method\n    Person baby2 = Person.Procreate(harry, jill);\n    WriteLine($\"{harry.Name} has {harry.Children.Count} children.\"); \n    WriteLine($\"{mary.Name} has {mary.Children.Count} children.\"); \n    WriteLine($\"{jill.Name} has {jill.Children.Count} children.\"); \n    WriteLine(\n      format: \"{0}'s first child is named \\\"{1}\\\".\",\n      arg0: harry.Name,\n      arg1: harry.Children[0].Name); \n    ```", "```cs\n    Harry has 2 children. \n    Mary has 1 children. \n    Jill has 1 children.\n    Harry's first child is named \"Gary\". \n    ```", "```cs\nstring s1 = \"Hello \"; \nstring s2 = \"World!\";\nstring s3 = string.Concat(s1, s2); \nWriteLine(s3); // Hello World! \n```", "```cs\nstring s3 = s1 + s2; \n```", "```cs\n    // operator to \"multiply\"\n    public static Person operator *(Person p1, Person p2)\n    {\n      return Person.Procreate(p1, p2);\n    } \n    ```", "```cs\n    // call static method\n    Person baby2 = Person.Procreate(harry, jill);\n    **// call an operator**\n    **Person baby3 = harry * mary;** \n    ```", "```cs\n    Harry has 3 children. \n    Mary has 2 children. \n    Jill has 1 children.\n    Harry's first child is named \"Gary\". \n    ```", "```cs\n    // method with a local function\n    public static int Factorial(int number)\n    {\n      if (number < 0)\n      {\n        throw new ArgumentException(\n          $\"{nameof(number)} cannot be less than zero.\");\n      }\n      return localFactorial(number);\n      int localFactorial(int localNumber) // local function\n      {\n        if (localNumber < 1) return 1;\n        return localNumber * localFactorial(localNumber - 1);\n      }\n    } \n    ```", "```cs\n    WriteLine($\"5! is {Person.Factorial(5)}\"); \n    ```", "```cs\n    5! is 120 \n    ```", "```cs\npublic int MethodIWantToCall(string input)\n{\n  return input.Length; // it doesn't matter what the method does\n} \n```", "```cs\nint answer = p1.MethodIWantToCall(\"Frog\"); \n```", "```cs\ndelegate int DelegateWithMatchingSignature(string s); \n```", "```cs\n// create a delegate instance that points to the method\nDelegateWithMatchingSignature d = new(p1.MethodIWantToCall);\n// call the delegate, which calls the method\nint answer2 = d(\"Frog\"); \n```", "```cs\npublic delegate void EventHandler(\n  object? sender, EventArgs e);\npublic delegate void EventHandler<TEventArgs>(\n  object? sender, TEventArgs e); \n```", "```cs\n    // delegate field\n    public EventHandler? Shout;\n    // data field\n    public int AngerLevel;\n    // method\n    public void Poke()\n    {\n      AngerLevel++;\n      if (AngerLevel >= 3)\n      {\n        // if something is listening...\n        if (Shout != null)\n        {\n          // ...then call the delegate\n          Shout(this, EventArgs.Empty);\n        }\n      }\n    } \n    ```", "```cs\n    Shout?.Invoke(this, EventArgs.Empty); \n    ```", "```cs\n    static void Harry_Shout(object? sender, EventArgs e)\n    {\n      if (sender is null) return;\n      Person p = (Person)sender;\n      WriteLine($\"{p.Name} is this angry: {p.AngerLevel}.\");\n    } \n    ```", "```cs\n    harry.Shout = Harry_Shout; \n    ```", "```cs\n    harry.Shout = Harry_Shout;\n    **harry.Poke();**\n    **harry.Poke();**\n    **harry.Poke();**\n    **harry.Poke();** \n    ```", "```cs\n    Harry is this angry: 3\\. \n    Harry is this angry: 4. \n    ```", "```cs\n    public **event** EventHandler? Shout; \n    ```", "```cs\n    Program.cs(41,13): error CS0079: The event 'Person.Shout' can only appear on the left hand side of += or -= \n    ```", "```cs\n    harry.Shout += Harry_Shout; \n    ```", "```cs\n    // non-generic lookup collection\n    System.Collections.Hashtable lookupObject = new();\n    lookupObject.Add(key: 1, value: \"Alpha\");\n    lookupObject.Add(key: 2, value: \"Beta\");\n    lookupObject.Add(key: 3, value: \"Gamma\");\n    lookupObject.Add(key: harry, value: \"Delta\"); \n    ```", "```cs\n    int key = 2; // lookup the value that has 2 as its key\n    WriteLine(format: \"Key {0} has value: {1}\",\n      arg0: key,\n      arg1: lookupObject[key]); \n    ```", "```cs\n    // lookup the value that has harry as its key\n    WriteLine(format: \"Key {0} has value: {1}\",\n      arg0: harry,\n      arg1: lookupObject[harry]); \n    ```", "```cs\n    Key 2 has value: Beta\n    Key Packt.Shared.Person has value: Delta \n    ```", "```cs\n    // generic lookup collection\n    Dictionary<int, string> lookupIntString = new();\n    lookupIntString.Add(key: 1, value: \"Alpha\");\n    lookupIntString.Add(key: 2, value: \"Beta\");\n    lookupIntString.Add(key: 3, value: \"Gamma\");\n    lookupIntString.Add(key: harry, value: \"Delta\"); \n    ```", "```cs\n    /Users/markjprice/Code/Chapter06/PeopleApp/Program.cs(98,32): error CS1503: Argument 1: cannot convert from 'Packt.Shared.Person' to 'int' [/Users/markjprice/Code/Chapter06/PeopleApp/PeopleApp.csproj] \n    ```", "```cs\n    key = 3;\n    WriteLine(format: \"Key {0} has value: {1}\",\n      arg0: key,\n      arg1: lookupIntString[key]); \n    ```", "```cs\n    Key 3 has value: Gamma \n    ```", "```cs\nnamespace System\n{\n  public interface IComparable\n  {\n    int CompareTo(object? obj);\n  }\n  public interface IComparable<in T>\n  {\n    int CompareTo(T? other);\n  }\n} \n```", "```cs\n    Person[] people =\n    {\n      new() { Name = \"Simon\" },\n      new() { Name = \"Jenny\" },\n      new() { Name = \"Adam\" },\n      new() { Name = \"Richard\" }\n    };\n    WriteLine(\"Initial list of people:\"); \n    foreach (Person p in people)\n    {\n      WriteLine($\"  {p.Name}\");\n    }\n    WriteLine(\"Use Person's IComparable implementation to sort:\");\n    Array.Sort(people);\n    foreach (Person p in people)\n    {\n      WriteLine($\"  {p.Name}\");\n    } \n    ```", "```cs\n    Unhandled Exception: System.InvalidOperationException: Failed to compare two elements in the array. ---> System.ArgumentException: At least one object must implement IComparable. \n    ```", "```cs\n    public class Person : object, IComparable<Person> \n    ```", "```cs\n    public int CompareTo(Person? other)\n    {\n    **throw****new** **NotImplementedException();**\n    } \n    ```", "```cs\n    public int CompareTo(Person? other)\n    {\n      if (Name is null) return 0;\n    **return** **Name.CompareTo(other?.Name);** \n    } \n    ```", "```cs\n    Initial list of people:\n      Simon\n      Jenny\n      Adam\n      Richard\n    Use Person's IComparable implementation to sort:\n      Adam\n      Jenny\n      Richard\n      Simon \n    ```", "```cs\n    namespace Packt.Shared;\n    public class PersonComparer : IComparer<Person>\n    {\n      public int Compare(Person? x, Person? y)\n      {\n        if (x is null || y is null)\n        {\n          return 0;\n        }\n        // Compare the Name lengths...\n        int result = x.Name.Length.CompareTo(y.Name.Length);\n        // ...if they are equal...\n        if (result == 0)\n        {\n          // ...then compare by the Names...\n          return x.Name.CompareTo(y.Name);\n        }\n        else // result will be -1 or 1\n        {\n          // ...otherwise compare by the lengths.\n          return result; \n        }\n      }\n    } \n    ```", "```cs\n    WriteLine(\"Use PersonComparer's IComparer implementation to sort:\"); \n    Array.Sort(people, new PersonComparer());\n    foreach (Person p in people)\n    {\n      WriteLine($\"  {p.Name}\");\n    } \n    ```", "```cs\n    Use PersonComparer's IComparer implementation to sort:\n      Adam\n      Jenny\n      Simon\n      Richard \n    ```", "```cs\npublic interface IGamePlayer\n{\n  void Lose();\n}\npublic interface IKeyHolder\n{\n  void Lose();\n}\npublic class Person : IGamePlayer, IKeyHolder\n{\n  public void Lose() // implicit implementation\n  {\n    // implement losing a key\n  }\n  void IGamePlayer.Lose() // explicit implementation\n  {\n    // implement losing a game\n  }\n}\n// calling implicit and explicit implementations of Lose\nPerson p = new();\np.Lose(); // calls implicit implementation of losing a key\n((IGamePlayer)p).Lose(); // calls explicit implementation of losing a game\nIGamePlayer player = p as IGamePlayer;\nplayer.Lose(); // calls explicit implementation of losing a game \n```", "```cs\n    namespace Packt.Shared;\n    public interface IPlayable\n    {\n      void Play();\n      void Pause();\n    } \n    ```", "```cs\n    using static System.Console;\n    namespace Packt.Shared;\n    public class DvdPlayer : IPlayable\n    {\n      public void Pause()\n      {\n        WriteLine(\"DVD player is pausing.\");\n      }\n      public void Play()\n      {\n        WriteLine(\"DVD player is playing.\");\n      }\n    } \n    ```", "```cs\n    **using****static** **System.Console;**\n    namespace Packt.Shared;\n    public interface IPlayable\n    {\n      void Play();\n      void Pause();\n    **void****Stop****()** **// default interface implementation**\n     **{**\n     **WriteLine(****\"Default implementation of Stop.\"****);**\n     **}**\n    } \n    ```", "```cs\nint number1 = 49;\nlong number2 = 12;\nSystem.Drawing.Point location = new(x: 4, y: 5);\nPerson kevin = new() { Name = \"Kevin\", \n  DateOfBirth = new(year: 1988, month: 9, day: 23) };\nPerson sally; \n```", "```cs\nint a = 3;\nint b = 3;\nWriteLine($\"a == b: {(a == b)}\"); // true \n```", "```cs\nPerson a = new() { Name = \"Kevin\" };\nPerson b = new() { Name = \"Kevin\" };\nWriteLine($\"a == b: {(a == b)}\"); // false \n```", "```cs\nPerson a = new() { Name = \"Kevin\" };\nPerson b = a;\nWriteLine($\"a == b: {(a == b)}\"); // true \n```", "```cs\nstring a = \"Kevin\";\nstring b = \"Kevin\";\nWriteLine($\"a == b: {(a == b)}\"); // true \n```", "```cs\n    namespace Packt.Shared;\n    public struct DisplacementVector\n    {\n      public int X;\n      public int Y;\n      public DisplacementVector(int initialX, int initialY)\n      {\n        X = initialX;\n        Y = initialY;\n      }\n      public static DisplacementVector operator +(\n        DisplacementVector vector1,\n        DisplacementVector vector2)\n      {\n        return new(\n          vector1.X + vector2.X,\n          vector1.Y + vector2.Y);\n      }\n    } \n    ```", "```cs\n    DisplacementVector dv1 = new(3, 5); \n    DisplacementVector dv2 = new(-2, 7); \n    DisplacementVector dv3 = dv1 + dv2;\n    WriteLine($\"({dv1.X}, {dv1.Y}) + ({dv2.X}, {dv2.Y}) = ({dv3.X}, {dv3.Y})\"); \n    ```", "```cs\n    (3, 5) + (-2, 7) = (1, 12) \n    ```", "```cs\npublic record struct DisplacementVector(int X, int Y); \n```", "```cs\npublic record class ImmutableAnimal(string Name); \n```", "```cs\npublic class Animal\n{\n  public Animal() // constructor\n  {\n    // allocate any unmanaged resources\n  }\n  ~Animal() // Finalizer aka destructor\n  {\n    // deallocate any unmanaged resources\n  }\n} \n```", "```cs\npublic class Animal : IDisposable\n{\n  public Animal()\n  {\n    // allocate unmanaged resource\n  }\n  ~Animal() // Finalizer\n  {\n    Dispose(false);\n  }\n  bool disposed = false; // have resources been released?\n  public void Dispose()\n  {\n    Dispose(true);\n    // tell garbage collector it does not need to call the finalizer\n    GC.SuppressFinalize(this); \n  }\n  protected virtual void Dispose(bool disposing)\n  {\n    if (disposed) return;\n    // deallocate the *unmanaged* resource\n    // ...\n    if (disposing)\n    {\n      // deallocate any other *managed* resources\n      // ...\n    }\n    disposed = true;\n  }\n} \n```", "```cs\nusing (Animal a = new())\n{\n  // code that uses the Animal instance\n} \n```", "```cs\nAnimal a = new(); \ntry\n{\n  // code that uses the Animal instance\n}\nfinally\n{\n  if (a != null) a.Dispose();\n} \n```", "```cs\n    int thisCannotBeNull  = 4; \n    thisCannotBeNull = null; // compile error!\n    int? thisCouldBeNull = null; \n    WriteLine(thisCouldBeNull); \n    WriteLine(thisCouldBeNull.GetValueOrDefault());\n    thisCouldBeNull = 7; \n    WriteLine(thisCouldBeNull); \n    WriteLine(thisCouldBeNull.GetValueOrDefault()); \n    ```", "```cs\n    0\n    7\n    7 \n    ```", "```cs\n<PropertyGroup>\n  ...\n  <Nullable>enable</Nullable>\n</PropertyGroup> \n```", "```cs\n#nullable disable \n```", "```cs\n#nullable enable \n```", "```cs\n    class Address\n    {\n      public string? Building; \n      public string Street; \n      public string City; \n      public string Region;\n    } \n    ```", "```cs\n    public string Street = string.Empty; \n    public string City = string.Empty; \n    public string Region = string.Empty; \n    ```", "```cs\n    Address address = new(); \n    address.Building = null; \n    address.Street = null; \n    address.City = \"London\"; \n    address.Region = null; \n    ```", "```cs\n// check that the variable is not null before using it\nif (thisCouldBeNull != null)\n{\n  // access a member of thisCouldBeNull\n  int length = thisCouldBeNull.Length; // could throw exception\n  ...\n} \n```", "```cs\nif (!(thisCouldBeNull is null))\n{ \n```", "```cs\nif (thisCouldBeNull is not null)\n{ \n```", "```cs\nstring authorName = null;\n// the following throws a NullReferenceException\nint x = authorName.Length;\n// instead of throwing an exception, null is assigned to y\nint? y = authorName?.Length; \n```", "```cs\n// result will be 3 if authorName?.Length is null \nint result = authorName?.Length ?? 3; \nConsole.WriteLine(result); \n```", "```cs\npublic void Hire(Person manager, Person employee)\n{\n  if (manager == null)\n  {\n    throw new ArgumentNullException(nameof(manager));\n  }\n  if (employee == null)\n  {\n    throw new ArgumentNullException(nameof(employee));\n  }\n  ...\n} \n```", "```cs\npublic void Hire(Person manager!!, Person employee!!)\n{\n  ...\n} \n```", "```cs\n    using System;\n    namespace Packt.Shared;\n    public class Employee : Person\n    {\n    } \n    ```", "```cs\n    Employee john = new()\n    {\n      Name = \"John Jones\",\n      DateOfBirth = new(year: 1990, month: 7, day: 28)\n    };\n    john.WriteToConsole(); \n    ```", "```cs\n    John Jones was born on a Saturday. \n    ```", "```cs\n    public string? EmployeeCode { get; set; } \n    public DateTime HireDate { get; set; } \n    ```", "```cs\n    john.EmployeeCode = \"JJ001\";\n    john.HireDate = new(year: 2014, month: 11, day: 23); \n    WriteLine($\"{john.Name} was hired on {john.HireDate:dd/MM/yy}\"); \n    ```", "```cs\n    John Jones was hired on 23/11/14 \n    ```", "```cs\n    **using****static** **System.Console;** \n    namespace Packt.Shared;\n    public class Employee : Person\n    {\n      public string? EmployeeCode { get; set; }\n      public DateTime HireDate { get; set; }\n    **public****void****WriteToConsole****()**\n     **{**\n     **WriteLine(format:**\n    **\"{0} was born on {1:dd/MM/yy} and hired on {2:dd/MM/yy}\"****,**\n     **arg0: Name,**\n     **arg1: DateOfBirth,**\n     **arg2: HireDate);**\n     **}**\n    } \n    ```", "```cs\n    John Jones was born on 28/07/90 and hired on 01/01/01 \n    John Jones was hired on 23/11/14 \n    ```", "```cs\npublic **new** void WriteToConsole() \n```", "```cs\n    WriteLine(john.ToString()); \n    ```", "```cs\n    Packt.Shared.Employee \n    ```", "```cs\n    // overridden methods\n    public override string ToString()\n    {\n      return $\"{Name} is a {base.ToString()}\";\n    } \n    ```", "```cs\n     John Jones is a Packt.Shared.Employee \n    ```", "```cs\npublic interface INoImplementation // C# 1.0 and later\n{\n  void Alpha(); // must be implemented by derived type\n}\npublic interface ISomeImplementation // C# 8.0 and later\n{\n  void Alpha(); // must be implemented by derived type\n  void Beta()\n  {\n    // default implementation; can be overridden\n  }\n}\npublic abstract class PartiallyImplemented // C# 1.0 and later\n{\n  public abstract void Gamma(); // must be implemented by derived type\n  public virtual void Delta() // can be overridden\n  {\n    // implementation\n  }\n}\npublic class FullyImplemented : PartiallyImplemented, ISomeImplementation\n{\n  public void Alpha()\n  {\n    // implementation\n  }\n  public override void Gamma()\n  {\n    // implementation\n  }\n}\n// you can only instantiate the fully implemented class\nFullyImplemented a = new();\n// all the other types give compile errors\nPartiallyImplemented b = new(); // compile error!\nISomeImplementation c = new(); // compile error!\nINoImplementation d = new(); // compile error! \n```", "```cs\npublic sealed class ScroogeMcDuck\n{\n} \n```", "```cs\nusing static System.Console;\nnamespace Packt.Shared;\npublic class Singer\n{\n  // virtual allows this method to be overridden\n  public virtual void Sing()\n  {\n    WriteLine(\"Singing...\");\n  }\n}\npublic class LadyGaga : Singer\n{\n  // sealed prevents overriding the method in subclasses\n  public sealed override void Sing()\n  {\n    WriteLine(\"Singing with style...\");\n  }\n} \n```", "```cs\n    public override string ToString()\n    {\n      return $\"{Name}'s code is {EmployeeCode}\";\n    } \n    ```", "```cs\n    Employee aliceInEmployee = new()\n      { Name = \"Alice\", EmployeeCode = \"AA123\" };\n    Person aliceInPerson = aliceInEmployee; \n    aliceInEmployee.WriteToConsole(); \n    aliceInPerson.WriteToConsole(); \n    WriteLine(aliceInEmployee.ToString()); \n    WriteLine(aliceInPerson.ToString()); \n    ```", "```cs\n    Alice was born on 01/01/01 and hired on 01/01/01 \n    Alice was born on a Monday\n    Alice's code is AA123 \n    Alice's code is AA123 \n    ```", "```cs\n    Employee explicitAlice = aliceInPerson; \n    ```", "```cs\n    Employee explicitAlice = (Employee)aliceInPerson; \n    ```", "```cs\n    **if** **(aliceInPerson** **is** **Employee)**\n    **{**\n     **WriteLine(****$\"****{****nameof****(aliceInPerson)}** **IS an Employee\"****);** \n      Employee explicitAlice = (Employee)aliceInPerson;\n    **// safely do something with explicitAlice**\n    **}** \n    ```", "```cs\n    aliceInPerson IS an Employee \n    ```", "```cs\n    if (aliceInPerson is Employee explicitAlice)  \n    {\n      WriteLine($\"{nameof(aliceInPerson)} IS an Employee\"); \n      // safely do something with explicitAlice\n    } \n    ```", "```cs\n    Employee? aliceAsEmployee = aliceInPerson as Employee; // could be null\n    if (aliceAsEmployee != null)\n    {\n      WriteLine($\"{nameof(aliceInPerson)} AS an Employee\");\n      // safely do something with aliceAsEmployee\n    } \n    ```", "```cs\n    aliceInPerson AS an Employee \n    ```", "```cs\nif (!(aliceInPerson is Employee)) \n```", "```cs\nif (aliceInPerson is not Employee) \n```", "```cs\n    namespace Packt.Shared;\n    public class PersonException : Exception\n    {\n      public PersonException() : base() { }\n      public PersonException(string message) : base(message) { }\n      public PersonException(string message, Exception innerException)\n        : base(message, innerException) { }\n    } \n    ```", "```cs\n    public void TimeTravel(DateTime when)\n    {\n      if (when <= DateOfBirth)\n      {\n        throw new PersonException(\"If you travel back in time to a date earlier than your own birth, then the universe will explode!\");\n      }\n      else\n      {\n        WriteLine($\"Welcome to {when:yyyy}!\");\n      }\n    } \n    ```", "```cs\n    try\n    {\n      john.TimeTravel(when: new(1999, 12, 31));\n      john.TimeTravel(when: new(1950, 12, 25));\n    }\n    catch (PersonException ex)\n    {\n      WriteLine(ex.Message);\n    } \n    ```", "```cs\n    Welcome to 1999!\n    If you travel back in time to a date earlier than your own birth, then the universe will explode! \n    ```", "```cs\n    using System.Text.RegularExpressions;\n    namespace Packt.Shared;\n    public class StringExtensions\n    {\n      public static bool IsValidEmail(string input)\n      {\n        // use simple regular expression to check\n        // that the input string is a valid email\n        return Regex.IsMatch(input,\n          @\"[a-zA-Z0-9\\.-_]+@[a-zA-Z0-9\\.-_]+\");\n      }\n    } \n    ```", "```cs\n    string email1 = \"pamela@test.com\"; \n    string email2 = \"ian&test.com\";\n    WriteLine(\"{0} is a valid e-mail address: {1}\", \n      arg0: email1,\n      arg1: StringExtensions.IsValidEmail(email1));\n    WriteLine(\"{0} is a valid e-mail address: {1}\",\n      arg0: email2,\n      arg1: StringExtensions.IsValidEmail(email2)); \n    ```", "```cs\n    pamela@test.com is a valid e-mail address: True \n    ian&test.com is a valid e-mail address: False \n    ```", "```cs\n    public **static** class StringExtensions\n    {\n      public static bool IsValidEmail(**this** string input)\n      { \n    ```", "```cs\n    WriteLine(\"{0} is a valid e-mail address: {1}\",\n      arg0: email1,\n      arg1: email1.IsValidEmail());\n    WriteLine(\"{0} is a valid e-mail address: {1}\", \n      arg0: email2,\n      arg1: email2.IsValidEmail()); \n    ```", "```cs\n    {\n      \"$schema\": \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\",\n      \"settings\": {\n      }\n    } \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<None Remove=****\"stylecop.json\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<AdditionalFiles Include=****\"stylecop.json\"** **/>**\n     **</ItemGroup>**\n      <ItemGroup>\n        <PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.2.0-*\">\n          <PrivateAssets>all</PrivateAssets>\n          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n        </PackageReference>\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    C:\\Code\\Chapter06\\CodeAnalyzing\\Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\\Code\\Chapter06\\CodeAnalyzing\\CodeAnalyzing.csproj] \n    ```", "```cs\n[assembly:SuppressMessage(\"StyleCop.CSharp.OrderingRules\", \"SA1200:UsingDirectivesMustBePlacedWithinNamespace\", Justification = \"Reviewed.\")] \n```", "```cs\n#pragma warning disable SA1200 // UsingDirectivesMustBePlacedWithinNamespace\nusing System;\n#pragma warning restore SA1200 // UsingDirectivesMustBePlacedWithinNamespace \n```", "```cs\n    {\n      \"$schema\": \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\",\n      \"settings\": {\n        \"orderingRules\": {\n          \"usingDirectivesPlacement\": \"outsideNamespace\"\n        }\n      }\n    } \n    ```", "```cs\n    \"orderingRules\": {\n      \"usingDirectivesPlacement\": \"preserve\"\n    } \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n     **<GenerateDocumentationFile>****true****</GenerateDocumentationFile>**\n      </PropertyGroup> \n    ```", "```cs\n    {\n      \"$schema\": \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\",\n      \"settings\": {\n        \"orderingRules\": {\n          \"usingDirectivesPlacement\": \"preserve\"\n        },\n    **\"documentationRules\"****: {**\n    **\"companyName\"****:** **\"Packt\"****,**\n    **\"copyrightText\"****:** **\"Copyright (c) Packt. All rights reserved.\"**\n     **}**\n      }\n    } \n    ```", "```cs\n    // <copyright file=\"Program.cs\" company=\"Packt\">\n    // Copyright (c) Packt. All rights reserved.\n    // </copyright>\n    namespace CodeAnalyzing\n    {\n      using System;\n      /// <summary>\n      /// The main class for this console app.\n      /// </summary>\n      public class Program\n      {\n        /// <summary>\n        /// The main entry point for this console app.\n        /// </summary>\n        /// <param name=\"args\">A string array of arguments passed to the console app.</param>\n        public static void Main(string[] args)\n        {\n          Console.WriteLine(\"Hello World!\");\n        }\n      }\n    } \n    ```", "```cs\n    <?xml version=\"1.0\"?>\n    <doc>\n        <assembly>\n            <name>CodeAnalyzing</name>\n        </assembly>\n        <members>\n            <member name=\"T:CodeAnalyzing.Program\">\n                <summary>\n                The main class for this console app.\n                </summary>\n            </member>\n            <member name=\"M:CodeAnalyzing.Program.Main(System.String[])\">\n                <summary>\n                The main entry point for this console app.\n                </summary>\n                <param name=\"args\">A string array of arguments passed to the console app.</param>\n            </member>\n        </members>\n    </doc> \n    ```", "```cs\n    Rectangle r = new(height: 3, width: 4.5);\n    WriteLine($\"Rectangle H: {r.Height}, W: {r.Width}, Area: {r.Area}\"); \n    Square s = new(5);\n    WriteLine($\"Square H: {s.Height}, W: {s.Width}, Area: {s.Area}\"); \n    Circle c = new(radius: 2.5);\n    WriteLine($\"Circle H: {c.Height}, W: {c.Width}, Area: {c.Area}\"); \n    ```", "```cs\n    Rectangle H: 3, W: 4.5, Area: 13.5\n    Square H: 5, W: 5, Area: 25\n    Circle H: 5, W: 5, Area: 19.6349540849362 \n    ```"]