["```cs\n    dotnet --version \n    ```", "```cs\n    6.0.100 \n    ```", "```cs\n<LangVersion>7.3</LangVersion> \n```", "```cs\n<LangVersion>10.1</LangVersion> \n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n **<LangVersion>preview</LangVersion>**\n  </PropertyGroup>\n</Project> \n```", "```cs\n    #error version \n    ```", "```cs\n    // #error version \n    ```", "```cs\nvar totalPrice = subtotal + salesTax; \n```", "```cs\n// sales tax must be added to the subtotal\nvar totalPrice = subtotal + salesTax; \n```", "```cs\n/*\nThis is a multi-line comment.\n*/ \n```", "```cs\nusing System; // a semicolon indicates the end of a statement\nnamespace Basics\n{ // an open brace indicates the start of a block\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\"); // a statement\n    }\n  }\n} // a close brace indicates the end of a block \n```", "```cs\nusing System; // import the System namespace \n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Collections.Generic; \n```", "```cs\nglobal using System;\nglobal using System.Linq;\nglobal using System.Collections.Generic; \n```", "```cs\n    // <autogenerated />\n    global using global::System;\n    global using global::System.Collections.Generic;\n    global using global::System.IO;\n    global using global::System.Linq;\n    global using global::System.Net.Http;\n    global using global::System.Threading;\n    global using global::System.Threading.Tasks; \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<Using Remove=****\"System.Threading\"** **/>**\n     **<Using Include=****\"System.Numerics\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    // <autogenerated />\n    global using global::System;\n    global using global::System.Collections.Generic;\n    global using global::System.IO;\n    global using global::System.Linq;\n    global using global::System.Net.Http;\n    global using global::System.Threading.Tasks;\n    **global****using****global****::System.Numerics;** \n    ```", "```cs\n<ImplicitUsings>enable</ImplicitUsings> \n```", "```cs\n// outputs the current line terminator string\n// by default, this is a carriage-return and line feed\nConsole.WriteLine();\n// outputs the greeting and the current line terminator string\nConsole.WriteLine(\"Hello Ahmed\");\n// outputs a formatted number and date and the current line terminator string\nConsole.WriteLine(\"Temperature on {0:D} is {1}Â°C.\", \n  DateTime.Today, 23.4); \n```", "```cs\n    using System.Reflection; \n    ```", "```cs\n    Assembly? assembly = Assembly.GetEntryAssembly();\n    if (assembly == null) return;\n    // loop through the assemblies that this app references\n    foreach (AssemblyName name in assembly.GetReferencedAssemblies())\n    {\n      // load the assembly so we can read its details\n      Assembly a = Assembly.Load(name);\n      // declare a variable to count the number of methods\n      int methodCount = 0;\n      // loop through all the types in the assembly\n      foreach (TypeInfo t in a.DefinedTypes)\n      {\n        // add up the counts of methods\n        methodCount += t.GetMethods().Count();\n      }\n      // output the count of types and their methods\n      Console.WriteLine(\n        \"{0:N0} types with {1:N0} methods in {2} assembly.\",\n        arg0: a.DefinedTypes.Count(),\n        arg1: methodCount, arg2: name.Name);\n    } \n    ```", "```cs\n    // Output on Windows\n    0 types with 0 methods in System.Runtime assembly.\n    106 types with 1,126 methods in System.Linq assembly.\n    44 types with 645 methods in System.Console assembly.\n    // Output on macOS\n    0 types with 0 methods in System.Runtime assembly.\n    103 types with 1,094 methods in System.Linq assembly.\n    57 types with 701 methods in System.Console assembly. \n    ```", "```cs\n    using System.Reflection;\n    **// declare some unused variables using types**\n    **// in additional assemblies**\n    **System.Data.DataSet ds;**\n    **HttpClient client;** \n    ```", "```cs\n    // Output on Windows\n    0 types with 0 methods in System.Runtime assembly.\n    383 types with 6,854 methods in System.Data.Common assembly.\n    456 types with 4,590 methods in System.Net.Http assembly.\n    106 types with 1,126 methods in System.Linq assembly.\n    44 types with 645 methods in System.Console assembly.\n    // Output on macOS\n    0 types with 0 methods in System.Runtime assembly.\n    376 types with 6,763 methods in System.Data.Common assembly.\n    522 types with 5,141 methods in System.Net.Http assembly.\n    103 types with 1,094 methods in System.Linq assembly.\n    57 types with 701 methods in System.Console assembly. \n    ```", "```cs\n// let the heightInMetres variable become equal to the value 1.88\ndouble heightInMetres = 1.88;\nConsole.WriteLine($\"The variable {nameof(heightInMetres)} has the value\n{heightInMetres}.\"); \n```", "```cs\nchar letter = 'A'; // assigning literal characters\nchar digit = '1'; \nchar symbol = '$';\nchar userChoice = GetSomeKeystroke(); // assigning from a fictitious function \n```", "```cs\nstring firstName = \"Bob\"; // assigning literal strings\nstring lastName = \"Smith\";\nstring phoneNumber = \"(215) 555-4256\";\n// assigning a string returned from a fictitious function\nstring address = GetAddressFromDatabase(id: 563); \n```", "```cs\nstring fullNameWithTabSeparator = \"Bob\\tSmith\"; \n```", "```cs\nstring filePath = \"C:\\televisions\\sony\\bravia.txt\"; \n```", "```cs\nstring filePath = @\"C:\\televisions\\sony\\bravia.txt\"; \n```", "```cs\n    // unsigned integer means positive whole number or 0\n    uint naturalNumber = 23;\n    // integer means negative or positive whole number or 0\n    int integerNumber = -23;\n    // float means single-precision floating point\n    // F suffix makes it a float literal\n    float realNumber = 2.3F;\n    // double means double-precision floating point\n    double anotherRealNumber = 2.3; // double literal \n    ```", "```cs\n    // three variables that store the number 2 million\n    int decimalNotation = 2_000_000;\n    int binaryNotation = 0b_0001_1110_1000_0100_1000_0000; \n    int hexadecimalNotation = 0x_001E_8480;\n    // check the three variables have the same value\n    // both statements output true \n    Console.WriteLine($\"{decimalNotation == binaryNotation}\"); \n    Console.WriteLine(\n      $\"{decimalNotation == hexadecimalNotation}\"); \n    ```", "```cs\n    True\n    True \n    ```", "```cs\n    Console.WriteLine($\"int uses {sizeof(int)} bytes and can store numbers in the range {int.MinValue:N0} to {int.MaxValue:N0}.\"); \n    Console.WriteLine($\"double uses {sizeof(double)} bytes and can store numbers in the range {double.MinValue:N0} to {double.MaxValue:N0}.\"); \n    Console.WriteLine($\"decimal uses {sizeof(decimal)} bytes and can store numbers in the range {decimal.MinValue:N0} to {decimal.MaxValue:N0}.\"); \n    ```", "```cs\n    Console.WriteLine(\"Using doubles:\"); \n    double a = 0.1;\n    double b = 0.2;\n    if (a + b == 0.3)\n    {\n      Console.WriteLine($\"{a} + {b} equals {0.3}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{a} + {b} does NOT equal {0.3}\");\n    } \n    ```", "```cs\n    Using doubles:\n    0.1 + 0.2 does NOT equal 0.3 \n    ```", "```cs\n0,1 + 0,2 does NOT equal 0,3 \n```", "```cs\n    Console.WriteLine(\"Using decimals:\");\n    decimal c = 0.1M; // M suffix means a decimal literal value\n    decimal d = 0.2M;\n    if (c + d == 0.3M)\n    {\n      Console.WriteLine($\"{c} + {d} equals {0.3M}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{c} + {d} does NOT equal {0.3M}\");\n    } \n    ```", "```cs\n    Using decimals:\n    0.1 + 0.2 equals 0.3 \n    ```", "```cs\nbool happy = true; \nbool sad = false; \n```", "```cs\n    object height = 1.88; // storing a double in an object \n    object name = \"Amir\"; // storing a string in an object\n    Console.WriteLine($\"{name} is {height} metres tall.\");\n    int length1 = name.Length; // gives compile error!\n    int length2 = ((string)name).Length; // tell compiler it is a string\n    Console.WriteLine($\"{name} has {length2} characters.\"); \n    ```", "```cs\n    Amir is 1.88 metres tall. \n    Amir has 4 characters. \n    ```", "```cs\n    // storing a string in a dynamic object\n    // string has a Length property\n    dynamic something = \"Ahmed\";\n    // int does not have a Length property\n    // something = 12;\n    // an array of any type has a Length property\n    // something = new[] { 3, 5, 7 }; \n    ```", "```cs\n    // this compiles but would throw an exception at run-time\n    // if you later store a data type that does not have a\n    // property named Length\n    Console.WriteLine($\"Length is {something.Length}\"); \n    ```", "```cs\n    Length is 5 \n    ```", "```cs\n    Unhandled exception. Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 'int' does not contain a definition for 'Length' \n    ```", "```cs\n    Length is 3 \n    ```", "```cs\n    int population = 66_000_000; // 66 million in UK\n    double weight = 1.88; // in kilograms\n    decimal price = 4.99M; // in pounds sterling\n    string fruit = \"Apples\"; // strings use double-quotes\n    char letter = 'Z'; // chars use single-quotes\n    bool happy = true; // Booleans have value of true or false \n    ```", "```cs\n    var population = 66_000_000; // 66 million in UK\n    var weight = 1.88; // in kilograms\n    var price = 4.99M; // in pounds sterling\n    var fruit = \"Apples\"; // strings use double-quotes\n    var letter = 'Z'; // chars use single-quotes\n    var happy = true; // Booleans have value of true or false \n    ```", "```cs\n    using System.Xml; \n    ```", "```cs\n    // good use of var because it avoids the repeated type\n    // as shown in the more verbose second statement\n    var xml1 = new XmlDocument(); \n    XmlDocument xml2 = new XmlDocument();\n    // bad use of var because we cannot tell the type, so we\n    // should use a specific type declaration as shown in\n    // the second statement\n    var file1 = File.CreateText(\"something1.txt\"); \n    StreamWriter file2 = File.CreateText(\"something2.txt\"); \n    ```", "```cs\nXmlDocument xml3 = new(); // target-typed new in C# 9 or later \n```", "```cs\nclass Person\n{\n  public DateTime BirthDate;\n}\nPerson kim = new();\nkim.BirthDate = new(1967, 12, 26); // instead of: new DateTime(1967, 12, 26) \n```", "```cs\n    Console.WriteLine($\"default(int) = {default(int)}\"); \n    Console.WriteLine($\"default(bool) = {default(bool)}\"); \n    Console.WriteLine($\"default(DateTime) = {default(DateTime)}\"); \n    Console.WriteLine($\"default(string) = {default(string)}\"); \n    ```", "```cs\n    default(int) = 0 \n    default(bool) = False\n    default(DateTime) = 01/01/0001 00:00:00 \n    default(string) = \n    ```", "```cs\n    int number = 13;\n    Console.WriteLine($\"number has been set to: {number}\");\n    number = default;\n    Console.WriteLine($\"number has been reset to its default: {number}\"); \n    ```", "```cs\n    number has been set to: 13\n    number has been reset to its default: 0 \n    ```", "```cs\n    string[] names; // can reference any size array of strings\n    // allocating memory for four strings in an array\n    names = new string[4];\n    // storing items at index positions\n    names[0] = \"Kate\";\n    names[1] = \"Jack\"; \n    names[2] = \"Rebecca\"; \n    names[3] = \"Tom\";\n    // looping through the names\n    for (int i = 0; i < names.Length; i++)\n    {\n      // output the item at index position i\n      Console.WriteLine(names[i]);\n    } \n    ```", "```cs\n    Kate \n    Jack \n    Rebecca \n    Tom \n    ```", "```cs\nstring[] names2 = new[] { \"Kate\", \"Jack\", \"Rebecca\", \"Tom\" }; \n```", "```cs\ndotnet new console -lang \"F#\" --name \"ExploringConsole\" \n```", "```cs\n    int numberOfApples = 12; \n    decimal pricePerApple = 0.35M;\n    Console.WriteLine(\n      format: \"{0} apples costs {1:C}\", \n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    string formatted = string.Format(\n      format: \"{0} apples costs {1:C}\",\n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    //WriteToFile(formatted); // writes the string into a file \n    ```", "```cs\n    Console.WriteLine($\"{numberOfApples} apples costs {pricePerApple * numberOfApples:C}\"); \n    ```", "```cs\n     12 apples costs Â£4.20 \n    ```", "```cs\nprivate const string firstname = \"Omar\";\nprivate const string lastname = \"Rudberg\";\nprivate const string fullname = firstname + \" \" + lastname; \n```", "```cs\nprivate const string fullname = \"{firstname} {lastname}\"; \n```", "```cs\n{ index [, alignment ] [ : formatString ] } \n```", "```cs\n    string applesText = \"Apples\"; \n    int applesCount = 1234;\n    string bananasText = \"Bananas\"; \n    int bananasCount = 56789;\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\",\n      arg0: \"Name\",\n      arg1: \"Count\");\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\",\n      arg0: applesText,\n      arg1: applesCount);\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\",\n      arg0: bananasText,\n      arg1: bananasCount); \n    ```", "```cs\n    Name          Count\n    Apples        1,234\n    Bananas      56,789 \n    ```", "```cs\n    Console.Write(\"Type your first name and press ENTER: \"); \n    string? firstName = Console.ReadLine();\n    Console.Write(\"Type your age and press ENTER: \"); \n    string? age = Console.ReadLine();\n    Console.WriteLine(\n      $\"Hello {firstName}, you look good for {age}.\"); \n    ```", "```cs\n    Type your name and press ENTER: Gary \n    Type your age and press ENTER: 34 \n    Hello Gary, you look good for 34. \n    ```", "```cs\n    using static System.Console; \n    ```", "```cs\n    Write(\"Press any key combination: \"); \n    ConsoleKeyInfo key = ReadKey(); \n    WriteLine();\n    WriteLine(\"Key: {0}, Char: {1}, Modifiers: {2}\",\n      arg0: key.Key, \n      arg1: key.KeyChar,\n      arg2: key.Modifiers); \n    ```", "```cs\n    Press any key combination: k \n    Key: K, Char: k, Modifiers: 0 \n    ```", "```cs\n    Press any key combination: K  \n    Key: K, Char: K, Modifiers: Shift \n    ```", "```cs\n    Press any key combination: \n    Key: F12, Char: , Modifiers: 0 \n    ```", "```cs\nusing System;\nnamespace Arguments\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");\n    }\n  }\n} \n```", "```cs\n    using static System.Console;\n    WriteLine($\"There are {args.Length} arguments.\"); \n    ```", "```cs\n    There are 0 arguments. \n    ```", "```cs\n    dotnet run firstarg second-arg third:arg \"fourth arg\" \n    ```", "```cs\n    There are 4 arguments. \n    ```", "```cs\n    foreach (string arg in args)\n    {\n      WriteLine(arg);\n    } \n    ```", "```cs\n    There are 4 arguments. \n    firstarg\n    second-arg \n    third:arg \n    fourth arg \n    ```", "```cs\n    if (args.Length < 3)\n    {\n      WriteLine(\"You must specify two colors and cursor size, e.g.\");\n      WriteLine(\"dotnet run red yellow 50\");\n      return; // stop running\n    }\n    ForegroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof(ConsoleColor),\n      value: args[0],\n      ignoreCase: true);\n    BackgroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof(ConsoleColor),\n      value: args[1],\n      ignoreCase: true);\n    CursorSize = int.Parse(args[2]); \n    ```", "```cs\n    dotnet run red yellow 50 \n    ```", "```cs\n    try\n    {\n      CursorSize = int.Parse(args[2]);\n    }\n    catch (PlatformNotSupportedException)\n    {\n      WriteLine(\"The current platform does not support changing the size of the cursor.\");\n    } \n    ```", "```cs\nif (OperatingSystem.IsWindows())\n{\n  // execute code that only works on Windows\n}\nelse if (OperatingSystem.IsWindowsVersionAtLeast(major: 10))\n{\n  // execute code that only works on Windows 10 or later\n}\nelse if (OperatingSystem.IsIOSVersionAtLeast(major: 14, minor: 5))\n{\n  // execute code that only works on iOS 14.5 or later\n}\nelse if (OperatingSystem.IsBrowser())\n{\n  // execute code that only works in the browser with Blazor\n} \n```", "```cs\n#define MYSYMBOL \n```", "```cs\n#if NET6_0_ANDROID\n// compile statements that only works on Android\n#elif NET6_0_IOS\n// compile statements that only works on iOS\n#else\n// compile statements that work everywhere else\n#endif \n```"]