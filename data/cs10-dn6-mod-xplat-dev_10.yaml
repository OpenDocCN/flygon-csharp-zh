- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Working with Data Using Entity Framework Core
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Entity Framework Core处理数据
- en: This chapter is about reading and writing to data stores, such as Microsoft
    SQL Server, SQLite, and Azure Cosmos DB, by using the object-to-data store mapping
    technology named **Entity Framework Core** (**EF Core**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于使用名为**实体框架核心**（**EF Core**）的对象到数据存储映射技术，对数据存储（如Microsoft SQL Server、SQLite和Azure
    Cosmos DB）进行读写。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding modern databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Setting up EF Core
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置EF Core
- en: Defining EF Core models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义EF Core模型
- en: Querying EF Core models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EF Core模型的查询
- en: Loading patterns with EF Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EF Core中的加载模式
- en: Manipulating data with EF Core
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EF Core中的数据操作
- en: Working with transactions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务处理
- en: Code First EF Core models
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Code First EF Core模型
- en: Understanding modern databases
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Two of the most common places to store data are in a **Relational Database Management
    System** (**RDBMS**) such as Microsoft SQL Server, PostgreSQL, MySQL, and SQLite,
    or in a **NoSQL** database such as Microsoft Azure Cosmos DB, Redis, MongoDB,
    and Apache Cassandra.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据最常见的两种地方是**关系数据库管理系统**（**RDBMS**），如Microsoft SQL Server、PostgreSQL、MySQL和SQLite，或者**NoSQL**数据库，如Microsoft
    Azure Cosmos DB、Redis、MongoDB和Apache Cassandra。
- en: Understanding legacy Entity Framework
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解遗留的实体框架
- en: '**Entity Framework** (**EF**) was first released as part of .NET Framework
    3.5 with Service Pack 1 back in late 2008\. Since then, Entity Framework has evolved,
    as Microsoft has observed how programmers use an **object-relational mapping**
    (**ORM**) tool in the real world.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体框架**（**EF**）最初作为.NET Framework 3.5的一部分，在2008年底随Service Pack 1发布。自那时起，微软观察到程序员如何在现实世界中使用**对象关系映射**（**ORM**）工具，实体框架也随之演进。'
- en: ORMs use a mapping definition to associate columns in tables to properties in
    classes. Then, a programmer can interact with objects of different types in a
    way that they are familiar with, instead of having to deal with knowing how to
    store the values in a relational table or another structure provided by a NoSQL
    data store.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ORMs利用映射定义将表中的列关联到类的属性上。这样，程序员就可以用他们熟悉的方式与不同类型的对象进行交互，而不必处理如何将值存储在关系表或NoSQL数据存储提供的其他结构中。
- en: The version of EF included with .NET Framework is **Entity Framework 6** (**EF6**).
    It is mature, stable, and supports an EDMX (XML file) way of defining the model
    as well as complex inheritance models, and a few other advanced features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework中包含的EF版本是**实体框架6**（**EF6**）。它成熟、稳定，并支持EDMX（XML文件）方式定义模型以及复杂的继承模型，以及其他一些高级功能。
- en: EF 6.3 and later have been extracted from .NET Framework as a separate package
    so it can be supported on .NET Core 3.0 and later. This enables existing projects
    like web applications and services to be ported and run cross-platform. However,
    EF6 should be considered a legacy technology because it has some limitations when
    running cross-platform and no new features will be added to it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: EF 6.3及更高版本已从.NET Framework中提取出来，作为一个独立包，以便支持.NET Core 3.0及更高版本。这使得现有的项目，如Web应用程序和服务，能够移植并在跨平台上运行。然而，EF6应被视为一种遗留技术，因为它在跨平台运行时存在一些限制，并且不会再添加新功能。
- en: Using the legacy Entity Framework 6.3 or later
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用遗留的实体框架6.3或更高版本
- en: 'To use the legacy Entity Framework in a .NET Core 3.0 or later project, you
    must add a package reference to it in your project file, as shown in the following
    markup:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在.NET Core 3.0或更高版本的项目中使用遗留的实体框架，你必须在你的项目文件中添加对该包的引用，如下面的标记所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Good Practice**: Only use legacy EF6 if you have to, for example, when migrating
    a WPF app that uses it. This book is about modern cross-platform development so,
    in the rest of this chapter, I will only cover the modern Entity Framework Core.
    You will not need to reference the legacy EF6 package as shown above in the projects
    for this chapter.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：仅在必要时使用遗留的EF6，例如，当迁移使用它的WPF应用程序时。本书是关于现代跨平台开发的，因此在本章的其余部分，我将只介绍现代的实体框架核心。你不需要像上面那样在为本章项目引用遗留的EF6包。'
- en: Understanding Entity Framework Core
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解实体框架核心
- en: The truly cross-platform version, **EF Core**, is different from the legacy
    Entity Framework. Although EF Core has a similar name, you should be aware of
    how it varies from EF6\. The latest EF Core is version 6.0 to match .NET 6.0.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的跨平台版本，**EF Core**，与遗留的实体框架不同。尽管EF Core名称相似，但你应该意识到它与EF6的差异。最新的EF Core版本是6.0，以匹配.NET
    6.0。
- en: EF Core 5 and later only support .NET 5 and later. EF Core 3.0 and later only
    run on platforms that support .NET Standard 2.1, meaning .NET Core 3.0 and later.
    It does not support .NET Standard 2.0 platforms like .NET Framework 4.8.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 5 及更高版本仅支持 .NET 5 及更高版本。EF Core 3.0 及更高版本仅在支持 .NET Standard 2.1 的平台（即
    .NET Core 3.0 及更高版本）上运行。它不支持 .NET Standard 2.0 平台，如 .NET Framework 4.8。
- en: As well as traditional RDBMSs, EF Core supports modern cloud-based, nonrelational,
    schema-less data stores, such as Microsoft Azure Cosmos DB and MongoDB, sometimes
    with third-party providers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的关系数据库管理系统，EF Core 还支持现代基于云的、非关系型的、无模式的数据存储，如 Microsoft Azure Cosmos DB
    和 MongoDB，有时通过第三方提供商支持。
- en: EF Core has so many improvements that this chapter cannot cover them all. I
    will focus on the fundamentals that all .NET developers should know and some of
    the cooler new features.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 有许多改进，本章无法涵盖所有内容。我将重点介绍所有 .NET 开发者应该了解的基础知识以及一些较新的酷炫功能。
- en: 'There are two approaches to working with EF Core:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与 EF Core 工作有两种方法：
- en: '**Database First**: A database already exists, so you build a model that matches
    its structure and features.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据库先行**：数据库已经存在，因此你构建一个与数据库结构和特性相匹配的模型。'
- en: '**Code First**: No database exists, so you build a model and then use EF Core
    to create a database that matches its structure and features.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码先行**：不存在数据库，因此你先构建一个模型，然后使用 EF Core 创建一个与该模型结构和特性相匹配的数据库。'
- en: We will start by using EF Core with an existing database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用 EF Core 与现有数据库开始。
- en: Creating a console app for working with EF Core
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于与 EF Core 工作的控制台应用
- en: 'First, we will create a console app project for this chapter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为本章创建一个控制台应用项目：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter10`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你偏好的代码编辑器创建一个名为 `Chapter10` 的新解决方案/工作区。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用项目，如下表所示：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter10`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`Chapter10`
- en: 'Project file and folder: `WorkingWithEFCore`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WorkingWithEFCore`
- en: Using a sample relational database
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用示例关系数据库
- en: To learn how to manage an RDBMS using .NET, it would be useful to have a sample
    one so that you can practice on one that has a medium complexity and a decent
    amount of sample records. Microsoft offers several sample databases, most of which
    are too complex for our needs, so instead, we will use a database that was first
    created in the early 1990s known as **Northwind**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何使用 .NET 管理关系数据库管理系统，拥有一个示例数据库会很有帮助，这样你就可以在一个中等复杂度和适当数量的示例记录上练习。微软提供了几个示例数据库，其中大多数对于我们的需求来说太复杂了，因此我们将使用一个在
    20 世纪 90 年代初首次创建的数据库，称为 **Northwind**。
- en: 'Let''s take a minute to look at a diagram of the Northwind database. You can
    use the following diagram to refer to as we write code and queries throughout
    this book:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一分钟时间查看 Northwind 数据库的图表。你可以使用以下图表作为参考，在我们编写本书中的代码和查询时：
- en: '![Diagram  Description automatically generated](img/B17442_11_01.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图表描述自动生成](img/B17442_11_01.png)'
- en: 'Figure 10.1: The Northwind database tables and relationships'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：Northwind 数据库表及其关系
- en: 'You will write code to work with the `Categories` and `Products` tables later
    in this chapter and other tables in later chapters. But before we do, note that:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章后面编写代码以与 `Categories` 和 `Products` 表交互，并在后续章节中与其他表交互。但在我们开始之前，请注意：
- en: Each category has a unique identifier, name, description, and picture.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别都有一个唯一的标识符、名称、描述和图片。
- en: Each product has a unique identifier, name, unit price, units in stock, and
    other fields.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品都有一个唯一的标识符、名称、单价、库存单位以及其他字段。
- en: Each product is associated with a category by storing the category's unique
    identifier.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品通过存储类别的唯一标识符与一个类别关联。
- en: The relationship between `Categories` and `Products` is one-to-many, meaning
    each category can have zero or more products.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Categories` 和 `Products` 之间的关系是一对多，意味着每个类别可以有零个或多个产品。'
- en: Using Microsoft SQL Server for Windows
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Microsoft SQL Server for Windows
- en: Microsoft offers various editions of its popular and capable SQL Server product
    for Windows, Linux, and Docker containers. We will use a free version that can
    run standalone, known as SQL Server Developer Edition. You can also use the Express
    edition or the free SQL Server LocalDB edition that can be installed with Visual
    Studio for Windows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 微软为其流行且功能强大的 SQL Server 产品提供了多种版本，适用于 Windows、Linux 和 Docker 容器。我们将使用一个可以独立运行的免费版本，称为
    SQL Server 开发者版。你也可以使用 Express 版或与 Windows 上的 Visual Studio 一起安装的免费 SQL Server
    LocalDB 版。
- en: If you do not have a Windows computer or you want to use a cross-platform database
    system, then you can skip ahead to the topic *Using SQLite*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Windows电脑或希望使用跨平台数据库系统，则可以跳至主题*使用SQLite*。
- en: Downloading and installing SQL Server
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载并安装SQL Server。
- en: 'You can download SQL Server editions from the following link:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载SQL Server版本：
- en: '[https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)'
- en: Download the **Developer** edition.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载**开发者**版本。
- en: Run the installer.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序。
- en: Select the **Custom** installation type.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**自定义**安装类型。
- en: Select a folder for the installation files and then click **Install**.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择安装文件夹，然后点击**安装**。
- en: Wait for the 1.5 GB of installer files to download.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待1.5 GB的安装文件下载完成。
- en: In **SQL Server Installation Center**, click **Installation**, and then click
    **New SQL Server stand-alone installation or add features to an existing installation**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SQL Server安装中心**中，点击**安装**，然后点击**新SQL Server独立安装或向现有安装添加功能**。
- en: Select **Developer** as the free edition and then click **Next**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发者**作为免费版本，然后点击**下一步**。
- en: Accept the license terms and then click **Next**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受许可条款，然后点击**下一步**。
- en: Review the install rules, fix any issues, and then click **Next**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查安装规则，解决任何问题，然后点击**下一步**。
- en: In **Feature Selection**, select **Database Engine Services**, and then click
    **Next**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**功能选择**中，选择**数据库引擎服务**，然后点击**下一步**。
- en: In **Instance Configuration**, select **Default instance**, and then click **Next**.
    If you already have a default instance configured, then you could create a named
    instance, perhaps called `cs10dotnet6`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**实例配置**中，选择**默认实例**，然后点击**下一步**。如果您已有默认实例配置，则可以创建一个命名实例，可能名为`cs10dotnet6`。
- en: In **Server Configuration**, note the **SQL Server** **Database Engine** is
    configured to start automatically. Set the **SQL Server Browser** to start automatically,
    and then click **Next**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器配置**中，注意**SQL Server数据库引擎**已设置为自动启动。将**SQL Server浏览器**设置为自动启动，然后点击**下一步**。
- en: In **Database Engine Configuration**, on the **Server Configuration** tab, set
    **Authentication Mode** to **Mixed**, set the **sa** account password to a strong
    password, click **Add Current User**, and then click **Next**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库引擎配置**中，在**服务器配置**标签页，设置**认证模式**为**混合**，设置**sa**账户密码为强密码，点击**添加当前用户**，然后点击**下一步**。
- en: In **Ready to Install**, review the actions that will be taken, and then click
    **Install**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**准备安装**中，审查将要执行的操作，然后点击**安装**。
- en: In **Complete**, note the successful actions taken, and then click **Close**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**完成**中，注意成功执行的操作，然后点击**关闭**。
- en: In **SQL Server Installation Center**, in **Installation**, click **Install
    SQL Server Management Tools**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SQL Server安装中心**中，点击**安装**，然后选择**安装SQL Server管理工具**。
- en: In the browser window, click to download the latest version of SSMS.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器窗口中，点击下载最新版本的SSMS。
- en: Run the installer and click **Install**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序并点击**安装**。
- en: When the installer has finished, click **Restart** if needed or **Close**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序完成后，如有需要点击**重启**或点击**关闭**。
- en: Creating the Northwind sample database for SQL Server
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为SQL Server创建Northwind示例数据库。
- en: 'Now we can run a database script to create the Northwind sample database:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行一个数据库脚本来创建Northwind示例数据库：
- en: 'If you have not previously downloaded or cloned the GitHub repository for this
    book, then do so now using the following link: [https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/).'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前未下载或克隆本书的GitHub仓库，请使用以下链接进行操作：[https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)。
- en: 'Copy the script to create the Northwind database for SQL Server from the following
    path in your local Git repository: `/sql-scripts/Northwind4SQLServer.sql` into
    the `WorkingWithEFCore` folder.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地Git仓库的以下路径复制创建Northwind数据库的脚本：`/sql-scripts/Northwind4SQLServer.sql`到`WorkingWithEFCore`文件夹。
- en: Start **SQL Server Management Studio**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**SQL Server Management Studio**。
- en: In the **Connect to Server** dialog, for **Server name**, enter `.` (a dot)
    meaning the local computer name, and then click **Connect**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**连接到服务器**对话框中，对于**服务器名称**，输入`.`（一个点），表示本地计算机名称，然后点击**连接**。
- en: If you had to create a named instance, like `cs10dotnet6`, then enter `.\cs10dotnet6`
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您需要创建一个命名实例，如`cs10dotnet6`，则输入`.\cs10dotnet6`。
- en: Navigate to **File** | **Open** | **File...**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**文件** | **打开** | **文件...**。
- en: Browse to select the `Northwind4SQLServer.sql` file and then click **Open**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览并选择`Northwind4SQLServer.sql`文件，然后点击**打开**。
- en: In the toolbar, click **Execute**, and note the **the Command(s) completed successfully**
    message.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏上，点击**执行**，并注意显示的**命令已成功完成**消息。
- en: In **Object Explorer**, expand the **Northwind** database, and then expand **Tables**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象资源管理器**中，展开**Northwind**数据库，然后展开**表**。
- en: Right-click **Products**, click **Select Top 1000 Rows**, and note the returned
    results, as shown in *Figure 10.2*:![](img/B17442_11_04.png)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**产品**，点击**选择前1000行**，并注意返回的结果，如图*10.2*所示：![](img/B17442_11_04.png)
- en: 'Figure 10.2: The Products table in SQL Server Management Studio'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.2：SQL Server Management Studio中的产品表
- en: In the **Object Explorer** toolbar, click the **Disconnect** button.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象资源管理器**工具栏上，点击**断开连接**按钮。
- en: Exit SQL Server Management Studio.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出SQL Server Management Studio。
- en: Managing the Northwind sample database with Server Explorer
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用服务器资源管理器管理Northwind示例数据库
- en: 'We did not have to use SQL Server Management Studio to execute the database
    script. We can also use tools in Visual Studio including the **SQL Server Object
    Explorer** and **Server Explorer**:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无需使用SQL Server Management Studio来执行数据库脚本。我们还可以使用Visual Studio中的工具，包括**SQL
    Server对象资源管理器**和**服务器资源管理器**：
- en: In Visual Studio, choose **View** | **Server Explorer**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，选择**视图** | **服务器资源管理器**。
- en: In the **Server Explorer** window, right-click **Data Connections** and choose
    **Add Connection...**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器资源管理器**窗口中，右键点击**数据连接**并选择**添加连接...**。
- en: If you see the **Choose Data Source** dialog, as shown in *Figure 10.3*, select
    **Microsoft SQL Server** and then click **Continue**:![Graphical user interface,
    application  Description automatically generated](img/B17442_11_05.png)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到如图*10.3*所示的**选择数据源**对话框，请选择**Microsoft SQL Server**，然后点击**继续**：![图形用户界面，应用程序
    自动生成描述](img/B17442_11_05.png)
- en: 'Figure 10.3: Choosing SQL Server as the data source'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.3：选择SQL Server作为数据源
- en: In the **Add Connection** dialog, enter the server name as `.`, enter the database
    name as `Northwind`, and then click **OK**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加连接**对话框中，将服务器名称输入为`.`，将数据库名称输入为`Northwind`，然后点击**确定**。
- en: In **Server Explorer**, expand the data connection and its tables. You should
    see 13 tables, including the **Categories** and **Products** tables.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器资源管理器**中，展开数据连接及其表。您应该能看到13个表，包括**类别**和**产品**表。
- en: Right-click the **Products** table, choose **Show Table Data**, and note the
    77 rows of products are returned.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**产品**表，选择**显示表数据**，并注意返回的77行产品数据。
- en: To see the details of the **Products** table columns and types, right-click
    **Products** and choose **Open Table Definition**, or double-click the table in
    **Server Explorer**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看**产品**表的列和类型详细信息，右键点击**产品**并选择**打开表定义**，或在**服务器资源管理器**中双击该表。
- en: Using SQLite
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQLite
- en: SQLite is a small, cross-platform, self-contained RDBMS that is available in
    the public domain. It's the most common RDBMS for mobile platforms such as iOS
    (iPhone and iPad) and Android. Even if you use Windows and set up SQL Server in
    the previous section, you might want to set up SQLite too. The code that we write
    will work with both and it can be interesting to see the subtle differences.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是一个小巧、跨平台、自包含的RDBMS，属于公共领域。它是移动平台如iOS（iPhone和iPad）和Android上最常用的RDBMS。即使您使用Windows并在前一节中设置了SQL
    Server，您可能也想设置SQLite。我们编写的代码将与两者兼容，观察它们之间的细微差别也颇有趣味。
- en: Setting up SQLite for macOS
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在macOS上设置SQLite
- en: SQLite is included in macOS in the `/usr/bin/` directory as a command-line application
    named `sqlite3`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite作为命令行应用程序`sqlite3`包含在macOS的`/usr/bin/`目录中。
- en: Setting up SQLite for Windows
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上设置SQLite
- en: 'On Windows, we need to add the folder for SQLite to the system path so it will
    be found when we enter commands at a command prompt or terminal:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们需要将SQLite文件夹添加到系统路径中，以便在命令提示符或终端输入命令时能够找到它：
- en: 'Start your favorite browser and navigate to the following link: [https://www.sqlite.org/download.html](https://www.sqlite.org/download.html).'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器并导航至以下链接：[https://www.sqlite.org/download.html](https://www.sqlite.org/download.html)。
- en: Scroll down the page to the **Precompiled Binaries for Windows** section.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动页面至**Windows预编译二进制文件**部分。
- en: Click **sqlite-tools-win32-x86-3360000.zip**. Note the file might have a higher
    version number after this book is published.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**sqlite-tools-win32-x86-3360000.zip**。请注意，文件版本号可能在此书出版后有所更新。
- en: Extract the ZIP file into a folder named `C:\Sqlite\`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件解压到一个名为`C:\Sqlite\`的文件夹中。
- en: Navigate to **Windows Settings**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**Windows设置**。
- en: Search for `environment` and choose **Edit the system environment variables**.
    On non-English versions of Windows, please search for the equivalent word in your
    local language to find the setting.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`环境`并选择**编辑系统环境变量**。在非英语版本的Windows上，请搜索您本地语言中的等效词汇以找到该设置。
- en: Click the **Environment Variables** button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**环境变量**按钮。
- en: In **System variables**, select **Path** in the list, and then click **Edit…**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**系统变量**中，从列表中选择**路径**，然后点击**编辑…**。
- en: Click **New**, enter `C:\Sqlite`, and press Enter.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**，输入`C:\Sqlite`，然后按回车键。
- en: Click **OK**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Click **OK**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Click **OK**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Close **Windows Settings**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**Windows设置**。
- en: Setting up SQLite for other OSes
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为其他操作系统设置SQLite
- en: 'SQLite can be downloaded and installed for other OSes from the following link:
    [https://www.sqlite.org/download.html](https://www.sqlite.org/download.html).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite可以从以下链接下载并安装在其他操作系统上：[https://www.sqlite.org/download.html](https://www.sqlite.org/download.html)。
- en: Creating the Northwind sample database for SQLite
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SQLite的Northwind示例数据库
- en: 'Now we can create the Northwind sample database for SQLite using an SQL script:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用SQL脚本为SQLite创建Northwind示例数据库：
- en: 'If you have not previously cloned the GitHub repository for this book, then
    do so now using the following link: [https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/).'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前未克隆本书的GitHub仓库，请现在使用以下链接进行克隆：[https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)。
- en: 'Copy the script to create the Northwind database for SQLite from the following
    path in your local Git repository: `/sql-scripts/Northwind4SQLite.sql` into the
    `WorkingWithEFCore` folder.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地Git仓库的以下路径复制创建Northwind数据库的脚本：`/sql-scripts/Northwind4SQLite.sql`，将其粘贴到`WorkingWithEFCore`文件夹中。
- en: 'Start a command line in the `WorkingWithEFCore` folder:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`文件夹中启动命令行：
- en: On Windows, start **File Explorer**, right-click the `WorkingWithEFCore` folder,
    and select **New Command Prompt at Folder** or **Open in Windows Terminal**.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，启动**文件资源管理器**，右键点击`WorkingWithEFCore`文件夹，选择**在此处打开命令提示符**或**在Windows终端中打开**。
- en: On macOS, start **Finder**, right-click the `WorkingWithEFCore` folder, and
    select **New Terminal at Folder**.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOS上，启动**Finder**，右键点击`WorkingWithEFCore`文件夹，选择**在此处新建终端**。
- en: 'Enter the command to execute the SQL script using SQLite and create the `Northwind.db`
    database, as shown in the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令，使用SQLite运行SQL脚本并创建`Northwind.db`数据库：
- en: '[PRE1]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Be patient because this command might take a while to create the database structure.
    Eventually, you will see the SQLite command prompt, as shown in the following
    output:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待，因为此命令可能需要一段时间来创建数据库结构。最终，您将看到SQLite命令提示符，如下所示：
- en: '[PRE2]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Press Ctrl + C on Windows or Ctrl + D on macOS to exit SQLite command mode.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上按Ctrl + C或在macOS上按Ctrl + D退出SQLite命令模式。
- en: Leave your terminal or command prompt window open because you will use it again
    soon.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持终端或命令提示符窗口打开，因为您很快会再次用到它。
- en: Managing the Northwind sample database with SQLiteStudio
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQLiteStudio管理Northwind示例数据库
- en: 'You can use a cross-platform graphical database manager named **SQLiteStudio**
    to easily manage SQLite databases:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用跨平台的图形数据库管理器**SQLiteStudio**轻松管理SQLite数据库：
- en: Navigate to the following link, [https://sqlitestudio.pl](https://sqlitestudio.pl),
    and download and extract the application to your preferred location.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问以下链接：[https://sqlitestudio.pl](https://sqlitestudio.pl)，下载并解压应用程序至您偏好的位置。
- en: Start **SQLiteStudio**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**SQLiteStudio**。
- en: On the **Database** menu, choose **Add a database**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**菜单中，选择**添加数据库**。
- en: In the **Database** dialog, in the **File** section, click on the yellow folder
    button to browse for an existing database file on the local computer, select the
    `Northwind.db` file in the `WorkingWithEFCore` folder, and then click **OK**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**对话框中，在**文件**部分，点击黄色文件夹按钮浏览本地计算机上的现有数据库文件，选择`WorkingWithEFCore`文件夹中的`Northwind.db`文件，然后点击**确定**。
- en: Right-click on the **Northwind** database and choose **Connect to the database**.
    You will see the 10 tables that were created by the script. (The script for SQLite
    is simpler than the one for SQL Server; it does not create as many tables or other
    database objects.)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**Northwind**数据库，选择**连接到数据库**。您将看到由脚本创建的10个表。（SQLite的脚本比SQL Server的简单；它没有创建那么多表或其他数据库对象。）
- en: Right-click on the **Products** table and choose **Edit the table**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**产品**表，选择**编辑表**。
- en: In the table editor window, note the structure of the `Products` table, including
    column names, data types, keys, and constraints, as shown in *Figure 10.4*:![Graphical
    user interface, text, application  Description automatically generated](img/B17442_11_07.png)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表编辑器窗口中，注意 `Products` 表的结构，包括列名、数据类型、键和约束，如图 *10.4* 所示：![图形用户界面，文本，应用程序 描述自动生成](img/B17442_11_07.png)
- en: 'Figure 10.4: The table editor in SQLiteStudio showing the structure of the
    Products table'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.4：SQLiteStudio 中的表编辑器显示产品表的结构
- en: In the table editor window, click the **Data** tab, and you will see 77 products,
    as shown in *Figure 10.5*:![Graphical user interface, text, application  Description
    automatically generated](img/B17442_11_08.png)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表编辑器窗口中，点击**数据**选项卡，您将看到 77 种产品，如图 *10.5* 所示：![图形用户界面，文本，应用程序 描述自动生成](img/B17442_11_08.png)
- en: 'Figure 10.5: The Data tab showing the rows in the Products table'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.5：数据选项卡显示产品表中的行
- en: In the **Database** window, right-click **Northwind** and select **Disconnect
    from the database**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**窗口中，右键点击**Northwind**并选择**断开与数据库的连接**。
- en: Exit SQLiteStudio.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出 SQLiteStudio。
- en: Setting up EF Core
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 EF Core
- en: Before we dive into the practicalities of managing data using EF Core, let's
    briefly talk about choosing between EF Core data providers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨使用 EF Core 管理数据的实际操作之前，让我们简要讨论一下在 EF Core 数据提供者之间进行选择的问题。
- en: Choosing an EF Core database provider
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 EF Core 数据库提供者
- en: To manage data in a specific database, we need classes that know how to efficiently
    talk to that database.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理特定数据库中的数据，我们需要知道如何高效地与该数据库通信的类。
- en: EF Core database providers are sets of classes that are optimized for a specific
    data store. There is even a provider for storing the data in the memory of the
    current process, which can be useful for high-performance unit testing since it
    avoids hitting an external system.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 数据库提供者是一组针对特定数据存储优化的类。甚至还有一个提供者用于在当前进程的内存中存储数据，这对于高性能单元测试非常有用，因为它避免了访问外部系统。
- en: 'They are distributed as NuGet packages, as shown in the following table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它们作为 NuGet 包分发，如下表所示：
- en: '| To manage this data store | Install this NuGet package |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 要管理此数据存储 | 安装此 NuGet 包 |'
- en: '| Microsoft SQL Server 2012 or later | `Microsoft.EntityFrameworkCore.SqlServer`
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| Microsoft SQL Server 2012 或更高版本 | `Microsoft.EntityFrameworkCore.SqlServer`
    |'
- en: '| SQLite 3.7 or later | `Microsoft.EntityFrameworkCore.SQLite` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 3.7 或更高版本 | `Microsoft.EntityFrameworkCore.SQLite` |'
- en: '| MySQL | `MySQL.Data.EntityFrameworkCore` |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| MySQL | `MySQL.Data.EntityFrameworkCore` |'
- en: '| In-memory | `Microsoft.EntityFrameworkCore.InMemory` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 内存中 | `Microsoft.EntityFrameworkCore.InMemory` |'
- en: '| Azure Cosmos DB SQL API | `Microsoft.EntityFrameworkCore.Cosmos` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| Azure Cosmos DB SQL API | `Microsoft.EntityFrameworkCore.Cosmos` |'
- en: '| Oracle DB 11.2 | `Oracle.EntityFrameworkCore` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| Oracle DB 11.2 | `Oracle.EntityFrameworkCore` |'
- en: You can install as many EF Core database providers in the same project as you
    need. Each package includes the shared types as well as provider-specific types.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一项目中安装所需数量的 EF Core 数据库提供者。每个包都包括共享类型以及提供者特定的类型。
- en: Connecting to a database
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: To connect to an SQLite database, we just need to know the database filename,
    set using the parameter `Filename`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到 SQLite 数据库，我们只需要知道数据库文件名，使用参数 `Filename` 设置。
- en: 'To connect to an SQL Server database, we need to know multiple pieces of information,
    as shown in the following list:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到 SQL Server 数据库，我们需要知道以下列表中的多项信息：
- en: The name of the server (and the instance if it has one).
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器名称（如果有实例，则包括实例）。
- en: The name of the database.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库名称。
- en: Security information, such as username and password, or if we should pass the
    currently logged-on user's credentials automatically.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全信息，例如用户名和密码，或者我们是否应该自动传递当前登录用户的凭据。
- en: We specify this information in a **connection string**.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**连接字符串**中指定这些信息。
- en: 'For backward compatibility, there are multiple possible keywords we can use
    in an SQL Server connection string for the various parameters, as shown in the
    following list:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们可以在 SQL Server 连接字符串中使用多种可能的关键字来表示各种参数，如下表所示：
- en: '`Data Source` or `server` or `addr`: These keywords are the name of the server
    (and an optional instance). You can use a dot `.` to mean the local server.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data Source` 或 `server` 或 `addr`：这些关键字是服务器名称（以及可选的实例）。您可以使用点 `.` 表示本地服务器。'
- en: '`Initial Catalog` or `database`: These keywords are the name of the database.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Initial Catalog` 或 `database`：这些关键字是数据库名称。'
- en: '`Integrated Security` or `trusted_connection`: These keywords are set to `true`
    or `SSPI` to pass the thread''s current user credentials.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Integrated Security`或`trusted_connection`：这些关键字设置为`true`或`SSPI`，以传递线程当前用户凭据。'
- en: '`MultipleActiveResultSets`: This keyword is set to `true` to enable a single
    connection to be used to work with multiple tables simultaneously to improve efficiency.
    It is used for lazy loading rows from related tables.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultipleActiveResultSets`：此关键字设置为`true`，以启用单个连接同时处理多个表以提高效率。它用于延迟加载相关表中的行。'
- en: 'As described in the list above, when you write code to connect to an SQL Server
    database, you need to know its server name. The server name depends on the edition
    and version of SQL Server that you will connect to, as shown in the following
    table:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如上表所述，编写代码连接到SQL Server数据库时，您需要知道其服务器名称。服务器名称取决于您将连接的SQL Server版本和版本，如下表所示：
- en: '| SQL Server edition | Server name \ Instance name |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| SQL Server版本 | 服务器名称\实例名称 |'
- en: '| LocalDB 2012 | `(localdb)\v11.0` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| LocalDB 2012 | `(localdb)\v11.0` |'
- en: '| LocalDB 2016 or later | `(localdb)\mssqllocaldb` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| LocalDB 2016或更高版本 | `(localdb)\mssqllocaldb` |'
- en: '| Express | `.\sqlexpress` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| Express | `.\sqlexpress` |'
- en: '| Full/Developer (default instance) | `.` |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| Full/Developer（默认实例） | `.` |'
- en: '| Full/Developer (named instance) | `.\cs10dotnet6` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| Full/Developer（命名实例） | `.\cs10dotnet6` |'
- en: '**Good Practice**: Use a dot `.` as shorthand for the local computer name.
    Remember that server names for SQL Server are made of two parts: the name of the
    computer and the name of an SQL Server instance. You provide instance names during
    custom installation.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：使用点`.`作为本地计算机名称的简写。请记住，SQL Server服务器名称由两部分组成：计算机名称和SQL Server实例名称。您在自定义安装期间提供实例名称。'
- en: Defining the Northwind database context class
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义Northwind数据库上下文类
- en: The `Northwind` class will be used to represent the database. To use EF Core,
    the class must inherit from `DbContext`. This class understands how to communicate
    with databases and dynamically generate SQL statements to query and manipulate
    data.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Northwind`类将用于表示数据库。要使用EF Core，该类必须继承自`DbContext`。此类知道如何与数据库通信并动态生成SQL语句以查询和操作数据。'
- en: Your `DbContext`-derived class should have an overridden method named `OnConfiguring`,
    which will set the database connection string.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`DbContext`派生类应有一个名为`OnConfiguring`的重写方法，该方法将设置数据库连接字符串。
- en: 'To make it easy for you to try SQLite and SQL Server, we will create a project
    that supports both, with a `string` field to control which is used at runtime:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便您尝试SQLite和SQL Server，我们将创建一个支持两者的项目，并使用一个`string`字段在运行时控制使用哪一个：
- en: 'In the `WorkingWithEFCore` project, add package references to the EF Core data
    provider for both SQL Server and SQLite, as shown in the following markup:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`项目中，添加对EF Core数据提供程序的包引用，包括SQL Server和SQLite，如下面的标记所示：
- en: '[PRE3]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Build the project to restore packages.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: Add a class file named `ProjectConstants.cs`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`ProjectConstants.cs`的类文件。
- en: 'In `ProjectConstants.cs`, define a class with a public string constant to store
    the database provider name that you want to use, as shown in the following code:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ProjectConstants.cs`中，定义一个具有公共字符串常量的类，以存储您想要使用的数据库提供程序名称，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `Program.cs`, import the `Packt.Shared` namespace and output the database
    provider, as shown in the following code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`Packt.Shared`命名空间并输出数据库提供程序，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add a class file named `Northwind.cs`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Northwind.cs`的类文件。
- en: 'In `Northwind.cs`, define a class named `Northwind`, import the main namespace
    for EF Core, make the class inherit from `DbContext`, and in an `OnConfiguring`
    method, check the `provider` field to either use SQLite or SQL Server, as shown
    in the following code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.cs`中，定义一个名为`Northwind`的类，导入EF Core的主命名空间，使该类继承自`DbContext`，并在`OnConfiguring`方法中，检查`provider`字段以使用SQLite或SQL
    Server，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you are using Visual Studio for Windows, then the compiled application executes
    in the `WorkingWithEFCore\bin\Debug\net6.0` folder so it will not find the database
    file.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows上的Visual Studio，则编译后的应用程序在`WorkingWithEFCore\bin\Debug\net6.0`文件夹中执行，因此它将找不到数据库文件。
- en: In **Solution Explorer**, right-click the `Northwind.db` file and select **Properties**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击`Northwind.db`文件并选择**属性**。
- en: In **Properties**, set **Copy to Output Directory** to **Copy always**.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，将**复制到输出目录**设置为**始终复制**。
- en: 'Open `WorkingWithEFCore.csproj` and note the new elements, as shown in the
    following markup:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`WorkingWithEFCore.csproj`并注意新元素，如下面的标记所示：
- en: '[PRE7]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you are using Visual Studio Code, then the compiled application executes
    in the `WorkingWithEFCore` folder so it will find the database file without it
    being copied.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是 Visual Studio Code，那么编译后的应用程序将在 `WorkingWithEFCore` 文件夹中执行，因此无需复制即可找到数据库文件。
- en: Run the console application and note the output showing which database provider
    you chose to use.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意输出，显示你选择的哪个数据库提供程序。
- en: Defining EF Core models
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 EF Core 模型
- en: EF Core uses a combination of **conventions**, **annotation attributes**, and
    **Fluent API** statements to build an entity model at runtime so that any actions
    performed on the classes can later be automatically translated into actions performed
    on the actual database. An entity class represents the structure of a table and
    an instance of the class represents a row in that table.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 结合使用**约定**、**注解属性**和**Fluent API** 语句在运行时构建实体模型，以便对类执行的任何操作都可以自动转换为对实际数据库执行的操作。实体类表示表的结构，类的实例表示该表中的一行。
- en: First, we will review the three ways to define a model, with code examples,
    and then we will create some classes that implement those techniques.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回顾定义模型的三种方式，并附上代码示例，随后我们将创建一些实现这些技术的类。
- en: Using EF Core conventions to define the model
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EF Core 约定定义模型
- en: 'The code we will write will use the following conventions:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的代码将使用以下约定：
- en: The name of a table is assumed to match the name of a `DbSet<T>` property in
    the `DbContext` class, for example, `Products`.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表名默认与 `DbContext` 类中 `DbSet<T>` 属性的名称相匹配，例如 `Products`。
- en: The names of the columns are assumed to match the names of properties in the
    entity model class, for example, `ProductId`.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列名默认与实体模型类中的属性名称相匹配，例如 `ProductId`。
- en: The `string` .NET type is assumed to be a `nvarchar` type in the database.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.NET` 中的 `string` 类型默认在数据库中为 `nvarchar` 类型。'
- en: The `int` .NET type is assumed to be an `int` type in the database.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.NET` 中的 `int` 类型默认在数据库中为 `int` 类型。'
- en: The primary key is assumed to be a property that is named `Id` or `ID`, or when
    the entity model class is named `Product`, then the property can be named `ProductId`
    or `ProductID`. If this property is an integer type or the `Guid` type, then it
    is also assumed to be an `IDENTITY` column (a column type that automatically assigns
    a value when inserting).
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键默认是名为 `Id` 或 `ID` 的属性，或者当实体模型类名为 `Product` 时，属性可以名为 `ProductId` 或 `ProductID`。如果此属性是整数类型或
    `Guid` 类型，则还假定它为 `IDENTITY` 列（插入时自动赋值的列类型）。
- en: '**Good Practice**: There are many other conventions that you should know, and
    you can even define your own, but that is beyond the scope of this book. You can
    read about them at the following link: [https://docs.microsoft.com/en-us/ef/core/modeling/](https://docs.microsoft.com/en-us/ef/core/modeling/)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：还有许多其他约定你应该了解，你甚至可以定义自己的约定，但这超出了本书的范围。你可以在以下链接中阅读相关内容：[https://docs.microsoft.com/en-us/ef/core/modeling/](https://docs.microsoft.com/en-us/ef/core/modeling/)'
- en: Using EF Core annotation attributes to define the model
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EF Core 注解属性定义模型
- en: Conventions often aren't enough to completely map the classes to the database
    objects. A simple way of adding more smarts to your model is to apply annotation
    attributes.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 常规往往不足以完全映射类到数据库对象。为模型添加更多智能的一种简单方法是应用注解属性。
- en: 'Some common attributes are shown in the following table:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了一些常见属性：
- en: '| Attribute | Description |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| `[Required]` | Ensures the value is not `null`. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `[Required]` | 确保值不为 `null`。 |'
- en: '| `[StringLength(50)]` | Ensures the value is up to 50 characters in length.
    |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `[StringLength(50)]` | 确保值长度最多为 50 个字符。 |'
- en: '| `[RegularExpression(expression)]` | Ensures the value matches the specified
    regular expression. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `[RegularExpression(expression)]` | 确保值与指定的正则表达式匹配。 |'
- en: '| `[Column(TypeName = "money", Name = "UnitPrice")]` | Specifies the column
    type and column name used in the table. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `[Column(TypeName = "money", Name = "UnitPrice")]` | 指定表中使用的列类型和列名称。 |'
- en: 'For example, in the database, the maximum length of a product name is 40, and
    the value cannot be null, as shown highlighted in the following **Data Definition
    Language** (**DDL**) code that defines how to create a table named `Products`
    with its columns, data types, keys, and other constraints:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数据库中，产品名称的最大长度为 40，且值不能为空，如下所示，**数据定义语言**（**DDL**）代码高亮显示了如何创建名为 `Products`
    的表及其列、数据类型、键和其他约束：
- en: '[PRE8]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In a `Product` class, we could apply attributes to specify this, as shown in
    the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Product`类中，我们可以应用属性来指定这一点，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When there isn't an obvious map between .NET types and database types, an attribute
    can be used.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当.NET类型和数据库类型之间没有明显的映射时，可以使用属性。
- en: 'For example, in the database, the column type of `UnitPrice` for the `Products`
    table is `money`. .NET does not have a `money` type, so it should use `decimal`
    instead, as shown in the following code:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数据库中，`Products`表的`UnitPrice`列的类型是`money`。.NET没有`money`类型，因此应使用`decimal`代替，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another example is for the `Categories` table, as shown in the following DDL
    code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是针对`Categories`表的，如下面的DDL代码所示：
- en: '[PRE11]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `Description` column can be longer than the maximum 8,000 characters that
    can be stored in a `nvarchar` variable, so it needs to map to `ntext` instead,
    as shown in the following code:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`Description`列可能比`nvarchar`变量可以存储的最大8,000个字符更长，因此需要映射到`ntext`，如下面的代码所示：'
- en: '[PRE12]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the EF Core Fluent API to define the model
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EF Core Fluent API定义模型
- en: 'The last way that the model can be defined is by using the Fluent API. This
    API can be used instead of attributes, as well as being used in addition to them.
    For example, to define the `ProductName` property, instead of decorating the property
    with two attributes, an equivalent Fluent API statement could be written in the
    `OnModelCreating` method of the database context class, as shown in the following
    code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 定义模型的最后一种方式是使用Fluent API。此API可以替代属性使用，也可以与属性一起使用。例如，为了定义`ProductName`属性，而不是用两个属性装饰该属性，可以在数据库上下文类的`OnModelCreating`方法中编写等效的Fluent
    API语句，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This keeps the entity model class simpler.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得实体模型类更简单。
- en: Understanding data seeding with the Fluent API
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解使用Fluent API进行数据播种
- en: Another benefit of the Fluent API is to provide initial data to populate a database.
    EF Core automatically works out what insert, update, or delete operations must
    be executed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Fluent API的另一个好处是提供初始数据以填充数据库。EF Core会自动计算出必须执行哪些插入、更新或删除操作。
- en: 'For example, if we wanted to make sure that a new database has at least one
    row in the `Product` table, then we would call the `HasData` method, as shown
    in the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想确保新数据库的`Product`表中至少有一行，那么我们将调用`HasData`方法，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Our model will map to an existing database that is already populated with data
    so we will not need to use this technique in our code.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型将映射到一个已填充数据的现有数据库，因此我们不需要在我们的代码中使用这种技术。
- en: Building an EF Core model for the Northwind tables
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Northwind表构建EF Core模型
- en: Now that you've learned about ways to define an EF Core model, let's build a
    model to represent two tables in the `Northwind` database.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了定义EF Core模型的方法，让我们构建一个模型来表示`Northwind`数据库中的两个表。
- en: 'The two entity classes will refer to each other, so to avoid compiler errors,
    we will create the classes without any members first:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 两个实体类将相互引用，为了避免编译器错误，我们将首先创建不包含任何成员的类：
- en: In the `WorkingWithEFCore` project, add two class files named `Category.cs`
    and `Product.cs`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`项目中，添加两个名为`Category.cs`和`Product.cs`的类文件。
- en: 'In `Category.cs`, define a class named `Category`, as shown in the following
    code:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，定义一个名为`Category`的类，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Product.cs`, define a class named `Product`, as shown in the following
    code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，定义一个名为`Product`的类，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Defining the Category and Product entity classes
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义Category和Product实体类
- en: 'The `Category` class, also known as an entity model, will be used to represent
    a row in the `Categories` table. This table has four columns, as shown in the
    following DDL:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`Category`类，也称为实体模型，将用于表示`Categories`表中的一行。该表有四列，如下面的DDL所示：'
- en: '[PRE17]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will use conventions to define:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用约定来定义：
- en: Three of the four properties (we will not map the `Picture` column).
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个属性中的三个（我们将不映射`Picture`列）。
- en: The primary key.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键。
- en: The one-to-many relationship to the `Products` table.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`Products`表的一对多关系。
- en: To map the `Description` column to the correct database type, we will need to
    decorate the `string` property with the `Column` attribute.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`Description`列映射到正确的数据库类型，我们需要用`Column`属性装饰`string`属性。
- en: Later in this chapter, we will use the Fluent API to define that `CategoryName`
    cannot be null and is limited to a maximum of 15 characters.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面，我们将使用Fluent API定义`CategoryName`不能为空，且最多只能有15个字符。
- en: 'Let''s go:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧：
- en: 'Modify the `Category` entity model class, as shown in the following code:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Category`实体模型类，如下所示：
- en: '[PRE18]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `Product` class will be used to represent a row in the `Products` table,
    which has ten columns.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Product`类将用于表示`Products`表中的一行，该表有十列。'
- en: 'You do not need to include all columns from a table as properties of a class.
    We will only map six properties: `ProductId`, `ProductName`, `UnitPrice`, `UnitsInStock`,
    `Discontinued`, and `CategoryId`.'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你不需要将表中的所有列都作为类的属性包含在内。我们只会映射六个属性：`ProductId`、`ProductName`、`UnitPrice`、`UnitsInStock`、`Discontinued`和`CategoryId`。
- en: Columns that are not mapped to properties cannot be read or set using the class
    instances. If you use the class to create a new object, then the new row in the
    table will have `NULL` or some other default value for the unmapped column values
    in that row. You must make sure that those missing columns are optional or have
    default values set by the database or an exception will be thrown at runtime.
    In this scenario, the rows already have data values and I have decided that I
    do not need to read those values in this application.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未映射到属性的列不能通过类实例读取或设置。如果你使用该类创建一个新对象，那么表中新行的未映射列值将为`NULL`或其他默认值。你必须确保这些缺失的列是可选的，或者由数据库设置了默认值，否则在运行时会抛出异常。在这种情况下，行中已有数据值，我已决定在本应用程序中不需要读取这些值。
- en: We can rename a column by defining a property with a different name, like `Cost`,
    and then decorating the property with the `[Column]` attribute and specifying
    its column name, like `UnitPrice`.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过定义一个不同名称的属性，如`Cost`，然后使用`[Column]`属性装饰该属性并指定其列名称，如`UnitPrice`，来重命名一列。
- en: The final property, `CategoryId`, is associated with a `Category` property that
    will be used to map each product to its parent category.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一个属性`CategoryId`与一个`Category`属性关联，该属性将用于将每个产品映射到其父类别。
- en: 'Modify the `Product` class, as shown in the following code:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Product`类，如下所示：
- en: '[PRE19]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The two properties that relate the two entities, `Category.Products` and `Product.Category`,
    are both marked as `virtual`. This allows EF Core to inherit and override the
    properties to provide extra features, such as lazy loading.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 关联两个实体的两个属性，`Category.Products`和`Product.Category`，都被标记为`virtual`。这使得EF Core能够继承并重写这些属性，以提供额外功能，如延迟加载。
- en: Adding tables to the Northwind database context class
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Northwind数据库上下文类添加表
- en: Inside your `DbContext`-derived class, you must define at least one property
    of the `DbSet<T>` type. These properties represent the tables. To tell EF Core
    what columns each table has, the `DbSet<T>` properties use generics to specify
    a class that represents a row in the table. That entity model class has properties
    that represent its columns.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`DbContext`派生类中，你必须至少定义一个`DbSet<T>`类型的属性。这些属性代表表。为了告诉EF Core每个表有哪些列，`DbSet<T>`属性使用泛型来指定一个代表表中一行的类。该实体模型类具有代表其列的属性。
- en: The `DbContext`-derived class can optionally have an overridden method named
    `OnModelCreating`. This is where you can write Fluent API statements as an alternative
    to decorating your entity classes with attributes.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext`派生类可以选择性地重写名为`OnModelCreating`的方法。在这里，你可以编写Fluent API语句，作为用属性装饰实体类的一种替代方法。'
- en: 'Let''s write some code:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来写一些代码：
- en: 'Modify the `Northwind` class to add statements to define two properties for
    the two tables and an `OnModelCreating` method, as shown highlighted in the following
    code:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Northwind`类，添加语句以定义两个表的两个属性及一个`OnModelCreating`方法，如下所示，高亮部分：
- en: '[PRE20]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In EF Core 3.0 and later, the `decimal` type is not supported by the SQLite
    database provider for sorting and other operations. We can fix this by telling
    the model that `decimal` values can be converted to `double` values when using
    the SQLite database provider. This does not actually perform any conversion at
    runtime.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 3.0及更高版本中，SQLite数据库提供程序不支持`decimal`类型进行排序和其他操作。我们可以通过告诉模型在使用SQLite数据库提供程序时`decimal`值可以转换为`double`值来解决这个问题。这实际上在运行时不会执行任何转换。
- en: Now that you have seen some examples of defining an entity model manually, let's
    see a tool that can do some of the work for you.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到了手动定义实体模型的一些示例，让我们来看一个能为你完成部分工作的工具。
- en: Setting up the dotnet-ef tool
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置dotnet-ef工具
- en: .NET has a command-line tool named `dotnet`. It can be extended with capabilities
    useful for working with EF Core. It can perform design-time tasks like creating
    and applying migrations from an older model to a newer model and generating code
    for a model from an existing database.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 有一个名为`dotnet`的命令行工具。它可以扩展用于与 EF Core 工作的有用功能。它可以执行设计时任务，如从旧模型到新模型创建和应用迁移，以及从现有数据库为模型生成代码。
- en: 'The `dotnet` `ef` command-line tool is not automatically installed. You have
    to install this package as either a **global** or **local tool**. If you have
    already installed an older version of the tool, then you should uninstall any
    existing version:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet` `ef`命令行工具不是自动安装的。您必须将此包作为**全局**或**本地**工具安装。如果您已经安装了该工具的旧版本，则应卸载任何现有版本：'
- en: 'At a command prompt or terminal, check if you have already installed `dotnet-ef`
    as a global tool, as shown in the following command:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，检查是否已将`dotnet-ef`作为全局工具安装，如以下命令所示：
- en: '[PRE21]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Check in the list if an older version of the tool has been installed, like
    the one for .NET Core 3.1, as shown in the following output:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查列表中是否已安装了旧版本的工具，例如 .NET Core 3.1 的版本，如以下输出所示：
- en: '[PRE22]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If an old version is already installed, then uninstall the tool, as shown in
    the following command:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果已安装旧版本，则卸载该工具，如以下命令所示：
- en: '[PRE23]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Install the latest version, as shown in the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装最新版本，如以下命令所示：
- en: '[PRE24]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If necessary, follow any OS-specific instructions to add the `dotnet tools`
    directory to your PATH environment variable as described in the output of installing
    the `dotnet-ef` tool.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，请按照任何特定于操作系统的说明，将`dotnet tools`目录添加到您的 PATH 环境变量中，如安装`dotnet-ef`工具的输出所述。
- en: Scaffolding models using an existing database
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用现有数据库脚手架模型
- en: Scaffolding is the process of using a tool to create classes that represent
    the model of an existing database using reverse engineering. A good scaffolding
    tool allows you to extend the automatically generated classes and then regenerate
    those classes without losing your extended classes.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架是指使用工具创建表示现有数据库模型的类的过程，使用逆向工程。一个好的脚手架工具允许您扩展自动生成的类，然后重新生成这些类而不会丢失您的扩展类。
- en: If you know that you will never regenerate the classes using the tool, then
    feel free to change the code for the automatically generated classes as much as
    you want. The code generated by the tool is just the best approximation.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确定永远不会使用工具重新生成这些类，那么请随意修改自动生成的类的代码。工具生成的代码只是最佳近似。
- en: '**Good Practice**: Do not be afraid to overrule a tool when you know better.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当你更了解情况时，不要害怕推翻工具的建议。'
- en: 'Let''s see if the tool generates the same model as we did manually:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看工具是否生成了与我们手动创建相同的模型：
- en: Add the `Microsoft.EntityFrameworkCore.Design` package to the `WorkingWithEFCore`
    project.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Microsoft.EntityFrameworkCore.Design`包添加到`WorkingWithEFCore`项目中。
- en: 'At a command prompt or terminal in the `WorkingWithEFCore` folder, generate
    a model for the `Categories` and `Products` tables in a new folder named `AutoGenModels`,
    as shown in the following command:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`文件夹中的命令提示符或终端中，为`Categories`和`Products`表在新文件夹`AutoGenModels`中生成模型，如以下命令所示：
- en: '[PRE25]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note the following:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: 'The command action: `dbcontext scaffold`'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令操作：`dbcontext scaffold`
- en: 'The connection string: `"Filename=Northwind.db"`'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串：`"Filename=Northwind.db"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.Sqlite`
- en: 'The tables to generate models for: `--table Categories --table Products`'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成模型的表：`--table Categories --table Products`
- en: 'The output folder: `--output-dir AutoGenModels`'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出文件夹：`--output-dir AutoGenModels`
- en: 'The namespace: `--namespace WorkingWithEFCore.AutoGen`'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace WorkingWithEFCore.AutoGen`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时使用数据注释和 Fluent API：`--data-annotations`
- en: 'To rename the context from [database_name]Context: `--context Northwind`'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将上下文从[数据库名称]Context重命名为：`--context Northwind`
- en: 'For SQL Server, change the database provider and connection string, as shown
    in the following command:'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 SQL Server，更改数据库提供程序和连接字符串，如以下命令所示：
- en: '[PRE26]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note the build messages and warnings, as shown in the following output:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意构建消息和警告，如以下输出所示：
- en: '[PRE27]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the `AutoGenModels` folder and note the three class files that were automatically
    generated: `Category.cs`, `Northwind.cs`, and `Product.cs`.'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AutoGenModels`文件夹，并注意自动生成的三个类文件：`Category.cs`、`Northwind.cs`和`Product.cs`。
- en: 'Open `Category.cs` and note the differences compared to the one you created
    manually, as shown in the following code:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Category.cs`，注意与您手动创建的版本相比的差异，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note the following:'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: It decorates the entity class with the `[Index]` attribute that was introduced
    in EF Core 5.0\. This indicates properties that should have an index. In earlier
    versions, only the Fluent API was supported for defining indexes. Since we are
    working with an existing database, this is not needed. But if we want to recreate
    a new empty database from our code then this information will be needed.
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它用EF Core 5.0中引入的`[Index]`属性装饰实体类。这表示应为哪些属性创建索引。在早期版本中，仅支持Fluent API定义索引。由于我们正在使用现有数据库，因此不需要这样做。但如果我们想从代码重新创建一个新的空数据库，则需要这些信息。
- en: The table name in the database is `Categories` but the `dotnet-ef` tool uses
    the **Humanizer** third-party library to automatically singularize the class name
    to `Category`, which is a more natural name when creating a single entity.
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库中的表名为`Categories`，但`dotnet-ef`工具使用第三方库**Humanizer**自动将类名单数化，变为`Category`，这在创建单个实体时是一个更自然的名称。
- en: The entity class is declared using the `partial` keyword so that you can create
    a matching `partial` class for adding additional code. This allows you to rerun
    the tool and regenerate the entity class without losing that extra code.
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体类使用`partial`关键字声明，以便您可以创建匹配的部分类来添加额外的代码。这样，您可以重新运行工具并重新生成实体类，而不会丢失那些额外的代码。
- en: The `CategoryId` property is decorated with the `[Key]` attribute to indicate
    that it is the primary key for this entity. The data type for this property is
    `int` for SQL Server and `long` for SQLite.
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CategoryId`属性用`[Key]`属性装饰，表示它是此实体的主键。该属性的数据类型对于SQL Server是`int`，对于SQLite是`long`。'
- en: The `Products` property uses the `[InverseProperty]` attribute to define the
    foreign key relationship to the `Category` property on the `Product` entity class.
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Products`属性使用`[InverseProperty]`属性定义与`Product`实体类上的`Category`属性的外键关系。'
- en: Open `Product.cs` and note the differences compared to the one you created manually.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Product.cs`，注意与您手动创建的版本相比的差异。
- en: 'Open `Northwind.cs` and note the differences compared to the one you created
    manually, as shown in the following edited-for-space code:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.cs`，注意与您手动创建的版本相比的差异，如下面的编辑后代码所示：
- en: '[PRE29]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Note the following:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: The `Northwind` data context class is `partial` to allow you to extend it and
    regenerate it in the future.
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 北风数据上下文类被声明为`partial`，以便您可以扩展它并在将来重新生成它。
- en: 'It has two constructors: a default parameter-less one and one that allows options
    to be passed in. This is useful in apps where you want to specify the connection
    string at runtime.'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有两个构造函数：一个无参数的默认构造函数和一个允许传递选项的构造函数。这在您希望在运行时指定连接字符串的应用程序中非常有用。
- en: The two `DbSet<T>` properties that represent the `Categories` and `Products`
    tables are set to the `null`-forgiving value to prevent static compiler analysis
    warnings at compile time. It has no effect at runtime.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表`Categories`和`Products`表的两个`DbSet<T>`属性被设置为`null`-forgiving值，以防止在编译时出现静态编译器分析警告。这在运行时没有影响。
- en: In the `OnConfiguring` method, if options have not been specified in the constructor,
    then it defaults to using a connection string that looks for the database file
    in the current folder. It has a compiler warning to remind you that you should
    not hardcode security information in this connection string.
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`OnConfiguring`方法中，如果在构造函数中未指定选项，则默认使用在当前文件夹中查找数据库文件的连接字符串。它有一个编译器警告，提醒您不应在此连接字符串中硬编码安全信息。
- en: In the `OnModelCreating` method, the Fluent API is used to configure the two
    entity classes, and then a partial method named `OnModelCreatingPartial` is invoked.
    This allows you to implement that partial method in your own partial `Northwind`
    class to add your own Fluent API configuration that will not be lost if you regenerate
    the model classes.
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`OnModelCreating`方法中，使用Fluent API配置了两个实体类，然后调用了名为`OnModelCreatingPartial`的部分方法。这允许您在自己的部分`Northwind`类中实现该部分方法，添加自己的Fluent
    API配置，这样在重新生成模型类时不会丢失这些配置。
- en: Close the automatically generated class files.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭自动生成的类文件。
- en: Configuring preconvention models
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置预设模型
- en: Along with support for the `DateOnly` and `TimeOnly` types for use with the
    SQLite database provider, one of the new features introduced with EF Core 6 is
    configuring preconvention models.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持`DateOnly`和`TimeOnly`类型用于SQLite数据库提供程序外，EF Core 6引入的新特性之一是配置预约定模型。
- en: As models become more complex, relying on conventions to discover entity types
    and their properties and successfully map them to tables and columns becomes harder.
    It would be useful if you could configure the conventions themselves before they
    are used to analyze and build a model.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 随着模型变得更为复杂，依赖约定来发现实体类型及其属性和成功地将它们映射到表和列变得更加困难。如果在分析和构建模型之前能够配置这些约定，将会非常有用。
- en: 'For example, you might want to define a convention to say that all `string`
    properties should have a maximum length of 50 characters as a default, or any
    property types that implement a custom interface should not be mapped, as shown
    in the following code:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能想要定义一个约定，规定所有`string`属性默认应有一个最大长度为50个字符，或者任何实现自定义接口的属性类型不应被映射，如下所示代码：
- en: '[PRE30]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the rest of this chapter, we will use the classes that you manually created.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将使用你手动创建的类。
- en: Querying EF Core models
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询EF Core模型
- en: Now that we have a model that maps to the Northwind database and two of its
    tables, we can write some simple LINQ queries to fetch data. You will learn much
    more about writing LINQ queries in *Chapter 11*, *Querying and Manipulating Data
    Using LINQ*.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个映射到Northwind数据库及其两个表的模型，我们可以编写一些简单的LINQ查询来获取数据。在*第11章*，*使用LINQ查询和操作数据*中，你将学习更多关于编写LINQ查询的知识。
- en: 'For now, just write the code and view the results:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只需编写代码并查看结果：
- en: 'At the top of `Program.cs`, import the main EF Core namespace to enable the
    use of the `Include` extension method to prefetch from a related table:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，导入主要的EF Core命名空间，以启用使用`Include`扩展方法从相关表预先加载：
- en: '[PRE31]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At the bottom of `Program.cs`, define a `QueryingCategories` method, and add
    statements to do these tasks, as shown in the following code:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`底部，定义一个`QueryingCategories`方法，并添加执行这些任务的语句，如下所示代码中所示：
- en: Create an instance of the `Northwind` class that will manage the database. Database
    context instances are designed for short lifetimes in a unit of work. They should
    be disposed of as soon as possible so we will wrap it in a `using` statement.
    In *Chapter 14*, *Building Websites Using ASP.NET Core Razor Pages*, you will
    learn how to get a database context using dependency injection.
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`Northwind`类的实例来管理数据库。数据库上下文实例设计为在单元工作中的短期生命周期。它们应尽快被释放，因此我们将它包裹在一个`using`语句中。在*第14章*，*使用ASP.NET
    Core Razor Pages构建网站*中，你将学习如何通过依赖注入获取数据库上下文。
- en: Create a query for all categories that include their related products.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个查询，获取所有包含相关产品的类别。
- en: 'Enumerate through the categories, outputting the name and number of products
    for each one:'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历类别，输出每个类别的名称和产品数量：
- en: '[PRE32]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'At the top of `Program.cs`, after outputting the database provider name, call
    the `QueryingCategories` method, as shown highlighted in the following code:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，在输出数据库提供程序名称后，调用`QueryingCategories`方法，如下所示代码中高亮显示的部分：
- en: '[PRE33]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the code and view the result (if run with Visual Studio 2022 for Windows
    using the SQLite database provider), as shown in the following output:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果（如果使用Visual Studio 2022 for Windows并使用SQLite数据库提供程序运行），如下所示输出：
- en: '[PRE34]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you run with Visual Studio Code using the SQLite database provider, then
    the path will be the `WorkingWithEFCore` folder. If you run using the SQL Server
    database provider, then there is no database file path output.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Visual Studio Code运行并使用SQLite数据库提供程序，那么路径将是`WorkingWithEFCore`文件夹。如果你使用SQL
    Server数据库提供程序运行，则不会有数据库文件路径输出。
- en: '**Warning!** If you see the following exception when using SQLite with Visual
    Studio 2022, the most likely problem is that the `Northwind.db` file is not being
    copied to the output directory. Make sure **Copy to Output Directory** is set
    to **Copy always**:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 如果你在使用Visual Studio 2022中的SQLite时看到以下异常，最可能的问题是`Northwind.db`文件没有被复制到输出目录。请确保**复制到输出目录**设置为**总是复制**：'
- en: '`Unhandled exception. Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite
    Error 1: ''no such table: Categories''.`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`未处理的异常。Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite错误1: ''没有这样的表:
    Categories''。`'
- en: Filtering included entities
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤包含的实体
- en: 'EF Core 5.0 introduced **filtered includes**, which means you can specify a
    lambda expression in the `Include` method call to filter which entities are returned
    in the results:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 5.0引入了**过滤包含**，这意味着您可以在`Include`方法调用中指定一个lambda表达式，以过滤结果中返回哪些实体：
- en: 'At the bottom of `Program.cs`, define a `FilteredIncludes` method, and add
    statements to do these tasks, as shown in the following code:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`底部，定义一个`FilteredIncludes`方法，并添加语句执行这些任务，如下所示：
- en: Create an instance of the `Northwind` class that will manage the database.
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`Northwind`类的实例来管理数据库。
- en: Prompt the user to enter a minimum value for units in stock.
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示用户输入库存单位的最小值。
- en: Create a query for categories that have products with that minimum number of
    units in stock.
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个查询，查找具有该最小库存单位数量的产品的类别。
- en: 'Enumerate through the categories and products, outputting the name and units
    in stock for each one:'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历类别和产品，输出每个的名称和库存单位：
- en: '[PRE35]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In `Program.cs`, comment out the `QueryingCategories` method and invoke the
    `FilteredIncludes` method, as shown highlighted in the following code:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉`QueryingCategories`方法，并调用`FilteredIncludes`方法，如以下高亮代码所示：
- en: '[PRE36]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the code, enter a minimum for units in stock like `100`, and view the result,
    as shown in the following output:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入库存单位的最小值，如`100`，并查看结果，如下所示：
- en: '[PRE37]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Unicode characters in the Windows console
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows控制台中的Unicode字符
- en: There is a limitation with the console provided by Microsoft on versions of
    Windows before the Windows 10 Fall Creators Update. By default, the console cannot
    display Unicode characters, for example, in the name Rhönbräu.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10 Fall Creators Update之前的Windows版本中，微软提供的控制台存在限制。默认情况下，控制台无法显示Unicode字符，例如Rhönbräu的名称。
- en: 'If you have this issue, then you can temporarily change the code page (also
    known as the character set) in a console to Unicode UTF-8 by entering the following
    command at the prompt before running the app:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到此问题，则可以通过在运行应用之前在提示符下输入以下命令来临时更改控制台中的代码页（也称为字符集）为Unicode UTF-8：
- en: '[PRE38]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Filtering and sorting products
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤和排序产品
- en: 'Let''s explore a more complex query that will filter and sort data:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一个更复杂的查询，它将过滤和排序数据：
- en: 'At the bottom of `Program.cs`, define a `QueryingProducts` method, and add
    statements to do the following, as shown in the following code:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`底部，定义一个`QueryingProducts`方法，并添加语句执行以下操作，如下所示：
- en: Create an instance of the `Northwind` class that will manage the database.
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`Northwind`类的实例来管理数据库。
- en: Prompt the user for a price for products. Unlike the previous code example,
    we will loop until the input is a valid price.
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示用户输入产品价格。与之前的代码示例不同，我们将循环直到输入有效价格。
- en: Create a query for products that cost more than the price using LINQ.
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ创建一个查询，查找价格高于指定价格的产品。
- en: 'Loop through the results, outputting the Id, name, cost (formatted in US dollars),
    and the number of units in stock:'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历结果，输出Id、名称、成本（以美元格式化）和库存单位数量：
- en: '[PRE39]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In `Program.cs`, comment out the previous method, and call the `QueryingProducts`
    method
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉之前的方法，并调用`QueryingProducts`方法
- en: 'Run the code, enter `50` when prompted to enter a product price, and view the
    result, as shown in the following output:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，当提示输入产品价格时，输入`50`，并查看结果，如下所示：
- en: '[PRE40]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Getting the generated SQL
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取生成的SQL
- en: 'You might be wondering how well written the SQL statements are that are generated
    from the C# queries we write. EF Core 5.0 introduced a quick and easy way to see
    the SQL generated:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会好奇我们编写的C#查询生成的SQL语句写得如何。EF Core 5.0引入了一种快速简便的方法来查看生成的SQL：
- en: 'In the `FilteredIncludes` method, before using the `foreach` statement to enumerate
    the query, add a statement to output the generated SQL, as shown highlighted in
    the following code:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FilteredIncludes`方法中，在使用`foreach`语句遍历查询之前，添加一条语句以输出生成的SQL，如下所示：
- en: '[PRE41]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In `Program.cs`, comment out the call to the `QueryingProducts` method and uncomment
    the call to the `FilteredIncludes` method.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉对`QueryingProducts`方法的调用，并取消对`FilteredIncludes`方法的调用。
- en: 'Run the code, enter a minimum for units in stock like `99`, and view the result
    (when run with SQLite), as shown in the following output:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入库存单位的最小值，如`99`，并查看结果（使用SQLite运行时），如下所示：
- en: '[PRE42]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note the SQL parameter named `@_stock_0` has been set to a minimum stock value
    of `99`.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 注意名为`@_stock_0`的SQL参数已设置为最小库存值`99`。
- en: 'For SQL Server, the SQL generated is slightly different, for example, it uses
    square brackets instead of double-quotes around object names, as shown in the
    following output:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL Server，生成的SQL略有不同，例如，它使用方括号而不是双引号围绕对象名称，如下所示输出：
- en: '[PRE43]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Logging EF Core using a custom logging provider
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义日志记录提供程序记录EF Core
- en: 'To monitor the interaction between EF Core and the database, we can enable
    logging. This requires the following two tasks:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监控EF Core与数据库之间的交互，我们可以启用日志记录。这需要完成以下两个任务：
- en: The registering of a **logging provider**.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册**日志记录提供程序**。
- en: The implementation of a **logger**.
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录器**的实现。'
- en: 'Let''s see an example of this in action:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个实际操作的示例：
- en: Add a file to your project named `ConsoleLogger.cs`.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目中添加一个名为`ConsoleLogger.cs`的文件。
- en: 'Modify the file to define two classes, one to implement `ILoggerProvider` and
    one to implement `ILogger`, as shown in the following code, and note the following:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件以定义两个类，一个实现`ILoggerProvider`，另一个实现`ILogger`，如下所示代码，并注意以下事项：
- en: '`ConsoleLoggerProvider` returns an instance of `ConsoleLogger`. It does not
    need any unmanaged resources, so the `Dispose` method does not do anything, but
    it must exist.'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLoggerProvider`返回一个`ConsoleLogger`实例。它不需要任何非托管资源，因此`Dispose`方法无需执行任何操作，但必须存在。'
- en: '`ConsoleLogger` is disabled for log levels `None`, `Trace`, and `Information`.
    It is enabled for all other log levels.'
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLogger`对于日志级别`None`、`Trace`和`Information`被禁用。对于所有其他日志级别均启用。'
- en: '`ConsoleLogger` implements its `Log` method by writing to `Console`:'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLogger`通过向`Console`写入内容来实现其`Log`方法：'
- en: '[PRE44]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'At the top of `Program.cs`, add statements to import the namespaces needed
    for logging, as shown in the following code:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，添加用于日志记录所需的命名空间导入语句，如下所示：
- en: '[PRE45]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We already used the `ToQueryString` method to get the SQL for `FilteredIncludes`
    so we do not need to add logging to that method. To both the `QueryingCategories`
    and `QueryingProducts` methods, add statements immediately inside the `using`
    block for the `Northwind` database context to get the logging factory and register
    your custom console logger, as shown highlighted in the following code:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经使用`ToQueryString`方法获取了`FilteredIncludes`的SQL，因此无需向该方法添加日志记录。在`QueryingCategories`和`QueryingProducts`方法中，立即在`Northwind`数据库上下文的`using`块内添加语句以获取日志记录工厂并注册您的自定义控制台日志记录器，如下所示突出显示：
- en: '[PRE46]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: At the top of `Program.cs`, comment out the call to the `FilteredIncludes` method
    and uncomment the call to the `QueryingProducts` method.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，注释掉对`FilteredIncludes`方法的调用，并取消注释对`QueryingProducts`方法的调用。
- en: 'Run the code and view the logs, which are partially shown in the following
    output:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看日志，部分输出如下所示：
- en: '[PRE47]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Your logs might vary from those shown above based on your chosen database provider
    and code editor, and future improvements to EF Core. For now, note that different
    events like opening a connection or executing a command have different event ids.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 您的日志可能与上述显示的有所不同，这取决于您选择的数据库提供程序和代码编辑器，以及EF Core未来的改进。目前，请注意不同事件（如打开连接或执行命令）具有不同的事件ID。
- en: Filtering logs by provider-specific values
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根据提供程序特定值过滤日志
- en: 'The event id values and what they mean will be specific to the .NET data provider.
    If we want to know how the LINQ query has been translated into SQL statements
    and is executing, then the event Id to output has an `Id` value of `20100`:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 事件ID值及其含义将特定于.NET数据提供程序。如果我们想了解LINQ查询如何被转换为SQL语句并执行，则要输出的事件ID具有`Id`值`20100`：
- en: 'Modify the `Log` method in `ConsoleLogger` to only output events with an `Id`
    of `20100`, as highlighted in the following code:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ConsoleLogger`中的`Log`方法，仅输出具有`Id`为`20100`的事件，如下所示突出显示：
- en: '[PRE48]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In `Program.cs`, uncomment the `QueryingCategories` method and comment out the
    other methods so that we can monitor the SQL statements that are generated when
    joining two tables.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，取消注释`QueryingCategories`方法并注释掉其他方法，以便我们可以监视在连接两个表时生成的SQL语句。
- en: 'Run the code, and note the following SQL statements that were logged, as shown
    in the following output that has been edited for space:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意已记录的以下SQL语句，如下所示输出已为空间编辑：
- en: '[PRE49]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Logging with query tags
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询标签进行日志记录
- en: When logging LINQ queries, it can be tricky to correlate log messages in complex
    scenarios. EF Core 2.2 introduced the query tags feature to help by allowing you
    to add SQL comments to the log.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 记录LINQ查询时，在复杂场景中关联日志消息可能较为棘手。EF Core 2.2引入了查询标签功能，通过允许你向日志添加SQL注释来提供帮助。
- en: 'You can annotate a LINQ query using the `TagWith` method, as shown in the following
    code:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`TagWith`方法注释LINQ查询，如下所示：
- en: '[PRE50]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This will add an SQL comment to the log, as shown in the following output:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在日志中添加一个SQL注释，如下所示：
- en: '[PRE51]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Pattern matching with Like
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Like进行模式匹配
- en: 'EF Core supports common SQL statements including `Like` for pattern matching:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core支持包括`Like`在内的常用SQL语句进行模式匹配：
- en: 'At the bottom of `Program.cs`, add a method named `QueryingWithLike`, as shown
    in the following code, and note:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`底部，添加一个名为`QueryingWithLike`的方法，如下所示，并注意：
- en: We have enabled logging.
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已启用日志记录。
- en: We prompt the user to enter part of a product name and then use the `EF.Functions.Like`
    method to search anywhere in the `ProductName` property.
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提示用户输入产品名称的一部分，然后使用`EF.Functions.Like`方法在`ProductName`属性中任意位置进行搜索。
- en: 'For each matching product, we output its name, stock, and if it is discontinued:'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个匹配的产品，我们输出其名称、库存以及是否已停产：
- en: '[PRE52]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In `Program.cs`, comment out the existing methods, and call `QueryingWithLike`.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉现有方法，并调用`QueryingWithLike`。
- en: 'Run the code, enter a partial product name such as `che`, and view the result,
    as shown in the following output:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入部分产品名称如`che`，并查看结果，如下所示：
- en: '[PRE53]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: EF Core 6.0 introduces another useful function, `EF.Functions.Random`, that
    maps to a database function returning a pseudo-random number between 0 and 1 exclusive.
    For example, you could multiply the random number by the count of rows in a table
    to select one random row from that table.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 6.0引入了另一个有用的函数`EF.Functions.Random`，它映射到数据库函数，返回0和1之间（不包括1）的伪随机数。例如，您可以将随机数乘以表中的行数，以从该表中选择一行随机行。
- en: Defining global filters
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义全局过滤器
- en: 'Northwind products can be discontinued, so it might be useful to ensure that
    discontinued products are never returned in results, even if the programmer does
    not use `Where` to filter them out in their queries:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 北风产品可能会停产，因此即使程序员不在查询中使用`Where`过滤它们，确保停产产品永远不会在结果中返回可能很有用：
- en: 'In `Northwind.cs`, modify the `OnModelCreating` method to add a global filter
    to remove discontinued products, as shown highlighted in the following code:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.cs`中，修改`OnModelCreating`方法，添加一个全局过滤器以移除停产产品，如下所示高亮部分：
- en: '[PRE54]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the code, enter the partial product name `che`, view the result, and note
    that **Chef Anton''s Gumbo Mix** is now missing, because the SQL statement generated
    includes a filter for the `Discontinued` column, as shown highlighted in the following
    output:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入部分产品名称`che`，查看结果，并注意**Chef Anton's Gumbo Mix**现已缺失，因为生成的SQL语句中包含了对`Discontinued`列的过滤，如下所示高亮部分：
- en: '[PRE55]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Loading patterns with EF Core
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EF Core的加载模式
- en: 'There are three loading patterns that are commonly used with EF Core:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 与EF Core一起常用的有三种加载模式：
- en: '**Eager loading**: Load data early.'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预先加载**：提前加载数据。'
- en: '**Lazy loading**: Load data automatically just before it is needed.'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟加载**：在数据即将被使用前自动加载。'
- en: '**Explicit loading**: Load data manually.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显式加载**：手动加载数据。'
- en: In this section, we're going to introduce each of them.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐一介绍它们。
- en: Eager loading entities
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体的预先加载
- en: In the `QueryingCategories` method, the code currently uses the `Categories`
    property to loop through each category, outputting the category name and the number
    of products in that category.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在`QueryingCategories`方法中，当前代码使用`Categories`属性遍历每个类别，输出类别名称以及该类别中的产品数量。
- en: This works because when we wrote the query, we enabled eager loading by calling
    the `Include` method for the related products.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是因为在编写查询时，我们通过调用`Include`方法为相关产品启用了预先加载。
- en: 'Let''s see what happens if we do not call `Include`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们不调用`Include`会发生什么：
- en: 'Modify the query to comment out the `Include` method call, as shown in the
    following code:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改查询，注释掉`Include`方法的调用，如下所示：
- en: '[PRE56]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In `Program.cs`, comment out all methods except `QueryingCategories`.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉除`QueryingCategories`之外的所有方法。
- en: 'Run the code and view the result, as shown in the following partial output:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示部分输出：
- en: '[PRE57]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Each item in `foreach` is an instance of the `Category` class, which has a property
    named `Products`, that is, the list of products in that category. Since the original
    query is only selected from the `Categories` table, this property is empty for
    each category.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach`循环中的每一项都是`Category`类的一个实例，该类具有一个名为`Products`的属性，即该类别中的产品列表。由于原始查询仅从`Categories`表中选择，因此每个类别的此属性为空。'
- en: Enabling lazy loading
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用延迟加载
- en: 'Lazy loading was introduced in EF Core 2.1, and it can automatically load missing
    related data. To enable lazy loading, developers must:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟加载是在EF Core 2.1中引入的，它可以自动加载缺失的相关数据。要启用延迟加载，开发者必须：
- en: Reference a NuGet package for proxies.
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用一个NuGet包用于代理。
- en: Configure lazy loading to use a proxy.
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置延迟加载以使用代理。
- en: 'Let''s see this in action:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何运作的：
- en: 'In the `WorkingWithEFCore` project, add a package reference for EF Core proxies,
    as shown in the following markup:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`项目中，添加一个EF Core代理的包引用，如下面的标记所示：
- en: '[PRE58]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Build the project to restore packages.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: 'Open `Northwind.cs`, and call an extension method to use lazy loading proxies
    at the top of the `OnConfiguring` method, as shown highlighted in the following
    code:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.cs`，并在`OnConfiguring`方法的顶部调用一个扩展方法以使用延迟加载代理，如下面的高亮代码所示：
- en: '[PRE59]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now, every time the loop enumerates, and an attempt is made to read the `Products`
    property, the lazy loading proxy will check if they are loaded. If not, it will
    load them for us "lazily" by executing a `SELECT` statement to load just that
    set of products for the current category, and then the correct count will be returned
    to the output.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，每当循环枚举时，尝试读取`Products`属性，延迟加载代理将检查它们是否已加载。如果没有，它将通过执行一个`SELECT`语句为我们“懒惰地”加载当前类别的那组产品，然后正确的计数将返回到输出。
- en: 'Run the code and note that the product counts are now correct. But you will
    see that the problem with lazy loading is that multiple round trips to the database
    server are required to eventually fetch all the data, as shown in the following
    partial output:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意产品计数现在已正确。但你会发现延迟加载的问题在于，为了最终获取所有数据，需要多次往返数据库服务器，如下面的部分输出所示：
- en: '[PRE60]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Explicit loading entities
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式加载实体
- en: 'Another type of loading is explicit loading. It works in a similar way to lazy
    loading, with the difference being that you are in control of exactly what related
    data is loaded and when:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种加载类型是显式加载。它的工作方式与延迟加载类似，区别在于你可以控制确切的相关数据何时加载：
- en: 'At the top of `Program.cs`, import the change tracking namespace to enable
    us to use the `CollectionEntry` class to manually load related entities, as shown
    in the following code:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入更改跟踪命名空间，以便我们能够使用`CollectionEntry`类手动加载相关实体，如下面的代码所示：
- en: '[PRE61]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the `QueryingCategories` method, modify the statements to disable lazy loading
    and then prompt the user as to whether they want to enable eager loading and explicit
    loading, as shown in the following code:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QueryingCategories`方法中，修改语句以禁用延迟加载，然后提示用户是否希望启用预先加载和显式加载，如下面的代码所示：
- en: '[PRE62]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `foreach` loop, before the `WriteLine` method call, add statements to
    check if explicit loading is enabled, and if so, prompt the user as to whether
    they want to explicitly load each individual category, as shown in the following
    code:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foreach`循环中，在`WriteLine`方法调用之前，添加语句以检查是否启用了显式加载，如果是，则提示用户是否希望显式加载每个单独的类别，如下面的代码所示：
- en: '[PRE63]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Run the code:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码：
- en: Press `N` to disable eager loading.
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下`N`以禁用预先加载。
- en: Then press `Y` to enable explicit loading.
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后按下`Y`以启用显式加载。
- en: For each category, press `Y` or `N` to load its products as you wish.
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个类别，按`Y`或`N`以按你的意愿加载其产品。
- en: 'I chose to load products for only two of the eight categories, Beverages and
    Seafood, as shown in the following output that has been edited for space:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择只为八个类别中的两个——饮料和海鲜——加载产品，如下面的输出所示，为了节省空间已进行了编辑：
- en: '[PRE64]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '**Good Practice**: Carefully consider which loading pattern is best for your
    code. Lazy loading could literally make you a lazy database developer! Read more
    about loading patterns at the following link: [https://docs.microsoft.com/en-us/ef/core/querying/related-data](https://docs.microsoft.com/en-us/ef/core/querying/related-data)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：仔细考虑哪种加载模式最适合你的代码。延迟加载可能会让你成为懒惰的数据库开发者！更多关于加载模式的信息，请访问以下链接：[https://docs.microsoft.com/en-us/ef/core/querying/related-data](https://docs.microsoft.com/en-us/ef/core/querying/related-data)'
- en: Manipulating data with EF Core
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EF Core操作数据
- en: Inserting, updating, and deleting entities using EF Core is an easy task to
    accomplish.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EF Core插入、更新和删除实体是一个容易完成的任务。
- en: '`DbContext` maintains change tracking automatically, so the local entities
    can have multiple changes tracked, including adding new entities, modifying existing
    entities, and removing entities. When you are ready to send those changes to the
    underlying database, call the `SaveChanges` method. The number of entities successfully
    changed will be returned.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext` 自动维护变更跟踪，因此本地实体可以有多个变更被跟踪，包括添加新实体、修改现有实体和删除实体。当你准备好将这些变更发送到底层数据库时，调用
    `SaveChanges` 方法。成功变更的实体数量将被返回。'
- en: Inserting entities
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入实体
- en: 'Let''s start by looking at how to add a new row to a table:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看看如何向表中添加新行：
- en: 'In `Program.cs`, create a new method named `AddProduct`, as shown in the following
    code:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，创建一个名为 `AddProduct` 的新方法，如下所示：
- en: '[PRE65]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In `Program.cs`, create a new method named `ListProducts` that outputs the
    Id, name, cost, stock, and discontinued properties of each product sorted with
    the costliest first, as shown in the following code:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，创建一个名为 `ListProducts` 的新方法，该方法输出每个产品的 Id、名称、成本、库存和停产属性，并按成本最高排序，如下所示：
- en: '[PRE66]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Remember that `1,-35` means left-align argument 1 within a 35-character-wide
    column and `3,5` means right-align argument 3 within a 5-character-wide column.
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，`1,-35` 表示将参数1左对齐于一个35字符宽的列中，而 `3,5` 表示将参数3右对齐于一个5字符宽的列中。
- en: 'In `Program.cs`, comment out previous method calls, and then call `AddProduct`
    and `ListProducts`, as shown in the following code:'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉之前的方法调用，然后调用 `AddProduct` 和 `ListProducts`，如下所示：
- en: '[PRE67]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Run the code, view the result, and note the new product has been added, as
    shown in the following partial output:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意新添加的产品，如下所示：
- en: '[PRE68]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Updating entities
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新实体
- en: 'Now, let''s modify an existing row in a table:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改表中的现有行：
- en: 'In `Program.cs`, add a method to increase the price of the first product with
    a name that begins with a specified value (we''ll use Bob in our example) by a
    specified amount like $20, as shown in the following code:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，添加一个方法，将名称以指定值（在我们的例子中使用 Bob）开头的第一种产品的价格提高一个指定数额，比如 $20，如下所示：
- en: '[PRE69]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In `Program.cs`, comment out the whole `if` block that calls `AddProduct`,
    and add a call to `IncreaseProductPrice` before the call to list products, as
    shown highlighted in the following code:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉整个调用 `AddProduct` 的 `if` 块，并在列出产品之前添加对 `IncreaseProductPrice`
    的调用，如下所示：
- en: '[PRE70]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Run the code, view the result, and note that the existing entity for Bob''s
    Burgers has increased in price by $20, as shown in the following partial output:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意 Bob's Burgers 的现有实体价格已增加 $20，如下所示：
- en: '[PRE71]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Deleting entities
  id: totrans-505
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除实体
- en: You can remove individual entities with the `Remove` method. `RemoveRange` is
    more efficient when you want to delete multiple entities.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `Remove` 方法移除单个实体。当你想要删除多个实体时，`RemoveRange` 更为高效。
- en: 'Now let''s see how to delete rows from a table:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何从表中删除行：
- en: 'At the bottom of `Program.cs`, add a method to delete all products with a name
    that begins with a specified value (Bob in our example), as shown in the following
    code:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 底部，添加一个方法，删除名称以指定值（在我们的例子中是 Bob）开头的产品，如下所示：
- en: '[PRE72]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In `Program.cs`, comment out the whole `if` statement block that calls `IncreaseProductPrice`,
    and add a call to `DeleteProducts`, as shown in the following code:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉整个调用 `IncreaseProductPrice` 的 `if` 语句块，并添加对 `DeleteProducts`
    的调用，如下所示：
- en: '[PRE73]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示：
- en: '[PRE74]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: If multiple product names started with Bob, then they are all deleted. As an
    optional challenge, modify the statements to add three new products that start
    with Bob and then delete them.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个产品名称以 Bob 开头，那么它们都会被删除。作为可选挑战，修改语句以添加三个以 Bob 开头的新产品，然后删除它们。
- en: Pooling database contexts
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库上下文池化
- en: The `DbContext` class is disposable and is designed following the single-unit-of-work
    principle. In the previous code examples, we created all the `DbContext`-derived
    Northwind instances in a `using` block so that `Dispose` is properly called at
    the end of each unit of work.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext` 类是可释放的，并且是按照单一工作单元原则设计的。在前面的代码示例中，我们在一个 `using` 块中创建了所有派生自 `DbContext`
    的 Northwind 实例，以便在工作单元结束时适当地调用 `Dispose`。'
- en: A feature of ASP.NET Core that is related to EF Core is that it makes your code
    more efficient by pooling database contexts when building websites and services.
    This allows you to create and dispose of as many `DbContext`-derived objects as
    you want, knowing that your code is still as efficient as possible.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 的一个与 EF Core 相关的特性是，在构建网站和服务时，它通过池化数据库上下文使你的代码更高效。这允许你创建和销毁任意数量的`DbContext`派生对象，同时确保代码尽可能高效。
- en: Working with transactions
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**处理事务**'
- en: Every time you call the `SaveChanges` method, an **implicit** **transaction**
    is started so that if something goes wrong, it will automatically roll back all
    the changes. If the multiple changes within the transaction succeed, then the
    transaction and all changes are committed.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用`SaveChanges`方法时，都会启动一个**隐式** **事务**，以便在出现问题时自动回滚所有更改。如果事务内的多个更改成功，则提交事务和所有更改。
- en: Transactions maintain the integrity of your database by applying locks to prevent
    reads and writes while a sequence of changes is occurring.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 事务通过应用锁来防止在更改序列发生时进行读写，从而维护数据库的完整性。
- en: 'Transactions are **ACID**, which is an acronym explained in the following list:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 事务遵循**ACID**原则，这是一个缩写，其含义如下：
- en: '**A is for atomic**. Either all the operations in the transaction commit, or
    none of them do.'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性**意味着事务中的所有操作要么全部提交，要么全部不提交。'
- en: '**C is for consistent**. The state of the database before and after a transaction
    is consistent. This is dependent on your code logic; for example, when transferring
    money between bank accounts, it is up to your business logic to ensure that if
    you debit $100 in one account, you credit $100 in the other account.'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**意味着数据库在事务前后保持一致状态。这取决于你的代码逻辑；例如，在银行账户之间转账时，你的业务逻辑必须确保如果在一个账户中扣除$100，则在另一个账户中增加$100。'
- en: '**I is for isolated**. During a transaction, changes are hidden from other
    processes. There are multiple isolation levels that you can pick from (refer to
    the following table). The stronger the level, the better the integrity of the
    data. However, more locks must be applied, which will negatively affect other
    processes. Snapshot is a special case because it creates multiple copies of rows
    to avoid locks, but this will increase the size of your database while transactions
    occur.'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**意味着在事务执行期间，其更改对其他进程是隐藏的。你可以从多个隔离级别中选择（参见下表）。隔离级别越高，数据完整性越好，但需要应用更多的锁，这可能会对其他进程产生负面影响。快照是一个特殊情况，因为它创建了多行副本以避免锁，但这会增加事务发生时数据库的大小。'
- en: '**D is for durable**. If a failure occurs during a transaction, it can be recovered.
    This is often implemented as a two-phase commit and transaction logs. Once the
    transaction is committed it is guaranteed to endure even if there are subsequent
    errors. The opposite of durable is volatile.'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**意味着如果在事务执行过程中发生故障，可以进行恢复。这通常通过两阶段提交和事务日志来实现。一旦事务被提交，即使后续出现错误，也能保证其持久性。与持久性相对的是易失性。'
- en: Controlling transactions using isolation levels
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**控制事务使用隔离级别**'
- en: 'A developer can control transactions by setting an **isolation level**, as
    described in the following table:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以通过设置**隔离级别**来控制事务，如下表所述：
- en: '| Isolation level | Lock(s) | Integrity problems allowed |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| 隔离级别 | 锁 | 允许的完整性问题 |'
- en: '| `ReadUncommitted` | None | Dirty reads, nonrepeatable reads, and phantom
    data |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| `未提交读` | 无 | 脏读、不可重复读和幻像数据 |'
- en: '| `ReadCommitted` | When editing, it applies read lock(s) to block other users
    from reading the record(s) until the transaction ends | Nonrepeatable reads and
    phantom data |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| `已提交读` | 在编辑时，它应用读锁以阻止其他用户在事务结束前读取记录 | 不可重复读和幻像数据 |'
- en: '| `RepeatableRead` | When reading, it applies edit lock(s) to block other users
    from editing the record(s) until the transaction ends | Phantom data |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| `可重复读` | 在读取时，它应用编辑锁以阻止其他用户在事务结束前编辑记录 | 幻像数据 |'
- en: '| `Serializable` | Applies key-range locks to prevent any action that would
    affect the results, including inserts and deletes | None |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| `可串行化` | 应用键范围锁以防止任何影响结果的操作，包括插入和删除 | 无 |'
- en: '| `Snapshot` | None | None |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| `快照` | 无 | 无 |'
- en: Defining an explicit transaction
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**定义显式事务**'
- en: 'You can control explicit transactions using the `Database` property of the
    database context:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用数据库上下文的`Database`属性来控制显式事务：
- en: 'In `Program.cs`, import the EF Core storage namespace to use the `IDbContextTransaction`
    interface, as shown in the following code:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入EF Core存储命名空间以使用`IDbContextTransaction`接口，如下面的代码所示：
- en: '[PRE75]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In the `DeleteProducts` method, after the instantiation of the `db` variable,
    add statements to start an explicit transaction and output its isolation level.
    At the bottom of the method, commit the transaction, and close the brace, as shown
    highlighted in the following code:'
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DeleteProducts`方法中，在`db`变量实例化后，添加语句以启动显式事务并输出其隔离级别。在方法底部，提交事务并关闭大括号，如下面的代码所示：
- en: '[PRE76]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Run the code and view the result using SQL Server, as shown in the following
    output:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并在SQL Server中查看结果，如下面的输出所示：
- en: '[PRE77]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Run the code and view the result using SQLite, as shown in the following output:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并在SQLite中查看结果，如下面的输出所示：
- en: '[PRE78]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Code First EF Core models
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code First EF Core模型
- en: Sometimes you will not have an existing database. Instead, you define the EF
    Core model as Code First, and then EF Core can generate a matching database using
    create and drop APIs.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能没有现有数据库。相反，您将EF Core模型定义为Code First，然后EF Core可以使用创建和删除API生成匹配的数据库。
- en: '**Good Practice**: The create and drop APIs should only be used during development.
    Once you release the app, you do not want it to delete a production database!'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：创建和删除API仅应在开发期间使用。一旦发布应用程序，您不希望它删除生产数据库！'
- en: For example, we might need to create an application for managing students and
    courses for an academy. One student can sign up to attend multiple courses. One
    course can be attended by multiple students. This is an example of a many-to-many
    relationship between students and courses.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能需要为学院创建一个管理学生和课程的应用程序。一个学生可以注册参加多个课程。一个课程可以由多个学生参加。这是学生和课程之间多对多关系的一个例子。
- en: 'Let''s model this example:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟这个示例：
- en: Use your preferred code editor to add a new console app named `CoursesAndStudents`
    to the `Chapter10` solution/workspace.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器，在`Chapter10`解决方案/工作区中添加一个名为`CoursesAndStudents`的新控制台应用程序。
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `CoursesAndStudents` as the active OmniSharp project.
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`CoursesAndStudents`作为活动OmniSharp项目。
- en: 'In the `CoursesAndStudents` project, add package references for the following
    packages:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CoursesAndStudents`项目中，添加以下包的包引用：
- en: '`Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Sqlite`'
- en: '`Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.SqlServer`'
- en: '`Microsoft.EntityFrameworkCore.Design`'
  id: totrans-555
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Design`'
- en: Build the `CoursesAndStudents` project to restore packages.
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`CoursesAndStudents`项目以恢复包。
- en: Add classes named `Academy.cs`, `Student.cs`, and `Course.cs`.
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Academy.cs`、`Student.cs`和`Course.cs`的类。
- en: 'Modify `Student.cs`, and note that it is a POCO (plain old CLR object) with
    no attributes decorating the class, as shown in the following code:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Student.cs`，并注意它是一个没有属性装饰类的POCO（普通旧CLR对象），如下面的代码所示：
- en: '[PRE79]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Modify `Course.cs`, and note that we have decorated the `Title` property with
    some attributes to provide more information to the model, as shown in the following
    code:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Course.cs`，并注意我们已经用一些属性装饰了`Title`属性，以向模型提供更多信息，如下面的代码所示：
- en: '[PRE80]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Modify `Academy.cs`, as shown in the following code:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Academy.cs`，如下面的代码所示：
- en: '[PRE81]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '**Good Practice**: Use an anonymous type to supply data for the intermediate
    table in a many-to-many relationship. The property names follow the naming convention
    `NavigationPropertyNamePropertyName`, for example, `Courses` is the navigation
    property name and `CourseId` is the property name so `CoursesCourseId` will be
    the property name of the anonymous type.'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最佳实践**：使用匿名类型为多对多关系中的中间表提供数据。属性名称遵循命名约定`NavigationPropertyNamePropertyName`，例如，`Courses`是导航属性名称，`CourseId`是属性名称，因此`CoursesCourseId`将是匿名类型的属性名称。'
- en: 'In `Program.cs`, at the top of the file, import the namespace for EF Core and
    working with tasks, and statically import `Console`, as shown in the following
    code:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在文件顶部，导入EF Core和处理任务的命名空间，并静态导入`Console`，如下面的代码所示：
- en: '[PRE82]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In `Program.cs`, add statements to create an instance of the `Academy` database
    context and use it to delete the database if it exists, create the database from
    the model and output the SQL script it uses, and then enumerate the students and
    their courses, as shown in the following code:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句以创建`Academy`数据库上下文的实例，并使用它来删除现有数据库，根据模型创建数据库并输出它使用的SQL脚本，然后枚举学生及其课程，如下所示：
- en: '[PRE83]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Run the code, and note that the first time you run the code it will not need
    to delete the database because it does not exist yet, as shown in the following
    output:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意首次运行代码时无需删除数据库，因为它尚不存在，如下所示：
- en: '[PRE84]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Note the following:'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: The `Title` column is `NOT NULL` because the model was decorated with `[Required]`.
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Title`列不可为空，因为模型被装饰了`[Required]`。'
- en: The `LastName` column is `NOT NULL` because the model used `IsRequired()`.
  id: totrans-573
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LastName`列不可为空，因为模型使用了`IsRequired()`。'
- en: An intermediate table named `CourseStudent` was created to hold information
    about which students attend which courses.
  id: totrans-574
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个名为`CourseStudent`的中间表，用于存储哪些学生参加了哪些课程的信息。
- en: Use Visual Studio Server Explorer or SQLiteStudio to connect to the `Academy`
    database and view the tables, as shown in *Figure 10.6*:![](img/B17442_11_09.png)
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Server Explorer或SQLiteStudio连接到`Academy`数据库并查看表格，如图10.6所示：![](img/B17442_11_09.png)
- en: 'Figure 10.6: Viewing the Academy database in SQL Server using Visual Studio
    2022 Server Explorer'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：使用Visual Studio 2022 Server Explorer在SQL Server中查看Academy数据库
- en: Understanding migrations
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解迁移
- en: After publishing a project that uses a database, it is likely that you will
    later need to change your entity data model and therefore the database structure.
    At that point, you should not use the `Ensure` methods. Instead, you need to use
    a system that allows you to incrementally update the database schema while preserving
    any existing data in the database. EF Core migrations are that system.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 发布使用数据库的项目后，很可能稍后需要更改实体数据模型，从而改变数据库结构。届时，不应使用`Ensure`方法。相反，你需要使用一个系统，该系统允许你在保留数据库中任何现有数据的同时逐步更新数据库架构。EF
    Core迁移就是这样的系统。
- en: 'Migrations get complex fast, so are beyond the scope of this book. You can
    read about them at the following link: [https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/](https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移很快会变得复杂，因此超出了本书的范围。你可以在以下链接中了解更多信息：[https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/](https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/)
- en: Practicing and exploring
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践与探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试你的知识和理解，进行一些实践练习，并深入研究本章的主题。
- en: Exercise 10.1 – Test your knowledge
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What type would you use for the property that represents a table, for example,
    the `Products` property of a database context?
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于表示表的属性，例如数据库上下文的`Products`属性，应使用哪种类型？
- en: What type would you use for the property that represents a one-to-many relationship,
    for example, the `Products` property of a `Category` entity?
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于表示一对多关系的属性，例如`Category`实体的`Products`属性，应使用哪种类型？
- en: What is the EF Core convention for primary keys?
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EF Core对主键的约定是什么？
- en: When might you use an annotation attribute in an entity class?
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时可能在实体类中使用注解属性？
- en: Why might you choose the Fluent API in preference to annotation attributes?
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为何你可能更倾向于选择Fluent API而不是注解属性？
- en: What does a transaction isolation level of `Serializable` mean?
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事务隔离级别为`Serializable`意味着什么？
- en: What does the `DbContext.SaveChanges()` method return?
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DbContext.SaveChanges()`方法返回什么？'
- en: What is the difference between eager loading and explicit loading?
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 急切加载与显式加载之间有何区别？
- en: How should you define an EF Core entity class to match the following table?
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何定义一个EF Core实体类以匹配以下表格？
- en: '[PRE85]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: What benefit do you get from declaring entity navigation properties as `virtual`?
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将实体导航属性声明为`virtual`有何好处？
- en: Exercise 10.2 – Practice exporting data using different serialization formats
  id: totrans-595
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.2 – 实践使用不同的序列化格式导出数据
- en: In the `Chapter10` solution/workspace, create a console application named `Exercise02`
    that queries the Northwind database for all the categories and products, and then
    serializes the data using at least three formats of serialization available to
    .NET. Which format of serialization uses the least number of bytes?
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter10`解决方案/工作区中，创建一个名为`Exercise02`的控制台应用程序，该程序查询Northwind数据库中的所有类别和产品，并使用.NET提供的至少三种序列化格式对数据进行序列化。哪种序列化格式使用的字节数最少？
- en: Exercise 10.3 – Explore topics
  id: totrans-597
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.3 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解更多关于本章涵盖主题的详细信息：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core)'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core)'
- en: Exercise 10.4 – Explore NoSQL databases
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.4 – 探索NoSQL数据库
- en: 'This chapter focused on RDBMSs such as SQL Server and SQLite. If you wish to
    learn more about NoSQL databases, such as Cosmos DB and MongoDB, and how to use
    them with EF Core, then I recommend the following links:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了SQL Server和SQLite等RDBMS。如果你想了解更多关于Cosmos DB和MongoDB等NoSQL数据库的信息，以及如何使用它们与EF
    Core，那么我推荐以下链接：
- en: '**Welcome to Azure Cosmos DB**: [https://docs.microsoft.com/en-us/azure/cosmos-db/introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欢迎来到Azure Cosmos DB**：[https://docs.microsoft.com/en-us/azure/cosmos-db/introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)'
- en: '**Use NoSQL databases as a persistence infrastructure**: [https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将NoSQL数据库用作持久性基础设施**：[https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://docs.microsoft.com/en-us/dotnet.standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
- en: '**Document Database Providers for Entity Framework Core**: [https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework Core的文档数据库提供程序**：[https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
- en: Summary
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to connect to an existing database, how to
    execute a simple LINQ query and process the results, how to use filtered includes,
    how to add, modify, and delete data, and how to build entity data models for an
    existing database, such as Northwind. You also learned how to define a Code First
    model and use it to create a new database and populate it with data.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何连接到现有数据库，如何执行简单的LINQ查询并处理结果，如何使用过滤的包含，如何添加、修改和删除数据，以及如何为现有数据库（如Northwind）构建实体数据模型。你还学习了如何定义Code
    First模型，并使用它创建新数据库并填充数据。
- en: In the next chapter, you will learn how to write more advanced LINQ queries
    to select, filter, sort, join, and group.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何编写更高级的LINQ查询，以进行选择、过滤、排序、连接和分组。
